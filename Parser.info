-----------------------------------------------------------------------------
Info file generated by Happy Version 1.17 from Parser.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> PROGRAMA                           (0)
	PROGRAMA -> SECUENCIA_1                            (1)
	SECUENCIA_1 -> INSTR                               (2)
	SECUENCIA_1 -> CICLO                               (3)
	SECUENCIA_1 -> SECUENCIA_2 INSTR                   (4)
	SECUENCIA_1 -> SECUENCIA_2 CICLO                   (5)
	SECUENCIA_2 -> INSTR ';'                           (6)
	SECUENCIA_2 -> CICLO                               (7)
	SECUENCIA_2 -> SECUENCIA_2 INSTR ';'               (8)
	SECUENCIA_2 -> SECUENCIA_2 CICLO                   (9)
	INSTR -> identificador '(' identificador ')' '=' EM   (10)
	INSTR -> identificador '=' EM                      (11)
	INSTR -> "plot" EM ',' EG "with" '[' ']'           (12)
	INSTR -> "plot" EM ',' EG "with" '[' SECUENCIA_ESTILO ']'   (13)
	INSTR -> "plot" EM ',' EG "with" estilo            (14)
	INSTR -> "plot" EM ',' EG                          (15)
	INSTR -> "push_back" '(' identificador ',' EM ')'   (16)
	CICLO -> "for" identificador "in" EM SECUENCIA_1 "endfor"   (17)
	CICLO -> "for" identificador "in" EM "step" EM SECUENCIA_1 "endfor"   (18)
	EM -> EM '+' EM                                    (19)
	EM -> EM '-' EM                                    (20)
	EM -> EM '*' EM                                    (21)
	EM -> EM '/' EM                                    (22)
	EM -> EM '^' EM                                    (23)
	EM -> '-' EM                                       (24)
	EM -> '(' EM ')'                                   (25)
	EM -> int                                          (26)
	EM -> real                                         (27)
	EM -> constmat                                     (28)
	EM -> funcion '(' EM ')'                           (29)
	EM -> identificador '(' EM ')'                     (30)
	EM -> identificador                                (31)
	EM -> '[' ']'                                      (32)
	EM -> '[' SECUENCIA_EM ']'                         (33)
	EM -> "range" '(' EM ',' EM ')'                    (34)
	EM -> '[' EM "for" identificador "in" EM ']'       (35)
	EM -> "if" '(' COND ',' EM ',' EM ')'              (36)
	SECUENCIA_EM -> EM                                 (37)
	SECUENCIA_EM -> SECUENCIA_EM ',' EM                (38)
	SECUENCIA_COND -> COND                             (39)
	SECUENCIA_COND -> SECUENCIA_COND ',' COND          (40)
	SECUENCIA_ESTILO -> estilo                         (41)
	SECUENCIA_ESTILO -> SECUENCIA_ESTILO ',' estilo    (42)
	COND -> COND '+' COND                              (43)
	COND -> COND '-' COND                              (44)
	COND -> COND '*' COND                              (45)
	COND -> COND '/' COND                              (46)
	COND -> COND '^' COND                              (47)
	COND -> '-' COND                                   (48)
	COND -> '(' COND ')'                               (49)
	COND -> int                                        (50)
	COND -> real                                       (51)
	COND -> constmat                                   (52)
	COND -> funcion '(' COND ')'                       (53)
	COND -> identificador '(' COND ')'                 (54)
	COND -> identificador                              (55)
	COND -> '[' ']'                                    (56)
	COND -> '[' SECUENCIA_COND ']'                     (57)
	COND -> "range" '(' COND ',' COND ')'              (58)
	COND -> '[' COND "for" identificador "in" COND ']'   (59)
	COND -> "if" '(' COND ',' COND ',' COND ')'        (60)
	COND -> COND "AND" COND                            (61)
	COND -> COND "OR" COND                             (62)
	COND -> "NOT" COND                                 (63)
	COND -> COND '>' COND                              (64)
	COND -> COND '<' COND                              (65)
	COND -> COND "<=" COND                             (66)
	COND -> COND ">=" COND                             (67)
	COND -> COND "==" COND                             (68)
	EG -> EM                                           (69)
	EG -> archivo                                      (70)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'+'            { ParserStatus TkMas _ _ }
	'-'            { ParserStatus TkMenos _ _ }
	'*'            { ParserStatus TkPor _ _ }
	'/'            { ParserStatus TkEntre  _ _ }
	'^'            { ParserStatus TkElevado _ _ }
	int            { ParserStatus (TkEntero $$) _ _ }
	real           { ParserStatus (TkReal $$) _ _ }
	constmat       { ParserStatus (TkConstanteMat $$) _ _ }
	funcion        { ParserStatus (TkFuncion $$) _ _ }
	'('            { ParserStatus TkParentesisI _ _ }
	')'            { ParserStatus TkParentesisD _ _ }
	'['            { ParserStatus TkCorcheteI _ _ }
	']'            { ParserStatus TkCorcheteD _ _ }
	','            { ParserStatus TkComa _ _ }
	"range"        { ParserStatus TkRango _ _ }
	"for"          { ParserStatus TkFor _ _ }
	"in"           { ParserStatus TkIn _ _ }
	"if"           { ParserStatus TkIf _ _ }
	"AND"          { ParserStatus TkAnd _ _ }
	"OR"           { ParserStatus TkOr _ _ }
	"NOT"          { ParserStatus TkNot _ _ }
	'<'            { ParserStatus TkMenor _ _ }
	'>'            { ParserStatus TkMayor _ _ }
	">="           { ParserStatus TkMayorIg _ _ }
	"<="           { ParserStatus TkMenorIg _ _ }
	"=="           { ParserStatus TkIgual _ _ }
	';'            { ParserStatus TkPuntoYComa _ _ }
	'='            { ParserStatus TkAsignacion _ _ }
	"with"         { ParserStatus TkWith _ _ }
	"plot"         { ParserStatus TkPlot _ _ }
	"endfor"       { ParserStatus TkEndFor _ _ }
	"step"         { ParserStatus TkStep _ _ }
	"push_back"    { ParserStatus TkPushBack _ _ }
	estilo         { ParserStatus (TkEstilo $$) _ _ }
	identificador  { ParserStatus (TkIdentificador $$) _ _ }
	archivo        { ParserStatus (TkArchivo $$) _ _ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	PROGRAMA        rule  1
	SECUENCIA_1     rules 2, 3, 4, 5
	SECUENCIA_2     rules 6, 7, 8, 9
	INSTR           rules 10, 11, 12, 13, 14, 15, 16
	CICLO           rules 17, 18
	EM              rules 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36
	SECUENCIA_EM    rules 37, 38
	SECUENCIA_COND  rules 39, 40
	SECUENCIA_ESTILO rules 41, 42
	COND            rules 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68
	EG              rules 69, 70

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	"for"          shift, and enter state 6
	"plot"         shift, and enter state 7
	"push_back"    shift, and enter state 8
	identificador  shift, and enter state 9

	PROGRAMA       goto state 10
	SECUENCIA_1    goto state 2
	SECUENCIA_2    goto state 3
	INSTR          goto state 4
	CICLO          goto state 5

State 1


	"for"          shift, and enter state 6
	"plot"         shift, and enter state 7
	"push_back"    shift, and enter state 8
	identificador  shift, and enter state 9

	SECUENCIA_1    goto state 2
	SECUENCIA_2    goto state 3
	INSTR          goto state 4
	CICLO          goto state 5

State 2

	PROGRAMA -> SECUENCIA_1 .                           (rule 1)

	%eof           reduce using rule 1


State 3

	SECUENCIA_1 -> SECUENCIA_2 . INSTR                  (rule 4)
	SECUENCIA_1 -> SECUENCIA_2 . CICLO                  (rule 5)
	SECUENCIA_2 -> SECUENCIA_2 . INSTR ';'              (rule 8)
	SECUENCIA_2 -> SECUENCIA_2 . CICLO                  (rule 9)

	"for"          shift, and enter state 6
	"plot"         shift, and enter state 7
	"push_back"    shift, and enter state 8
	identificador  shift, and enter state 9

	INSTR          goto state 27
	CICLO          goto state 28

State 4

	SECUENCIA_1 -> INSTR .                              (rule 2)
	SECUENCIA_2 -> INSTR . ';'                          (rule 6)

	';'            shift, and enter state 26
	"endfor"       reduce using rule 2
	%eof           reduce using rule 2


State 5

	SECUENCIA_1 -> CICLO .                              (rule 3)
	SECUENCIA_2 -> CICLO .                              (rule 7)

	"for"          reduce using rule 7
	"plot"         reduce using rule 7
	"endfor"       reduce using rule 3
	"push_back"    reduce using rule 7
	identificador  reduce using rule 7
	%eof           reduce using rule 3


State 6

	CICLO -> "for" . identificador "in" EM SECUENCIA_1 "endfor"    (rule 17)
	CICLO -> "for" . identificador "in" EM "step" EM SECUENCIA_1 "endfor"    (rule 18)

	identificador  shift, and enter state 25


State 7

	INSTR -> "plot" . EM ',' EG "with" '[' ']'          (rule 12)
	INSTR -> "plot" . EM ',' EG "with" '[' SECUENCIA_ESTILO ']'    (rule 13)
	INSTR -> "plot" . EM ',' EG "with" estilo           (rule 14)
	INSTR -> "plot" . EM ',' EG                         (rule 15)

	'-'            shift, and enter state 15
	int            shift, and enter state 16
	real           shift, and enter state 17
	constmat       shift, and enter state 18
	funcion        shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	"range"        shift, and enter state 22
	"if"           shift, and enter state 23
	identificador  shift, and enter state 24

	EM             goto state 14

State 8

	INSTR -> "push_back" . '(' identificador ',' EM ')'    (rule 16)

	'('            shift, and enter state 13


State 9

	INSTR -> identificador . '(' identificador ')' '=' EM    (rule 10)
	INSTR -> identificador . '=' EM                     (rule 11)

	'('            shift, and enter state 11
	'='            shift, and enter state 12


State 10

	%start_parse -> PROGRAMA .                          (rule 0)

	%eof           accept


State 11

	INSTR -> identificador '(' . identificador ')' '=' EM    (rule 10)

	identificador  shift, and enter state 48


State 12

	INSTR -> identificador '=' . EM                     (rule 11)

	'-'            shift, and enter state 15
	int            shift, and enter state 16
	real           shift, and enter state 17
	constmat       shift, and enter state 18
	funcion        shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	"range"        shift, and enter state 22
	"if"           shift, and enter state 23
	identificador  shift, and enter state 24

	EM             goto state 47

State 13

	INSTR -> "push_back" '(' . identificador ',' EM ')'    (rule 16)

	identificador  shift, and enter state 46


State 14

	INSTR -> "plot" EM . ',' EG "with" '[' ']'          (rule 12)
	INSTR -> "plot" EM . ',' EG "with" '[' SECUENCIA_ESTILO ']'    (rule 13)
	INSTR -> "plot" EM . ',' EG "with" estilo           (rule 14)
	INSTR -> "plot" EM . ',' EG                         (rule 15)
	EM -> EM . '+' EM                                   (rule 19)
	EM -> EM . '-' EM                                   (rule 20)
	EM -> EM . '*' EM                                   (rule 21)
	EM -> EM . '/' EM                                   (rule 22)
	EM -> EM . '^' EM                                   (rule 23)

	'+'            shift, and enter state 40
	'-'            shift, and enter state 41
	'*'            shift, and enter state 42
	'/'            shift, and enter state 43
	'^'            shift, and enter state 44
	','            shift, and enter state 45


State 15

	EM -> '-' . EM                                      (rule 24)

	'-'            shift, and enter state 15
	int            shift, and enter state 16
	real           shift, and enter state 17
	constmat       shift, and enter state 18
	funcion        shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	"range"        shift, and enter state 22
	"if"           shift, and enter state 23
	identificador  shift, and enter state 24

	EM             goto state 39

State 16

	EM -> int .                                         (rule 26)

	'+'            reduce using rule 26
	'-'            reduce using rule 26
	'*'            reduce using rule 26
	'/'            reduce using rule 26
	'^'            reduce using rule 26
	')'            reduce using rule 26
	']'            reduce using rule 26
	','            reduce using rule 26
	"for"          reduce using rule 26
	';'            reduce using rule 26
	"with"         reduce using rule 26
	"plot"         reduce using rule 26
	"endfor"       reduce using rule 26
	"step"         reduce using rule 26
	"push_back"    reduce using rule 26
	identificador  reduce using rule 26
	%eof           reduce using rule 26


State 17

	EM -> real .                                        (rule 27)

	'+'            reduce using rule 27
	'-'            reduce using rule 27
	'*'            reduce using rule 27
	'/'            reduce using rule 27
	'^'            reduce using rule 27
	')'            reduce using rule 27
	']'            reduce using rule 27
	','            reduce using rule 27
	"for"          reduce using rule 27
	';'            reduce using rule 27
	"with"         reduce using rule 27
	"plot"         reduce using rule 27
	"endfor"       reduce using rule 27
	"step"         reduce using rule 27
	"push_back"    reduce using rule 27
	identificador  reduce using rule 27
	%eof           reduce using rule 27


State 18

	EM -> constmat .                                    (rule 28)

	'+'            reduce using rule 28
	'-'            reduce using rule 28
	'*'            reduce using rule 28
	'/'            reduce using rule 28
	'^'            reduce using rule 28
	')'            reduce using rule 28
	']'            reduce using rule 28
	','            reduce using rule 28
	"for"          reduce using rule 28
	';'            reduce using rule 28
	"with"         reduce using rule 28
	"plot"         reduce using rule 28
	"endfor"       reduce using rule 28
	"step"         reduce using rule 28
	"push_back"    reduce using rule 28
	identificador  reduce using rule 28
	%eof           reduce using rule 28


State 19

	EM -> funcion . '(' EM ')'                          (rule 29)

	'('            shift, and enter state 38


State 20

	EM -> '(' . EM ')'                                  (rule 25)

	'-'            shift, and enter state 15
	int            shift, and enter state 16
	real           shift, and enter state 17
	constmat       shift, and enter state 18
	funcion        shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	"range"        shift, and enter state 22
	"if"           shift, and enter state 23
	identificador  shift, and enter state 24

	EM             goto state 37

State 21

	EM -> '[' . ']'                                     (rule 32)
	EM -> '[' . SECUENCIA_EM ']'                        (rule 33)
	EM -> '[' . EM "for" identificador "in" EM ']'      (rule 35)

	'-'            shift, and enter state 15
	int            shift, and enter state 16
	real           shift, and enter state 17
	constmat       shift, and enter state 18
	funcion        shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	']'            shift, and enter state 36
	"range"        shift, and enter state 22
	"if"           shift, and enter state 23
	identificador  shift, and enter state 24

	EM             goto state 34
	SECUENCIA_EM   goto state 35

State 22

	EM -> "range" . '(' EM ',' EM ')'                   (rule 34)

	'('            shift, and enter state 33


State 23

	EM -> "if" . '(' COND ',' EM ',' EM ')'             (rule 36)

	'('            shift, and enter state 32


State 24

	EM -> identificador . '(' EM ')'                    (rule 30)
	EM -> identificador .                               (rule 31)

	'+'            reduce using rule 31
	'-'            reduce using rule 31
	'*'            reduce using rule 31
	'/'            reduce using rule 31
	'^'            reduce using rule 31
	'('            shift, and enter state 31
	')'            reduce using rule 31
	']'            reduce using rule 31
	','            reduce using rule 31
	"for"          reduce using rule 31
	';'            reduce using rule 31
	"with"         reduce using rule 31
	"plot"         reduce using rule 31
	"endfor"       reduce using rule 31
	"step"         reduce using rule 31
	"push_back"    reduce using rule 31
	identificador  reduce using rule 31
	%eof           reduce using rule 31


State 25

	CICLO -> "for" identificador . "in" EM SECUENCIA_1 "endfor"    (rule 17)
	CICLO -> "for" identificador . "in" EM "step" EM SECUENCIA_1 "endfor"    (rule 18)

	"in"           shift, and enter state 30


State 26

	SECUENCIA_2 -> INSTR ';' .                          (rule 6)

	"for"          reduce using rule 6
	"plot"         reduce using rule 6
	"push_back"    reduce using rule 6
	identificador  reduce using rule 6


State 27

	SECUENCIA_1 -> SECUENCIA_2 INSTR .                  (rule 4)
	SECUENCIA_2 -> SECUENCIA_2 INSTR . ';'              (rule 8)

	';'            shift, and enter state 29
	"endfor"       reduce using rule 4
	%eof           reduce using rule 4


State 28

	SECUENCIA_1 -> SECUENCIA_2 CICLO .                  (rule 5)
	SECUENCIA_2 -> SECUENCIA_2 CICLO .                  (rule 9)

	"for"          reduce using rule 9
	"plot"         reduce using rule 9
	"endfor"       reduce using rule 5
	"push_back"    reduce using rule 9
	identificador  reduce using rule 9
	%eof           reduce using rule 5


State 29

	SECUENCIA_2 -> SECUENCIA_2 INSTR ';' .              (rule 8)

	"for"          reduce using rule 8
	"plot"         reduce using rule 8
	"push_back"    reduce using rule 8
	identificador  reduce using rule 8


State 30

	CICLO -> "for" identificador "in" . EM SECUENCIA_1 "endfor"    (rule 17)
	CICLO -> "for" identificador "in" . EM "step" EM SECUENCIA_1 "endfor"    (rule 18)

	'-'            shift, and enter state 15
	int            shift, and enter state 16
	real           shift, and enter state 17
	constmat       shift, and enter state 18
	funcion        shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	"range"        shift, and enter state 22
	"if"           shift, and enter state 23
	identificador  shift, and enter state 24

	EM             goto state 78

State 31

	EM -> identificador '(' . EM ')'                    (rule 30)

	'-'            shift, and enter state 15
	int            shift, and enter state 16
	real           shift, and enter state 17
	constmat       shift, and enter state 18
	funcion        shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	"range"        shift, and enter state 22
	"if"           shift, and enter state 23
	identificador  shift, and enter state 24

	EM             goto state 77

State 32

	EM -> "if" '(' . COND ',' EM ',' EM ')'             (rule 36)

	'-'            shift, and enter state 66
	int            shift, and enter state 67
	real           shift, and enter state 68
	constmat       shift, and enter state 69
	funcion        shift, and enter state 70
	'('            shift, and enter state 71
	'['            shift, and enter state 72
	"range"        shift, and enter state 73
	"if"           shift, and enter state 74
	"NOT"          shift, and enter state 75
	identificador  shift, and enter state 76

	COND           goto state 65

State 33

	EM -> "range" '(' . EM ',' EM ')'                   (rule 34)

	'-'            shift, and enter state 15
	int            shift, and enter state 16
	real           shift, and enter state 17
	constmat       shift, and enter state 18
	funcion        shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	"range"        shift, and enter state 22
	"if"           shift, and enter state 23
	identificador  shift, and enter state 24

	EM             goto state 64

State 34

	EM -> EM . '+' EM                                   (rule 19)
	EM -> EM . '-' EM                                   (rule 20)
	EM -> EM . '*' EM                                   (rule 21)
	EM -> EM . '/' EM                                   (rule 22)
	EM -> EM . '^' EM                                   (rule 23)
	EM -> '[' EM . "for" identificador "in" EM ']'      (rule 35)
	SECUENCIA_EM -> EM .                                (rule 37)

	'+'            shift, and enter state 40
	'-'            shift, and enter state 41
	'*'            shift, and enter state 42
	'/'            shift, and enter state 43
	'^'            shift, and enter state 44
	']'            reduce using rule 37
	','            reduce using rule 37
	"for"          shift, and enter state 63


State 35

	EM -> '[' SECUENCIA_EM . ']'                        (rule 33)
	SECUENCIA_EM -> SECUENCIA_EM . ',' EM               (rule 38)

	']'            shift, and enter state 61
	','            shift, and enter state 62


State 36

	EM -> '[' ']' .                                     (rule 32)

	'+'            reduce using rule 32
	'-'            reduce using rule 32
	'*'            reduce using rule 32
	'/'            reduce using rule 32
	'^'            reduce using rule 32
	')'            reduce using rule 32
	']'            reduce using rule 32
	','            reduce using rule 32
	"for"          reduce using rule 32
	';'            reduce using rule 32
	"with"         reduce using rule 32
	"plot"         reduce using rule 32
	"endfor"       reduce using rule 32
	"step"         reduce using rule 32
	"push_back"    reduce using rule 32
	identificador  reduce using rule 32
	%eof           reduce using rule 32


State 37

	EM -> EM . '+' EM                                   (rule 19)
	EM -> EM . '-' EM                                   (rule 20)
	EM -> EM . '*' EM                                   (rule 21)
	EM -> EM . '/' EM                                   (rule 22)
	EM -> EM . '^' EM                                   (rule 23)
	EM -> '(' EM . ')'                                  (rule 25)

	'+'            shift, and enter state 40
	'-'            shift, and enter state 41
	'*'            shift, and enter state 42
	'/'            shift, and enter state 43
	'^'            shift, and enter state 44
	')'            shift, and enter state 60


State 38

	EM -> funcion '(' . EM ')'                          (rule 29)

	'-'            shift, and enter state 15
	int            shift, and enter state 16
	real           shift, and enter state 17
	constmat       shift, and enter state 18
	funcion        shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	"range"        shift, and enter state 22
	"if"           shift, and enter state 23
	identificador  shift, and enter state 24

	EM             goto state 59

State 39

	EM -> EM . '+' EM                                   (rule 19)
	EM -> EM . '-' EM                                   (rule 20)
	EM -> EM . '*' EM                                   (rule 21)
	EM -> EM . '/' EM                                   (rule 22)
	EM -> EM . '^' EM                                   (rule 23)
	EM -> '-' EM .                                      (rule 24)

	'+'            reduce using rule 24
	'-'            reduce using rule 24
	'*'            reduce using rule 24
	'/'            reduce using rule 24
	'^'            shift, and enter state 44
	')'            reduce using rule 24
	']'            reduce using rule 24
	','            reduce using rule 24
	"for"          reduce using rule 24
	';'            reduce using rule 24
	"with"         reduce using rule 24
	"plot"         reduce using rule 24
	"endfor"       reduce using rule 24
	"step"         reduce using rule 24
	"push_back"    reduce using rule 24
	identificador  reduce using rule 24
	%eof           reduce using rule 24


State 40

	EM -> EM '+' . EM                                   (rule 19)

	'-'            shift, and enter state 15
	int            shift, and enter state 16
	real           shift, and enter state 17
	constmat       shift, and enter state 18
	funcion        shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	"range"        shift, and enter state 22
	"if"           shift, and enter state 23
	identificador  shift, and enter state 24

	EM             goto state 58

State 41

	EM -> EM '-' . EM                                   (rule 20)

	'-'            shift, and enter state 15
	int            shift, and enter state 16
	real           shift, and enter state 17
	constmat       shift, and enter state 18
	funcion        shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	"range"        shift, and enter state 22
	"if"           shift, and enter state 23
	identificador  shift, and enter state 24

	EM             goto state 57

State 42

	EM -> EM '*' . EM                                   (rule 21)

	'-'            shift, and enter state 15
	int            shift, and enter state 16
	real           shift, and enter state 17
	constmat       shift, and enter state 18
	funcion        shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	"range"        shift, and enter state 22
	"if"           shift, and enter state 23
	identificador  shift, and enter state 24

	EM             goto state 56

State 43

	EM -> EM '/' . EM                                   (rule 22)

	'-'            shift, and enter state 15
	int            shift, and enter state 16
	real           shift, and enter state 17
	constmat       shift, and enter state 18
	funcion        shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	"range"        shift, and enter state 22
	"if"           shift, and enter state 23
	identificador  shift, and enter state 24

	EM             goto state 55

State 44

	EM -> EM '^' . EM                                   (rule 23)

	'-'            shift, and enter state 15
	int            shift, and enter state 16
	real           shift, and enter state 17
	constmat       shift, and enter state 18
	funcion        shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	"range"        shift, and enter state 22
	"if"           shift, and enter state 23
	identificador  shift, and enter state 24

	EM             goto state 54

State 45

	INSTR -> "plot" EM ',' . EG "with" '[' ']'          (rule 12)
	INSTR -> "plot" EM ',' . EG "with" '[' SECUENCIA_ESTILO ']'    (rule 13)
	INSTR -> "plot" EM ',' . EG "with" estilo           (rule 14)
	INSTR -> "plot" EM ',' . EG                         (rule 15)

	'-'            shift, and enter state 15
	int            shift, and enter state 16
	real           shift, and enter state 17
	constmat       shift, and enter state 18
	funcion        shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	"range"        shift, and enter state 22
	"if"           shift, and enter state 23
	identificador  shift, and enter state 24
	archivo        shift, and enter state 53

	EM             goto state 51
	EG             goto state 52

State 46

	INSTR -> "push_back" '(' identificador . ',' EM ')'    (rule 16)

	','            shift, and enter state 50


State 47

	INSTR -> identificador '=' EM .                     (rule 11)
	EM -> EM . '+' EM                                   (rule 19)
	EM -> EM . '-' EM                                   (rule 20)
	EM -> EM . '*' EM                                   (rule 21)
	EM -> EM . '/' EM                                   (rule 22)
	EM -> EM . '^' EM                                   (rule 23)

	'+'            shift, and enter state 40
	'-'            shift, and enter state 41
	'*'            shift, and enter state 42
	'/'            shift, and enter state 43
	'^'            shift, and enter state 44
	';'            reduce using rule 11
	"endfor"       reduce using rule 11
	%eof           reduce using rule 11


State 48

	INSTR -> identificador '(' identificador . ')' '=' EM    (rule 10)

	')'            shift, and enter state 49


State 49

	INSTR -> identificador '(' identificador ')' . '=' EM    (rule 10)

	'='            shift, and enter state 111


State 50

	INSTR -> "push_back" '(' identificador ',' . EM ')'    (rule 16)

	'-'            shift, and enter state 15
	int            shift, and enter state 16
	real           shift, and enter state 17
	constmat       shift, and enter state 18
	funcion        shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	"range"        shift, and enter state 22
	"if"           shift, and enter state 23
	identificador  shift, and enter state 24

	EM             goto state 110

State 51

	EM -> EM . '+' EM                                   (rule 19)
	EM -> EM . '-' EM                                   (rule 20)
	EM -> EM . '*' EM                                   (rule 21)
	EM -> EM . '/' EM                                   (rule 22)
	EM -> EM . '^' EM                                   (rule 23)
	EG -> EM .                                          (rule 69)

	'+'            shift, and enter state 40
	'-'            shift, and enter state 41
	'*'            shift, and enter state 42
	'/'            shift, and enter state 43
	'^'            shift, and enter state 44
	';'            reduce using rule 69
	"with"         reduce using rule 69
	"endfor"       reduce using rule 69
	%eof           reduce using rule 69


State 52

	INSTR -> "plot" EM ',' EG . "with" '[' ']'          (rule 12)
	INSTR -> "plot" EM ',' EG . "with" '[' SECUENCIA_ESTILO ']'    (rule 13)
	INSTR -> "plot" EM ',' EG . "with" estilo           (rule 14)
	INSTR -> "plot" EM ',' EG .                         (rule 15)

	';'            reduce using rule 15
	"with"         shift, and enter state 109
	"endfor"       reduce using rule 15
	%eof           reduce using rule 15


State 53

	EG -> archivo .                                     (rule 70)

	';'            reduce using rule 70
	"with"         reduce using rule 70
	"endfor"       reduce using rule 70
	%eof           reduce using rule 70


State 54

	EM -> EM . '+' EM                                   (rule 19)
	EM -> EM . '-' EM                                   (rule 20)
	EM -> EM . '*' EM                                   (rule 21)
	EM -> EM . '/' EM                                   (rule 22)
	EM -> EM . '^' EM                                   (rule 23)
	EM -> EM '^' EM .                                   (rule 23)

	'+'            reduce using rule 23
	'-'            reduce using rule 23
	'*'            reduce using rule 23
	'/'            reduce using rule 23
	'^'            shift, and enter state 44
	')'            reduce using rule 23
	']'            reduce using rule 23
	','            reduce using rule 23
	"for"          reduce using rule 23
	';'            reduce using rule 23
	"with"         reduce using rule 23
	"plot"         reduce using rule 23
	"endfor"       reduce using rule 23
	"step"         reduce using rule 23
	"push_back"    reduce using rule 23
	identificador  reduce using rule 23
	%eof           reduce using rule 23


State 55

	EM -> EM . '+' EM                                   (rule 19)
	EM -> EM . '-' EM                                   (rule 20)
	EM -> EM . '*' EM                                   (rule 21)
	EM -> EM . '/' EM                                   (rule 22)
	EM -> EM '/' EM .                                   (rule 22)
	EM -> EM . '^' EM                                   (rule 23)

	'+'            reduce using rule 22
	'-'            reduce using rule 22
	'*'            reduce using rule 22
	'/'            reduce using rule 22
	'^'            shift, and enter state 44
	')'            reduce using rule 22
	']'            reduce using rule 22
	','            reduce using rule 22
	"for"          reduce using rule 22
	';'            reduce using rule 22
	"with"         reduce using rule 22
	"plot"         reduce using rule 22
	"endfor"       reduce using rule 22
	"step"         reduce using rule 22
	"push_back"    reduce using rule 22
	identificador  reduce using rule 22
	%eof           reduce using rule 22


State 56

	EM -> EM . '+' EM                                   (rule 19)
	EM -> EM . '-' EM                                   (rule 20)
	EM -> EM . '*' EM                                   (rule 21)
	EM -> EM '*' EM .                                   (rule 21)
	EM -> EM . '/' EM                                   (rule 22)
	EM -> EM . '^' EM                                   (rule 23)

	'+'            reduce using rule 21
	'-'            reduce using rule 21
	'*'            reduce using rule 21
	'/'            reduce using rule 21
	'^'            shift, and enter state 44
	')'            reduce using rule 21
	']'            reduce using rule 21
	','            reduce using rule 21
	"for"          reduce using rule 21
	';'            reduce using rule 21
	"with"         reduce using rule 21
	"plot"         reduce using rule 21
	"endfor"       reduce using rule 21
	"step"         reduce using rule 21
	"push_back"    reduce using rule 21
	identificador  reduce using rule 21
	%eof           reduce using rule 21


State 57

	EM -> EM . '+' EM                                   (rule 19)
	EM -> EM . '-' EM                                   (rule 20)
	EM -> EM '-' EM .                                   (rule 20)
	EM -> EM . '*' EM                                   (rule 21)
	EM -> EM . '/' EM                                   (rule 22)
	EM -> EM . '^' EM                                   (rule 23)

	'+'            reduce using rule 20
	'-'            reduce using rule 20
	'*'            shift, and enter state 42
	'/'            shift, and enter state 43
	'^'            shift, and enter state 44
	')'            reduce using rule 20
	']'            reduce using rule 20
	','            reduce using rule 20
	"for"          reduce using rule 20
	';'            reduce using rule 20
	"with"         reduce using rule 20
	"plot"         reduce using rule 20
	"endfor"       reduce using rule 20
	"step"         reduce using rule 20
	"push_back"    reduce using rule 20
	identificador  reduce using rule 20
	%eof           reduce using rule 20


State 58

	EM -> EM . '+' EM                                   (rule 19)
	EM -> EM '+' EM .                                   (rule 19)
	EM -> EM . '-' EM                                   (rule 20)
	EM -> EM . '*' EM                                   (rule 21)
	EM -> EM . '/' EM                                   (rule 22)
	EM -> EM . '^' EM                                   (rule 23)

	'+'            reduce using rule 19
	'-'            reduce using rule 19
	'*'            shift, and enter state 42
	'/'            shift, and enter state 43
	'^'            shift, and enter state 44
	')'            reduce using rule 19
	']'            reduce using rule 19
	','            reduce using rule 19
	"for"          reduce using rule 19
	';'            reduce using rule 19
	"with"         reduce using rule 19
	"plot"         reduce using rule 19
	"endfor"       reduce using rule 19
	"step"         reduce using rule 19
	"push_back"    reduce using rule 19
	identificador  reduce using rule 19
	%eof           reduce using rule 19


State 59

	EM -> EM . '+' EM                                   (rule 19)
	EM -> EM . '-' EM                                   (rule 20)
	EM -> EM . '*' EM                                   (rule 21)
	EM -> EM . '/' EM                                   (rule 22)
	EM -> EM . '^' EM                                   (rule 23)
	EM -> funcion '(' EM . ')'                          (rule 29)

	'+'            shift, and enter state 40
	'-'            shift, and enter state 41
	'*'            shift, and enter state 42
	'/'            shift, and enter state 43
	'^'            shift, and enter state 44
	')'            shift, and enter state 108


State 60

	EM -> '(' EM ')' .                                  (rule 25)

	'+'            reduce using rule 25
	'-'            reduce using rule 25
	'*'            reduce using rule 25
	'/'            reduce using rule 25
	'^'            reduce using rule 25
	')'            reduce using rule 25
	']'            reduce using rule 25
	','            reduce using rule 25
	"for"          reduce using rule 25
	';'            reduce using rule 25
	"with"         reduce using rule 25
	"plot"         reduce using rule 25
	"endfor"       reduce using rule 25
	"step"         reduce using rule 25
	"push_back"    reduce using rule 25
	identificador  reduce using rule 25
	%eof           reduce using rule 25


State 61

	EM -> '[' SECUENCIA_EM ']' .                        (rule 33)

	'+'            reduce using rule 33
	'-'            reduce using rule 33
	'*'            reduce using rule 33
	'/'            reduce using rule 33
	'^'            reduce using rule 33
	')'            reduce using rule 33
	']'            reduce using rule 33
	','            reduce using rule 33
	"for"          reduce using rule 33
	';'            reduce using rule 33
	"with"         reduce using rule 33
	"plot"         reduce using rule 33
	"endfor"       reduce using rule 33
	"step"         reduce using rule 33
	"push_back"    reduce using rule 33
	identificador  reduce using rule 33
	%eof           reduce using rule 33


State 62

	SECUENCIA_EM -> SECUENCIA_EM ',' . EM               (rule 38)

	'-'            shift, and enter state 15
	int            shift, and enter state 16
	real           shift, and enter state 17
	constmat       shift, and enter state 18
	funcion        shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	"range"        shift, and enter state 22
	"if"           shift, and enter state 23
	identificador  shift, and enter state 24

	EM             goto state 107

State 63

	EM -> '[' EM "for" . identificador "in" EM ']'      (rule 35)

	identificador  shift, and enter state 106


State 64

	EM -> EM . '+' EM                                   (rule 19)
	EM -> EM . '-' EM                                   (rule 20)
	EM -> EM . '*' EM                                   (rule 21)
	EM -> EM . '/' EM                                   (rule 22)
	EM -> EM . '^' EM                                   (rule 23)
	EM -> "range" '(' EM . ',' EM ')'                   (rule 34)

	'+'            shift, and enter state 40
	'-'            shift, and enter state 41
	'*'            shift, and enter state 42
	'/'            shift, and enter state 43
	'^'            shift, and enter state 44
	','            shift, and enter state 105


State 65

	EM -> "if" '(' COND . ',' EM ',' EM ')'             (rule 36)
	COND -> COND . '+' COND                             (rule 43)
	COND -> COND . '-' COND                             (rule 44)
	COND -> COND . '*' COND                             (rule 45)
	COND -> COND . '/' COND                             (rule 46)
	COND -> COND . '^' COND                             (rule 47)
	COND -> COND . "AND" COND                           (rule 61)
	COND -> COND . "OR" COND                            (rule 62)
	COND -> COND . '>' COND                             (rule 64)
	COND -> COND . '<' COND                             (rule 65)
	COND -> COND . "<=" COND                            (rule 66)
	COND -> COND . ">=" COND                            (rule 67)
	COND -> COND . "==" COND                            (rule 68)

	'+'            shift, and enter state 92
	'-'            shift, and enter state 93
	'*'            shift, and enter state 94
	'/'            shift, and enter state 95
	'^'            shift, and enter state 96
	','            shift, and enter state 97
	"AND"          shift, and enter state 98
	"OR"           shift, and enter state 99
	'<'            shift, and enter state 100
	'>'            shift, and enter state 101
	">="           shift, and enter state 102
	"<="           shift, and enter state 103
	"=="           shift, and enter state 104


State 66

	COND -> '-' . COND                                  (rule 48)

	'-'            shift, and enter state 66
	int            shift, and enter state 67
	real           shift, and enter state 68
	constmat       shift, and enter state 69
	funcion        shift, and enter state 70
	'('            shift, and enter state 71
	'['            shift, and enter state 72
	"range"        shift, and enter state 73
	"if"           shift, and enter state 74
	"NOT"          shift, and enter state 75
	identificador  shift, and enter state 76

	COND           goto state 91

State 67

	COND -> int .                                       (rule 50)

	'+'            reduce using rule 50
	'-'            reduce using rule 50
	'*'            reduce using rule 50
	'/'            reduce using rule 50
	'^'            reduce using rule 50
	')'            reduce using rule 50
	']'            reduce using rule 50
	','            reduce using rule 50
	"for"          reduce using rule 50
	"AND"          reduce using rule 50
	"OR"           reduce using rule 50
	'<'            reduce using rule 50
	'>'            reduce using rule 50
	">="           reduce using rule 50
	"<="           reduce using rule 50
	"=="           reduce using rule 50


State 68

	COND -> real .                                      (rule 51)

	'+'            reduce using rule 51
	'-'            reduce using rule 51
	'*'            reduce using rule 51
	'/'            reduce using rule 51
	'^'            reduce using rule 51
	')'            reduce using rule 51
	']'            reduce using rule 51
	','            reduce using rule 51
	"for"          reduce using rule 51
	"AND"          reduce using rule 51
	"OR"           reduce using rule 51
	'<'            reduce using rule 51
	'>'            reduce using rule 51
	">="           reduce using rule 51
	"<="           reduce using rule 51
	"=="           reduce using rule 51


State 69

	COND -> constmat .                                  (rule 52)

	'+'            reduce using rule 52
	'-'            reduce using rule 52
	'*'            reduce using rule 52
	'/'            reduce using rule 52
	'^'            reduce using rule 52
	')'            reduce using rule 52
	']'            reduce using rule 52
	','            reduce using rule 52
	"for"          reduce using rule 52
	"AND"          reduce using rule 52
	"OR"           reduce using rule 52
	'<'            reduce using rule 52
	'>'            reduce using rule 52
	">="           reduce using rule 52
	"<="           reduce using rule 52
	"=="           reduce using rule 52


State 70

	COND -> funcion . '(' COND ')'                      (rule 53)

	'('            shift, and enter state 90


State 71

	COND -> '(' . COND ')'                              (rule 49)

	'-'            shift, and enter state 66
	int            shift, and enter state 67
	real           shift, and enter state 68
	constmat       shift, and enter state 69
	funcion        shift, and enter state 70
	'('            shift, and enter state 71
	'['            shift, and enter state 72
	"range"        shift, and enter state 73
	"if"           shift, and enter state 74
	"NOT"          shift, and enter state 75
	identificador  shift, and enter state 76

	COND           goto state 89

State 72

	COND -> '[' . ']'                                   (rule 56)
	COND -> '[' . SECUENCIA_COND ']'                    (rule 57)
	COND -> '[' . COND "for" identificador "in" COND ']'    (rule 59)

	'-'            shift, and enter state 66
	int            shift, and enter state 67
	real           shift, and enter state 68
	constmat       shift, and enter state 69
	funcion        shift, and enter state 70
	'('            shift, and enter state 71
	'['            shift, and enter state 72
	']'            shift, and enter state 88
	"range"        shift, and enter state 73
	"if"           shift, and enter state 74
	"NOT"          shift, and enter state 75
	identificador  shift, and enter state 76

	SECUENCIA_COND goto state 86
	COND           goto state 87

State 73

	COND -> "range" . '(' COND ',' COND ')'             (rule 58)

	'('            shift, and enter state 85


State 74

	COND -> "if" . '(' COND ',' COND ',' COND ')'       (rule 60)

	'('            shift, and enter state 84


State 75

	COND -> "NOT" . COND                                (rule 63)

	'-'            shift, and enter state 66
	int            shift, and enter state 67
	real           shift, and enter state 68
	constmat       shift, and enter state 69
	funcion        shift, and enter state 70
	'('            shift, and enter state 71
	'['            shift, and enter state 72
	"range"        shift, and enter state 73
	"if"           shift, and enter state 74
	"NOT"          shift, and enter state 75
	identificador  shift, and enter state 76

	COND           goto state 83

State 76

	COND -> identificador . '(' COND ')'                (rule 54)
	COND -> identificador .                             (rule 55)

	'+'            reduce using rule 55
	'-'            reduce using rule 55
	'*'            reduce using rule 55
	'/'            reduce using rule 55
	'^'            reduce using rule 55
	'('            shift, and enter state 82
	')'            reduce using rule 55
	']'            reduce using rule 55
	','            reduce using rule 55
	"for"          reduce using rule 55
	"AND"          reduce using rule 55
	"OR"           reduce using rule 55
	'<'            reduce using rule 55
	'>'            reduce using rule 55
	">="           reduce using rule 55
	"<="           reduce using rule 55
	"=="           reduce using rule 55


State 77

	EM -> EM . '+' EM                                   (rule 19)
	EM -> EM . '-' EM                                   (rule 20)
	EM -> EM . '*' EM                                   (rule 21)
	EM -> EM . '/' EM                                   (rule 22)
	EM -> EM . '^' EM                                   (rule 23)
	EM -> identificador '(' EM . ')'                    (rule 30)

	'+'            shift, and enter state 40
	'-'            shift, and enter state 41
	'*'            shift, and enter state 42
	'/'            shift, and enter state 43
	'^'            shift, and enter state 44
	')'            shift, and enter state 81


State 78

	CICLO -> "for" identificador "in" EM . SECUENCIA_1 "endfor"    (rule 17)
	CICLO -> "for" identificador "in" EM . "step" EM SECUENCIA_1 "endfor"    (rule 18)
	EM -> EM . '+' EM                                   (rule 19)
	EM -> EM . '-' EM                                   (rule 20)
	EM -> EM . '*' EM                                   (rule 21)
	EM -> EM . '/' EM                                   (rule 22)
	EM -> EM . '^' EM                                   (rule 23)

	'+'            shift, and enter state 40
	'-'            shift, and enter state 41
	'*'            shift, and enter state 42
	'/'            shift, and enter state 43
	'^'            shift, and enter state 44
	"for"          shift, and enter state 6
	"plot"         shift, and enter state 7
	"step"         shift, and enter state 80
	"push_back"    shift, and enter state 8
	identificador  shift, and enter state 9

	SECUENCIA_1    goto state 79
	SECUENCIA_2    goto state 3
	INSTR          goto state 4
	CICLO          goto state 5

State 79

	CICLO -> "for" identificador "in" EM SECUENCIA_1 . "endfor"    (rule 17)

	"endfor"       shift, and enter state 140


State 80

	CICLO -> "for" identificador "in" EM "step" . EM SECUENCIA_1 "endfor"    (rule 18)

	'-'            shift, and enter state 15
	int            shift, and enter state 16
	real           shift, and enter state 17
	constmat       shift, and enter state 18
	funcion        shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	"range"        shift, and enter state 22
	"if"           shift, and enter state 23
	identificador  shift, and enter state 24

	EM             goto state 139

State 81

	EM -> identificador '(' EM ')' .                    (rule 30)

	'+'            reduce using rule 30
	'-'            reduce using rule 30
	'*'            reduce using rule 30
	'/'            reduce using rule 30
	'^'            reduce using rule 30
	')'            reduce using rule 30
	']'            reduce using rule 30
	','            reduce using rule 30
	"for"          reduce using rule 30
	';'            reduce using rule 30
	"with"         reduce using rule 30
	"plot"         reduce using rule 30
	"endfor"       reduce using rule 30
	"step"         reduce using rule 30
	"push_back"    reduce using rule 30
	identificador  reduce using rule 30
	%eof           reduce using rule 30


State 82

	COND -> identificador '(' . COND ')'                (rule 54)

	'-'            shift, and enter state 66
	int            shift, and enter state 67
	real           shift, and enter state 68
	constmat       shift, and enter state 69
	funcion        shift, and enter state 70
	'('            shift, and enter state 71
	'['            shift, and enter state 72
	"range"        shift, and enter state 73
	"if"           shift, and enter state 74
	"NOT"          shift, and enter state 75
	identificador  shift, and enter state 76

	COND           goto state 138

State 83

	COND -> COND . '+' COND                             (rule 43)
	COND -> COND . '-' COND                             (rule 44)
	COND -> COND . '*' COND                             (rule 45)
	COND -> COND . '/' COND                             (rule 46)
	COND -> COND . '^' COND                             (rule 47)
	COND -> COND . "AND" COND                           (rule 61)
	COND -> COND . "OR" COND                            (rule 62)
	COND -> "NOT" COND .                                (rule 63)
	COND -> COND . '>' COND                             (rule 64)
	COND -> COND . '<' COND                             (rule 65)
	COND -> COND . "<=" COND                            (rule 66)
	COND -> COND . ">=" COND                            (rule 67)
	COND -> COND . "==" COND                            (rule 68)

	'+'            shift, and enter state 92
	'-'            shift, and enter state 93
	'*'            shift, and enter state 94
	'/'            shift, and enter state 95
	'^'            shift, and enter state 96
	')'            reduce using rule 63
	']'            reduce using rule 63
	','            reduce using rule 63
	"for"          reduce using rule 63
	"AND"          reduce using rule 63
	"OR"           reduce using rule 63
	'<'            shift, and enter state 100
	'>'            shift, and enter state 101
	">="           shift, and enter state 102
	"<="           shift, and enter state 103
	"=="           shift, and enter state 104


State 84

	COND -> "if" '(' . COND ',' COND ',' COND ')'       (rule 60)

	'-'            shift, and enter state 66
	int            shift, and enter state 67
	real           shift, and enter state 68
	constmat       shift, and enter state 69
	funcion        shift, and enter state 70
	'('            shift, and enter state 71
	'['            shift, and enter state 72
	"range"        shift, and enter state 73
	"if"           shift, and enter state 74
	"NOT"          shift, and enter state 75
	identificador  shift, and enter state 76

	COND           goto state 137

State 85

	COND -> "range" '(' . COND ',' COND ')'             (rule 58)

	'-'            shift, and enter state 66
	int            shift, and enter state 67
	real           shift, and enter state 68
	constmat       shift, and enter state 69
	funcion        shift, and enter state 70
	'('            shift, and enter state 71
	'['            shift, and enter state 72
	"range"        shift, and enter state 73
	"if"           shift, and enter state 74
	"NOT"          shift, and enter state 75
	identificador  shift, and enter state 76

	COND           goto state 136

State 86

	SECUENCIA_COND -> SECUENCIA_COND . ',' COND         (rule 40)
	COND -> '[' SECUENCIA_COND . ']'                    (rule 57)

	']'            shift, and enter state 134
	','            shift, and enter state 135


State 87

	SECUENCIA_COND -> COND .                            (rule 39)
	COND -> COND . '+' COND                             (rule 43)
	COND -> COND . '-' COND                             (rule 44)
	COND -> COND . '*' COND                             (rule 45)
	COND -> COND . '/' COND                             (rule 46)
	COND -> COND . '^' COND                             (rule 47)
	COND -> '[' COND . "for" identificador "in" COND ']'    (rule 59)
	COND -> COND . "AND" COND                           (rule 61)
	COND -> COND . "OR" COND                            (rule 62)
	COND -> COND . '>' COND                             (rule 64)
	COND -> COND . '<' COND                             (rule 65)
	COND -> COND . "<=" COND                            (rule 66)
	COND -> COND . ">=" COND                            (rule 67)
	COND -> COND . "==" COND                            (rule 68)

	'+'            shift, and enter state 92
	'-'            shift, and enter state 93
	'*'            shift, and enter state 94
	'/'            shift, and enter state 95
	'^'            shift, and enter state 96
	']'            reduce using rule 39
	','            reduce using rule 39
	"for"          shift, and enter state 133
	"AND"          shift, and enter state 98
	"OR"           shift, and enter state 99
	'<'            shift, and enter state 100
	'>'            shift, and enter state 101
	">="           shift, and enter state 102
	"<="           shift, and enter state 103
	"=="           shift, and enter state 104


State 88

	COND -> '[' ']' .                                   (rule 56)

	'+'            reduce using rule 56
	'-'            reduce using rule 56
	'*'            reduce using rule 56
	'/'            reduce using rule 56
	'^'            reduce using rule 56
	')'            reduce using rule 56
	']'            reduce using rule 56
	','            reduce using rule 56
	"for"          reduce using rule 56
	"AND"          reduce using rule 56
	"OR"           reduce using rule 56
	'<'            reduce using rule 56
	'>'            reduce using rule 56
	">="           reduce using rule 56
	"<="           reduce using rule 56
	"=="           reduce using rule 56


State 89

	COND -> COND . '+' COND                             (rule 43)
	COND -> COND . '-' COND                             (rule 44)
	COND -> COND . '*' COND                             (rule 45)
	COND -> COND . '/' COND                             (rule 46)
	COND -> COND . '^' COND                             (rule 47)
	COND -> '(' COND . ')'                              (rule 49)
	COND -> COND . "AND" COND                           (rule 61)
	COND -> COND . "OR" COND                            (rule 62)
	COND -> COND . '>' COND                             (rule 64)
	COND -> COND . '<' COND                             (rule 65)
	COND -> COND . "<=" COND                            (rule 66)
	COND -> COND . ">=" COND                            (rule 67)
	COND -> COND . "==" COND                            (rule 68)

	'+'            shift, and enter state 92
	'-'            shift, and enter state 93
	'*'            shift, and enter state 94
	'/'            shift, and enter state 95
	'^'            shift, and enter state 96
	')'            shift, and enter state 132
	"AND"          shift, and enter state 98
	"OR"           shift, and enter state 99
	'<'            shift, and enter state 100
	'>'            shift, and enter state 101
	">="           shift, and enter state 102
	"<="           shift, and enter state 103
	"=="           shift, and enter state 104


State 90

	COND -> funcion '(' . COND ')'                      (rule 53)

	'-'            shift, and enter state 66
	int            shift, and enter state 67
	real           shift, and enter state 68
	constmat       shift, and enter state 69
	funcion        shift, and enter state 70
	'('            shift, and enter state 71
	'['            shift, and enter state 72
	"range"        shift, and enter state 73
	"if"           shift, and enter state 74
	"NOT"          shift, and enter state 75
	identificador  shift, and enter state 76

	COND           goto state 131

State 91

	COND -> COND . '+' COND                             (rule 43)
	COND -> COND . '-' COND                             (rule 44)
	COND -> COND . '*' COND                             (rule 45)
	COND -> COND . '/' COND                             (rule 46)
	COND -> COND . '^' COND                             (rule 47)
	COND -> '-' COND .                                  (rule 48)
	COND -> COND . "AND" COND                           (rule 61)
	COND -> COND . "OR" COND                            (rule 62)
	COND -> COND . '>' COND                             (rule 64)
	COND -> COND . '<' COND                             (rule 65)
	COND -> COND . "<=" COND                            (rule 66)
	COND -> COND . ">=" COND                            (rule 67)
	COND -> COND . "==" COND                            (rule 68)

	'+'            reduce using rule 48
	'-'            reduce using rule 48
	'*'            reduce using rule 48
	'/'            reduce using rule 48
	'^'            shift, and enter state 96
	')'            reduce using rule 48
	']'            reduce using rule 48
	','            reduce using rule 48
	"for"          reduce using rule 48
	"AND"          reduce using rule 48
	"OR"           reduce using rule 48
	'<'            reduce using rule 48
	'>'            reduce using rule 48
	">="           reduce using rule 48
	"<="           reduce using rule 48
	"=="           reduce using rule 48


State 92

	COND -> COND '+' . COND                             (rule 43)

	'-'            shift, and enter state 66
	int            shift, and enter state 67
	real           shift, and enter state 68
	constmat       shift, and enter state 69
	funcion        shift, and enter state 70
	'('            shift, and enter state 71
	'['            shift, and enter state 72
	"range"        shift, and enter state 73
	"if"           shift, and enter state 74
	"NOT"          shift, and enter state 75
	identificador  shift, and enter state 76

	COND           goto state 130

State 93

	COND -> COND '-' . COND                             (rule 44)

	'-'            shift, and enter state 66
	int            shift, and enter state 67
	real           shift, and enter state 68
	constmat       shift, and enter state 69
	funcion        shift, and enter state 70
	'('            shift, and enter state 71
	'['            shift, and enter state 72
	"range"        shift, and enter state 73
	"if"           shift, and enter state 74
	"NOT"          shift, and enter state 75
	identificador  shift, and enter state 76

	COND           goto state 129

State 94

	COND -> COND '*' . COND                             (rule 45)

	'-'            shift, and enter state 66
	int            shift, and enter state 67
	real           shift, and enter state 68
	constmat       shift, and enter state 69
	funcion        shift, and enter state 70
	'('            shift, and enter state 71
	'['            shift, and enter state 72
	"range"        shift, and enter state 73
	"if"           shift, and enter state 74
	"NOT"          shift, and enter state 75
	identificador  shift, and enter state 76

	COND           goto state 128

State 95

	COND -> COND '/' . COND                             (rule 46)

	'-'            shift, and enter state 66
	int            shift, and enter state 67
	real           shift, and enter state 68
	constmat       shift, and enter state 69
	funcion        shift, and enter state 70
	'('            shift, and enter state 71
	'['            shift, and enter state 72
	"range"        shift, and enter state 73
	"if"           shift, and enter state 74
	"NOT"          shift, and enter state 75
	identificador  shift, and enter state 76

	COND           goto state 127

State 96

	COND -> COND '^' . COND                             (rule 47)

	'-'            shift, and enter state 66
	int            shift, and enter state 67
	real           shift, and enter state 68
	constmat       shift, and enter state 69
	funcion        shift, and enter state 70
	'('            shift, and enter state 71
	'['            shift, and enter state 72
	"range"        shift, and enter state 73
	"if"           shift, and enter state 74
	"NOT"          shift, and enter state 75
	identificador  shift, and enter state 76

	COND           goto state 126

State 97

	EM -> "if" '(' COND ',' . EM ',' EM ')'             (rule 36)

	'-'            shift, and enter state 15
	int            shift, and enter state 16
	real           shift, and enter state 17
	constmat       shift, and enter state 18
	funcion        shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	"range"        shift, and enter state 22
	"if"           shift, and enter state 23
	identificador  shift, and enter state 24

	EM             goto state 125

State 98

	COND -> COND "AND" . COND                           (rule 61)

	'-'            shift, and enter state 66
	int            shift, and enter state 67
	real           shift, and enter state 68
	constmat       shift, and enter state 69
	funcion        shift, and enter state 70
	'('            shift, and enter state 71
	'['            shift, and enter state 72
	"range"        shift, and enter state 73
	"if"           shift, and enter state 74
	"NOT"          shift, and enter state 75
	identificador  shift, and enter state 76

	COND           goto state 124

State 99

	COND -> COND "OR" . COND                            (rule 62)

	'-'            shift, and enter state 66
	int            shift, and enter state 67
	real           shift, and enter state 68
	constmat       shift, and enter state 69
	funcion        shift, and enter state 70
	'('            shift, and enter state 71
	'['            shift, and enter state 72
	"range"        shift, and enter state 73
	"if"           shift, and enter state 74
	"NOT"          shift, and enter state 75
	identificador  shift, and enter state 76

	COND           goto state 123

State 100

	COND -> COND '<' . COND                             (rule 65)

	'-'            shift, and enter state 66
	int            shift, and enter state 67
	real           shift, and enter state 68
	constmat       shift, and enter state 69
	funcion        shift, and enter state 70
	'('            shift, and enter state 71
	'['            shift, and enter state 72
	"range"        shift, and enter state 73
	"if"           shift, and enter state 74
	"NOT"          shift, and enter state 75
	identificador  shift, and enter state 76

	COND           goto state 122

State 101

	COND -> COND '>' . COND                             (rule 64)

	'-'            shift, and enter state 66
	int            shift, and enter state 67
	real           shift, and enter state 68
	constmat       shift, and enter state 69
	funcion        shift, and enter state 70
	'('            shift, and enter state 71
	'['            shift, and enter state 72
	"range"        shift, and enter state 73
	"if"           shift, and enter state 74
	"NOT"          shift, and enter state 75
	identificador  shift, and enter state 76

	COND           goto state 121

State 102

	COND -> COND ">=" . COND                            (rule 67)

	'-'            shift, and enter state 66
	int            shift, and enter state 67
	real           shift, and enter state 68
	constmat       shift, and enter state 69
	funcion        shift, and enter state 70
	'('            shift, and enter state 71
	'['            shift, and enter state 72
	"range"        shift, and enter state 73
	"if"           shift, and enter state 74
	"NOT"          shift, and enter state 75
	identificador  shift, and enter state 76

	COND           goto state 120

State 103

	COND -> COND "<=" . COND                            (rule 66)

	'-'            shift, and enter state 66
	int            shift, and enter state 67
	real           shift, and enter state 68
	constmat       shift, and enter state 69
	funcion        shift, and enter state 70
	'('            shift, and enter state 71
	'['            shift, and enter state 72
	"range"        shift, and enter state 73
	"if"           shift, and enter state 74
	"NOT"          shift, and enter state 75
	identificador  shift, and enter state 76

	COND           goto state 119

State 104

	COND -> COND "==" . COND                            (rule 68)

	'-'            shift, and enter state 66
	int            shift, and enter state 67
	real           shift, and enter state 68
	constmat       shift, and enter state 69
	funcion        shift, and enter state 70
	'('            shift, and enter state 71
	'['            shift, and enter state 72
	"range"        shift, and enter state 73
	"if"           shift, and enter state 74
	"NOT"          shift, and enter state 75
	identificador  shift, and enter state 76

	COND           goto state 118

State 105

	EM -> "range" '(' EM ',' . EM ')'                   (rule 34)

	'-'            shift, and enter state 15
	int            shift, and enter state 16
	real           shift, and enter state 17
	constmat       shift, and enter state 18
	funcion        shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	"range"        shift, and enter state 22
	"if"           shift, and enter state 23
	identificador  shift, and enter state 24

	EM             goto state 117

State 106

	EM -> '[' EM "for" identificador . "in" EM ']'      (rule 35)

	"in"           shift, and enter state 116


State 107

	EM -> EM . '+' EM                                   (rule 19)
	EM -> EM . '-' EM                                   (rule 20)
	EM -> EM . '*' EM                                   (rule 21)
	EM -> EM . '/' EM                                   (rule 22)
	EM -> EM . '^' EM                                   (rule 23)
	SECUENCIA_EM -> SECUENCIA_EM ',' EM .               (rule 38)

	'+'            shift, and enter state 40
	'-'            shift, and enter state 41
	'*'            shift, and enter state 42
	'/'            shift, and enter state 43
	'^'            shift, and enter state 44
	']'            reduce using rule 38
	','            reduce using rule 38


State 108

	EM -> funcion '(' EM ')' .                          (rule 29)

	'+'            reduce using rule 29
	'-'            reduce using rule 29
	'*'            reduce using rule 29
	'/'            reduce using rule 29
	'^'            reduce using rule 29
	')'            reduce using rule 29
	']'            reduce using rule 29
	','            reduce using rule 29
	"for"          reduce using rule 29
	';'            reduce using rule 29
	"with"         reduce using rule 29
	"plot"         reduce using rule 29
	"endfor"       reduce using rule 29
	"step"         reduce using rule 29
	"push_back"    reduce using rule 29
	identificador  reduce using rule 29
	%eof           reduce using rule 29


State 109

	INSTR -> "plot" EM ',' EG "with" . '[' ']'          (rule 12)
	INSTR -> "plot" EM ',' EG "with" . '[' SECUENCIA_ESTILO ']'    (rule 13)
	INSTR -> "plot" EM ',' EG "with" . estilo           (rule 14)

	'['            shift, and enter state 114
	estilo         shift, and enter state 115


State 110

	INSTR -> "push_back" '(' identificador ',' EM . ')'    (rule 16)
	EM -> EM . '+' EM                                   (rule 19)
	EM -> EM . '-' EM                                   (rule 20)
	EM -> EM . '*' EM                                   (rule 21)
	EM -> EM . '/' EM                                   (rule 22)
	EM -> EM . '^' EM                                   (rule 23)

	'+'            shift, and enter state 40
	'-'            shift, and enter state 41
	'*'            shift, and enter state 42
	'/'            shift, and enter state 43
	'^'            shift, and enter state 44
	')'            shift, and enter state 113


State 111

	INSTR -> identificador '(' identificador ')' '=' . EM    (rule 10)

	'-'            shift, and enter state 15
	int            shift, and enter state 16
	real           shift, and enter state 17
	constmat       shift, and enter state 18
	funcion        shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	"range"        shift, and enter state 22
	"if"           shift, and enter state 23
	identificador  shift, and enter state 24

	EM             goto state 112

State 112

	INSTR -> identificador '(' identificador ')' '=' EM .    (rule 10)
	EM -> EM . '+' EM                                   (rule 19)
	EM -> EM . '-' EM                                   (rule 20)
	EM -> EM . '*' EM                                   (rule 21)
	EM -> EM . '/' EM                                   (rule 22)
	EM -> EM . '^' EM                                   (rule 23)

	'+'            shift, and enter state 40
	'-'            shift, and enter state 41
	'*'            shift, and enter state 42
	'/'            shift, and enter state 43
	'^'            shift, and enter state 44
	';'            reduce using rule 10
	"endfor"       reduce using rule 10
	%eof           reduce using rule 10


State 113

	INSTR -> "push_back" '(' identificador ',' EM ')' .    (rule 16)

	';'            reduce using rule 16
	"endfor"       reduce using rule 16
	%eof           reduce using rule 16


State 114

	INSTR -> "plot" EM ',' EG "with" '[' . ']'          (rule 12)
	INSTR -> "plot" EM ',' EG "with" '[' . SECUENCIA_ESTILO ']'    (rule 13)

	']'            shift, and enter state 152
	estilo         shift, and enter state 153

	SECUENCIA_ESTILOgoto state 151

State 115

	INSTR -> "plot" EM ',' EG "with" estilo .           (rule 14)

	';'            reduce using rule 14
	"endfor"       reduce using rule 14
	%eof           reduce using rule 14


State 116

	EM -> '[' EM "for" identificador "in" . EM ']'      (rule 35)

	'-'            shift, and enter state 15
	int            shift, and enter state 16
	real           shift, and enter state 17
	constmat       shift, and enter state 18
	funcion        shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	"range"        shift, and enter state 22
	"if"           shift, and enter state 23
	identificador  shift, and enter state 24

	EM             goto state 150

State 117

	EM -> EM . '+' EM                                   (rule 19)
	EM -> EM . '-' EM                                   (rule 20)
	EM -> EM . '*' EM                                   (rule 21)
	EM -> EM . '/' EM                                   (rule 22)
	EM -> EM . '^' EM                                   (rule 23)
	EM -> "range" '(' EM ',' EM . ')'                   (rule 34)

	'+'            shift, and enter state 40
	'-'            shift, and enter state 41
	'*'            shift, and enter state 42
	'/'            shift, and enter state 43
	'^'            shift, and enter state 44
	')'            shift, and enter state 149


State 118

	COND -> COND . '+' COND                             (rule 43)
	COND -> COND . '-' COND                             (rule 44)
	COND -> COND . '*' COND                             (rule 45)
	COND -> COND . '/' COND                             (rule 46)
	COND -> COND . '^' COND                             (rule 47)
	COND -> COND . "AND" COND                           (rule 61)
	COND -> COND . "OR" COND                            (rule 62)
	COND -> COND . '>' COND                             (rule 64)
	COND -> COND . '<' COND                             (rule 65)
	COND -> COND . "<=" COND                            (rule 66)
	COND -> COND . ">=" COND                            (rule 67)
	COND -> COND . "==" COND                            (rule 68)
	COND -> COND "==" COND .                            (rule 68)

	'+'            shift, and enter state 92
	'-'            shift, and enter state 93
	'*'            shift, and enter state 94
	'/'            shift, and enter state 95
	'^'            shift, and enter state 96
	')'            reduce using rule 68
	']'            reduce using rule 68
	','            reduce using rule 68
	"for"          reduce using rule 68
	"AND"          reduce using rule 68
	"OR"           reduce using rule 68
	'<'            reduce using rule 68
	'>'            reduce using rule 68
	">="           reduce using rule 68
	"<="           reduce using rule 68
	"=="           reduce using rule 68


State 119

	COND -> COND . '+' COND                             (rule 43)
	COND -> COND . '-' COND                             (rule 44)
	COND -> COND . '*' COND                             (rule 45)
	COND -> COND . '/' COND                             (rule 46)
	COND -> COND . '^' COND                             (rule 47)
	COND -> COND . "AND" COND                           (rule 61)
	COND -> COND . "OR" COND                            (rule 62)
	COND -> COND . '>' COND                             (rule 64)
	COND -> COND . '<' COND                             (rule 65)
	COND -> COND . "<=" COND                            (rule 66)
	COND -> COND "<=" COND .                            (rule 66)
	COND -> COND . ">=" COND                            (rule 67)
	COND -> COND . "==" COND                            (rule 68)

	'+'            shift, and enter state 92
	'-'            shift, and enter state 93
	'*'            shift, and enter state 94
	'/'            shift, and enter state 95
	'^'            shift, and enter state 96
	')'            reduce using rule 66
	']'            reduce using rule 66
	','            reduce using rule 66
	"for"          reduce using rule 66
	"AND"          reduce using rule 66
	"OR"           reduce using rule 66
	'<'            reduce using rule 66
	'>'            reduce using rule 66
	">="           reduce using rule 66
	"<="           reduce using rule 66
	"=="           reduce using rule 66


State 120

	COND -> COND . '+' COND                             (rule 43)
	COND -> COND . '-' COND                             (rule 44)
	COND -> COND . '*' COND                             (rule 45)
	COND -> COND . '/' COND                             (rule 46)
	COND -> COND . '^' COND                             (rule 47)
	COND -> COND . "AND" COND                           (rule 61)
	COND -> COND . "OR" COND                            (rule 62)
	COND -> COND . '>' COND                             (rule 64)
	COND -> COND . '<' COND                             (rule 65)
	COND -> COND . "<=" COND                            (rule 66)
	COND -> COND . ">=" COND                            (rule 67)
	COND -> COND ">=" COND .                            (rule 67)
	COND -> COND . "==" COND                            (rule 68)

	'+'            shift, and enter state 92
	'-'            shift, and enter state 93
	'*'            shift, and enter state 94
	'/'            shift, and enter state 95
	'^'            shift, and enter state 96
	')'            reduce using rule 67
	']'            reduce using rule 67
	','            reduce using rule 67
	"for"          reduce using rule 67
	"AND"          reduce using rule 67
	"OR"           reduce using rule 67
	'<'            reduce using rule 67
	'>'            reduce using rule 67
	">="           reduce using rule 67
	"<="           reduce using rule 67
	"=="           reduce using rule 67


State 121

	COND -> COND . '+' COND                             (rule 43)
	COND -> COND . '-' COND                             (rule 44)
	COND -> COND . '*' COND                             (rule 45)
	COND -> COND . '/' COND                             (rule 46)
	COND -> COND . '^' COND                             (rule 47)
	COND -> COND . "AND" COND                           (rule 61)
	COND -> COND . "OR" COND                            (rule 62)
	COND -> COND . '>' COND                             (rule 64)
	COND -> COND '>' COND .                             (rule 64)
	COND -> COND . '<' COND                             (rule 65)
	COND -> COND . "<=" COND                            (rule 66)
	COND -> COND . ">=" COND                            (rule 67)
	COND -> COND . "==" COND                            (rule 68)

	'+'            shift, and enter state 92
	'-'            shift, and enter state 93
	'*'            shift, and enter state 94
	'/'            shift, and enter state 95
	'^'            shift, and enter state 96
	')'            reduce using rule 64
	']'            reduce using rule 64
	','            reduce using rule 64
	"for"          reduce using rule 64
	"AND"          reduce using rule 64
	"OR"           reduce using rule 64
	'<'            reduce using rule 64
	'>'            reduce using rule 64
	">="           reduce using rule 64
	"<="           reduce using rule 64
	"=="           reduce using rule 64


State 122

	COND -> COND . '+' COND                             (rule 43)
	COND -> COND . '-' COND                             (rule 44)
	COND -> COND . '*' COND                             (rule 45)
	COND -> COND . '/' COND                             (rule 46)
	COND -> COND . '^' COND                             (rule 47)
	COND -> COND . "AND" COND                           (rule 61)
	COND -> COND . "OR" COND                            (rule 62)
	COND -> COND . '>' COND                             (rule 64)
	COND -> COND . '<' COND                             (rule 65)
	COND -> COND '<' COND .                             (rule 65)
	COND -> COND . "<=" COND                            (rule 66)
	COND -> COND . ">=" COND                            (rule 67)
	COND -> COND . "==" COND                            (rule 68)

	'+'            shift, and enter state 92
	'-'            shift, and enter state 93
	'*'            shift, and enter state 94
	'/'            shift, and enter state 95
	'^'            shift, and enter state 96
	')'            reduce using rule 65
	']'            reduce using rule 65
	','            reduce using rule 65
	"for"          reduce using rule 65
	"AND"          reduce using rule 65
	"OR"           reduce using rule 65
	'<'            reduce using rule 65
	'>'            reduce using rule 65
	">="           reduce using rule 65
	"<="           reduce using rule 65
	"=="           reduce using rule 65


State 123

	COND -> COND . '+' COND                             (rule 43)
	COND -> COND . '-' COND                             (rule 44)
	COND -> COND . '*' COND                             (rule 45)
	COND -> COND . '/' COND                             (rule 46)
	COND -> COND . '^' COND                             (rule 47)
	COND -> COND . "AND" COND                           (rule 61)
	COND -> COND . "OR" COND                            (rule 62)
	COND -> COND "OR" COND .                            (rule 62)
	COND -> COND . '>' COND                             (rule 64)
	COND -> COND . '<' COND                             (rule 65)
	COND -> COND . "<=" COND                            (rule 66)
	COND -> COND . ">=" COND                            (rule 67)
	COND -> COND . "==" COND                            (rule 68)

	'+'            shift, and enter state 92
	'-'            shift, and enter state 93
	'*'            shift, and enter state 94
	'/'            shift, and enter state 95
	'^'            shift, and enter state 96
	')'            reduce using rule 62
	']'            reduce using rule 62
	','            reduce using rule 62
	"for"          reduce using rule 62
	"AND"          shift, and enter state 98
	"OR"           reduce using rule 62
	'<'            shift, and enter state 100
	'>'            shift, and enter state 101
	">="           shift, and enter state 102
	"<="           shift, and enter state 103
	"=="           shift, and enter state 104


State 124

	COND -> COND . '+' COND                             (rule 43)
	COND -> COND . '-' COND                             (rule 44)
	COND -> COND . '*' COND                             (rule 45)
	COND -> COND . '/' COND                             (rule 46)
	COND -> COND . '^' COND                             (rule 47)
	COND -> COND . "AND" COND                           (rule 61)
	COND -> COND "AND" COND .                           (rule 61)
	COND -> COND . "OR" COND                            (rule 62)
	COND -> COND . '>' COND                             (rule 64)
	COND -> COND . '<' COND                             (rule 65)
	COND -> COND . "<=" COND                            (rule 66)
	COND -> COND . ">=" COND                            (rule 67)
	COND -> COND . "==" COND                            (rule 68)

	'+'            shift, and enter state 92
	'-'            shift, and enter state 93
	'*'            shift, and enter state 94
	'/'            shift, and enter state 95
	'^'            shift, and enter state 96
	')'            reduce using rule 61
	']'            reduce using rule 61
	','            reduce using rule 61
	"for"          reduce using rule 61
	"AND"          reduce using rule 61
	"OR"           reduce using rule 61
	'<'            shift, and enter state 100
	'>'            shift, and enter state 101
	">="           shift, and enter state 102
	"<="           shift, and enter state 103
	"=="           shift, and enter state 104


State 125

	EM -> EM . '+' EM                                   (rule 19)
	EM -> EM . '-' EM                                   (rule 20)
	EM -> EM . '*' EM                                   (rule 21)
	EM -> EM . '/' EM                                   (rule 22)
	EM -> EM . '^' EM                                   (rule 23)
	EM -> "if" '(' COND ',' EM . ',' EM ')'             (rule 36)

	'+'            shift, and enter state 40
	'-'            shift, and enter state 41
	'*'            shift, and enter state 42
	'/'            shift, and enter state 43
	'^'            shift, and enter state 44
	','            shift, and enter state 148


State 126

	COND -> COND . '+' COND                             (rule 43)
	COND -> COND . '-' COND                             (rule 44)
	COND -> COND . '*' COND                             (rule 45)
	COND -> COND . '/' COND                             (rule 46)
	COND -> COND . '^' COND                             (rule 47)
	COND -> COND '^' COND .                             (rule 47)
	COND -> COND . "AND" COND                           (rule 61)
	COND -> COND . "OR" COND                            (rule 62)
	COND -> COND . '>' COND                             (rule 64)
	COND -> COND . '<' COND                             (rule 65)
	COND -> COND . "<=" COND                            (rule 66)
	COND -> COND . ">=" COND                            (rule 67)
	COND -> COND . "==" COND                            (rule 68)

	'+'            reduce using rule 47
	'-'            reduce using rule 47
	'*'            reduce using rule 47
	'/'            reduce using rule 47
	'^'            shift, and enter state 96
	')'            reduce using rule 47
	']'            reduce using rule 47
	','            reduce using rule 47
	"for"          reduce using rule 47
	"AND"          reduce using rule 47
	"OR"           reduce using rule 47
	'<'            reduce using rule 47
	'>'            reduce using rule 47
	">="           reduce using rule 47
	"<="           reduce using rule 47
	"=="           reduce using rule 47


State 127

	COND -> COND . '+' COND                             (rule 43)
	COND -> COND . '-' COND                             (rule 44)
	COND -> COND . '*' COND                             (rule 45)
	COND -> COND . '/' COND                             (rule 46)
	COND -> COND '/' COND .                             (rule 46)
	COND -> COND . '^' COND                             (rule 47)
	COND -> COND . "AND" COND                           (rule 61)
	COND -> COND . "OR" COND                            (rule 62)
	COND -> COND . '>' COND                             (rule 64)
	COND -> COND . '<' COND                             (rule 65)
	COND -> COND . "<=" COND                            (rule 66)
	COND -> COND . ">=" COND                            (rule 67)
	COND -> COND . "==" COND                            (rule 68)

	'+'            reduce using rule 46
	'-'            reduce using rule 46
	'*'            reduce using rule 46
	'/'            reduce using rule 46
	'^'            shift, and enter state 96
	')'            reduce using rule 46
	']'            reduce using rule 46
	','            reduce using rule 46
	"for"          reduce using rule 46
	"AND"          reduce using rule 46
	"OR"           reduce using rule 46
	'<'            reduce using rule 46
	'>'            reduce using rule 46
	">="           reduce using rule 46
	"<="           reduce using rule 46
	"=="           reduce using rule 46


State 128

	COND -> COND . '+' COND                             (rule 43)
	COND -> COND . '-' COND                             (rule 44)
	COND -> COND . '*' COND                             (rule 45)
	COND -> COND '*' COND .                             (rule 45)
	COND -> COND . '/' COND                             (rule 46)
	COND -> COND . '^' COND                             (rule 47)
	COND -> COND . "AND" COND                           (rule 61)
	COND -> COND . "OR" COND                            (rule 62)
	COND -> COND . '>' COND                             (rule 64)
	COND -> COND . '<' COND                             (rule 65)
	COND -> COND . "<=" COND                            (rule 66)
	COND -> COND . ">=" COND                            (rule 67)
	COND -> COND . "==" COND                            (rule 68)

	'+'            reduce using rule 45
	'-'            reduce using rule 45
	'*'            reduce using rule 45
	'/'            reduce using rule 45
	'^'            shift, and enter state 96
	')'            reduce using rule 45
	']'            reduce using rule 45
	','            reduce using rule 45
	"for"          reduce using rule 45
	"AND"          reduce using rule 45
	"OR"           reduce using rule 45
	'<'            reduce using rule 45
	'>'            reduce using rule 45
	">="           reduce using rule 45
	"<="           reduce using rule 45
	"=="           reduce using rule 45


State 129

	COND -> COND . '+' COND                             (rule 43)
	COND -> COND . '-' COND                             (rule 44)
	COND -> COND '-' COND .                             (rule 44)
	COND -> COND . '*' COND                             (rule 45)
	COND -> COND . '/' COND                             (rule 46)
	COND -> COND . '^' COND                             (rule 47)
	COND -> COND . "AND" COND                           (rule 61)
	COND -> COND . "OR" COND                            (rule 62)
	COND -> COND . '>' COND                             (rule 64)
	COND -> COND . '<' COND                             (rule 65)
	COND -> COND . "<=" COND                            (rule 66)
	COND -> COND . ">=" COND                            (rule 67)
	COND -> COND . "==" COND                            (rule 68)

	'+'            reduce using rule 44
	'-'            reduce using rule 44
	'*'            shift, and enter state 94
	'/'            shift, and enter state 95
	'^'            shift, and enter state 96
	')'            reduce using rule 44
	']'            reduce using rule 44
	','            reduce using rule 44
	"for"          reduce using rule 44
	"AND"          reduce using rule 44
	"OR"           reduce using rule 44
	'<'            reduce using rule 44
	'>'            reduce using rule 44
	">="           reduce using rule 44
	"<="           reduce using rule 44
	"=="           reduce using rule 44


State 130

	COND -> COND . '+' COND                             (rule 43)
	COND -> COND '+' COND .                             (rule 43)
	COND -> COND . '-' COND                             (rule 44)
	COND -> COND . '*' COND                             (rule 45)
	COND -> COND . '/' COND                             (rule 46)
	COND -> COND . '^' COND                             (rule 47)
	COND -> COND . "AND" COND                           (rule 61)
	COND -> COND . "OR" COND                            (rule 62)
	COND -> COND . '>' COND                             (rule 64)
	COND -> COND . '<' COND                             (rule 65)
	COND -> COND . "<=" COND                            (rule 66)
	COND -> COND . ">=" COND                            (rule 67)
	COND -> COND . "==" COND                            (rule 68)

	'+'            reduce using rule 43
	'-'            reduce using rule 43
	'*'            shift, and enter state 94
	'/'            shift, and enter state 95
	'^'            shift, and enter state 96
	')'            reduce using rule 43
	']'            reduce using rule 43
	','            reduce using rule 43
	"for"          reduce using rule 43
	"AND"          reduce using rule 43
	"OR"           reduce using rule 43
	'<'            reduce using rule 43
	'>'            reduce using rule 43
	">="           reduce using rule 43
	"<="           reduce using rule 43
	"=="           reduce using rule 43


State 131

	COND -> COND . '+' COND                             (rule 43)
	COND -> COND . '-' COND                             (rule 44)
	COND -> COND . '*' COND                             (rule 45)
	COND -> COND . '/' COND                             (rule 46)
	COND -> COND . '^' COND                             (rule 47)
	COND -> funcion '(' COND . ')'                      (rule 53)
	COND -> COND . "AND" COND                           (rule 61)
	COND -> COND . "OR" COND                            (rule 62)
	COND -> COND . '>' COND                             (rule 64)
	COND -> COND . '<' COND                             (rule 65)
	COND -> COND . "<=" COND                            (rule 66)
	COND -> COND . ">=" COND                            (rule 67)
	COND -> COND . "==" COND                            (rule 68)

	'+'            shift, and enter state 92
	'-'            shift, and enter state 93
	'*'            shift, and enter state 94
	'/'            shift, and enter state 95
	'^'            shift, and enter state 96
	')'            shift, and enter state 147
	"AND"          shift, and enter state 98
	"OR"           shift, and enter state 99
	'<'            shift, and enter state 100
	'>'            shift, and enter state 101
	">="           shift, and enter state 102
	"<="           shift, and enter state 103
	"=="           shift, and enter state 104


State 132

	COND -> '(' COND ')' .                              (rule 49)

	'+'            reduce using rule 49
	'-'            reduce using rule 49
	'*'            reduce using rule 49
	'/'            reduce using rule 49
	'^'            reduce using rule 49
	')'            reduce using rule 49
	']'            reduce using rule 49
	','            reduce using rule 49
	"for"          reduce using rule 49
	"AND"          reduce using rule 49
	"OR"           reduce using rule 49
	'<'            reduce using rule 49
	'>'            reduce using rule 49
	">="           reduce using rule 49
	"<="           reduce using rule 49
	"=="           reduce using rule 49


State 133

	COND -> '[' COND "for" . identificador "in" COND ']'    (rule 59)

	identificador  shift, and enter state 146


State 134

	COND -> '[' SECUENCIA_COND ']' .                    (rule 57)

	'+'            reduce using rule 57
	'-'            reduce using rule 57
	'*'            reduce using rule 57
	'/'            reduce using rule 57
	'^'            reduce using rule 57
	')'            reduce using rule 57
	']'            reduce using rule 57
	','            reduce using rule 57
	"for"          reduce using rule 57
	"AND"          reduce using rule 57
	"OR"           reduce using rule 57
	'<'            reduce using rule 57
	'>'            reduce using rule 57
	">="           reduce using rule 57
	"<="           reduce using rule 57
	"=="           reduce using rule 57


State 135

	SECUENCIA_COND -> SECUENCIA_COND ',' . COND         (rule 40)

	'-'            shift, and enter state 66
	int            shift, and enter state 67
	real           shift, and enter state 68
	constmat       shift, and enter state 69
	funcion        shift, and enter state 70
	'('            shift, and enter state 71
	'['            shift, and enter state 72
	"range"        shift, and enter state 73
	"if"           shift, and enter state 74
	"NOT"          shift, and enter state 75
	identificador  shift, and enter state 76

	COND           goto state 145

State 136

	COND -> COND . '+' COND                             (rule 43)
	COND -> COND . '-' COND                             (rule 44)
	COND -> COND . '*' COND                             (rule 45)
	COND -> COND . '/' COND                             (rule 46)
	COND -> COND . '^' COND                             (rule 47)
	COND -> "range" '(' COND . ',' COND ')'             (rule 58)
	COND -> COND . "AND" COND                           (rule 61)
	COND -> COND . "OR" COND                            (rule 62)
	COND -> COND . '>' COND                             (rule 64)
	COND -> COND . '<' COND                             (rule 65)
	COND -> COND . "<=" COND                            (rule 66)
	COND -> COND . ">=" COND                            (rule 67)
	COND -> COND . "==" COND                            (rule 68)

	'+'            shift, and enter state 92
	'-'            shift, and enter state 93
	'*'            shift, and enter state 94
	'/'            shift, and enter state 95
	'^'            shift, and enter state 96
	','            shift, and enter state 144
	"AND"          shift, and enter state 98
	"OR"           shift, and enter state 99
	'<'            shift, and enter state 100
	'>'            shift, and enter state 101
	">="           shift, and enter state 102
	"<="           shift, and enter state 103
	"=="           shift, and enter state 104


State 137

	COND -> COND . '+' COND                             (rule 43)
	COND -> COND . '-' COND                             (rule 44)
	COND -> COND . '*' COND                             (rule 45)
	COND -> COND . '/' COND                             (rule 46)
	COND -> COND . '^' COND                             (rule 47)
	COND -> "if" '(' COND . ',' COND ',' COND ')'       (rule 60)
	COND -> COND . "AND" COND                           (rule 61)
	COND -> COND . "OR" COND                            (rule 62)
	COND -> COND . '>' COND                             (rule 64)
	COND -> COND . '<' COND                             (rule 65)
	COND -> COND . "<=" COND                            (rule 66)
	COND -> COND . ">=" COND                            (rule 67)
	COND -> COND . "==" COND                            (rule 68)

	'+'            shift, and enter state 92
	'-'            shift, and enter state 93
	'*'            shift, and enter state 94
	'/'            shift, and enter state 95
	'^'            shift, and enter state 96
	','            shift, and enter state 143
	"AND"          shift, and enter state 98
	"OR"           shift, and enter state 99
	'<'            shift, and enter state 100
	'>'            shift, and enter state 101
	">="           shift, and enter state 102
	"<="           shift, and enter state 103
	"=="           shift, and enter state 104


State 138

	COND -> COND . '+' COND                             (rule 43)
	COND -> COND . '-' COND                             (rule 44)
	COND -> COND . '*' COND                             (rule 45)
	COND -> COND . '/' COND                             (rule 46)
	COND -> COND . '^' COND                             (rule 47)
	COND -> identificador '(' COND . ')'                (rule 54)
	COND -> COND . "AND" COND                           (rule 61)
	COND -> COND . "OR" COND                            (rule 62)
	COND -> COND . '>' COND                             (rule 64)
	COND -> COND . '<' COND                             (rule 65)
	COND -> COND . "<=" COND                            (rule 66)
	COND -> COND . ">=" COND                            (rule 67)
	COND -> COND . "==" COND                            (rule 68)

	'+'            shift, and enter state 92
	'-'            shift, and enter state 93
	'*'            shift, and enter state 94
	'/'            shift, and enter state 95
	'^'            shift, and enter state 96
	')'            shift, and enter state 142
	"AND"          shift, and enter state 98
	"OR"           shift, and enter state 99
	'<'            shift, and enter state 100
	'>'            shift, and enter state 101
	">="           shift, and enter state 102
	"<="           shift, and enter state 103
	"=="           shift, and enter state 104


State 139

	CICLO -> "for" identificador "in" EM "step" EM . SECUENCIA_1 "endfor"    (rule 18)
	EM -> EM . '+' EM                                   (rule 19)
	EM -> EM . '-' EM                                   (rule 20)
	EM -> EM . '*' EM                                   (rule 21)
	EM -> EM . '/' EM                                   (rule 22)
	EM -> EM . '^' EM                                   (rule 23)

	'+'            shift, and enter state 40
	'-'            shift, and enter state 41
	'*'            shift, and enter state 42
	'/'            shift, and enter state 43
	'^'            shift, and enter state 44
	"for"          shift, and enter state 6
	"plot"         shift, and enter state 7
	"push_back"    shift, and enter state 8
	identificador  shift, and enter state 9

	SECUENCIA_1    goto state 141
	SECUENCIA_2    goto state 3
	INSTR          goto state 4
	CICLO          goto state 5

State 140

	CICLO -> "for" identificador "in" EM SECUENCIA_1 "endfor" .    (rule 17)

	"for"          reduce using rule 17
	"plot"         reduce using rule 17
	"endfor"       reduce using rule 17
	"push_back"    reduce using rule 17
	identificador  reduce using rule 17
	%eof           reduce using rule 17


State 141

	CICLO -> "for" identificador "in" EM "step" EM SECUENCIA_1 . "endfor"    (rule 18)

	"endfor"       shift, and enter state 161


State 142

	COND -> identificador '(' COND ')' .                (rule 54)

	'+'            reduce using rule 54
	'-'            reduce using rule 54
	'*'            reduce using rule 54
	'/'            reduce using rule 54
	'^'            reduce using rule 54
	')'            reduce using rule 54
	']'            reduce using rule 54
	','            reduce using rule 54
	"for"          reduce using rule 54
	"AND"          reduce using rule 54
	"OR"           reduce using rule 54
	'<'            reduce using rule 54
	'>'            reduce using rule 54
	">="           reduce using rule 54
	"<="           reduce using rule 54
	"=="           reduce using rule 54


State 143

	COND -> "if" '(' COND ',' . COND ',' COND ')'       (rule 60)

	'-'            shift, and enter state 66
	int            shift, and enter state 67
	real           shift, and enter state 68
	constmat       shift, and enter state 69
	funcion        shift, and enter state 70
	'('            shift, and enter state 71
	'['            shift, and enter state 72
	"range"        shift, and enter state 73
	"if"           shift, and enter state 74
	"NOT"          shift, and enter state 75
	identificador  shift, and enter state 76

	COND           goto state 160

State 144

	COND -> "range" '(' COND ',' . COND ')'             (rule 58)

	'-'            shift, and enter state 66
	int            shift, and enter state 67
	real           shift, and enter state 68
	constmat       shift, and enter state 69
	funcion        shift, and enter state 70
	'('            shift, and enter state 71
	'['            shift, and enter state 72
	"range"        shift, and enter state 73
	"if"           shift, and enter state 74
	"NOT"          shift, and enter state 75
	identificador  shift, and enter state 76

	COND           goto state 159

State 145

	SECUENCIA_COND -> SECUENCIA_COND ',' COND .         (rule 40)
	COND -> COND . '+' COND                             (rule 43)
	COND -> COND . '-' COND                             (rule 44)
	COND -> COND . '*' COND                             (rule 45)
	COND -> COND . '/' COND                             (rule 46)
	COND -> COND . '^' COND                             (rule 47)
	COND -> COND . "AND" COND                           (rule 61)
	COND -> COND . "OR" COND                            (rule 62)
	COND -> COND . '>' COND                             (rule 64)
	COND -> COND . '<' COND                             (rule 65)
	COND -> COND . "<=" COND                            (rule 66)
	COND -> COND . ">=" COND                            (rule 67)
	COND -> COND . "==" COND                            (rule 68)

	'+'            shift, and enter state 92
	'-'            shift, and enter state 93
	'*'            shift, and enter state 94
	'/'            shift, and enter state 95
	'^'            shift, and enter state 96
	']'            reduce using rule 40
	','            reduce using rule 40
	"AND"          shift, and enter state 98
	"OR"           shift, and enter state 99
	'<'            shift, and enter state 100
	'>'            shift, and enter state 101
	">="           shift, and enter state 102
	"<="           shift, and enter state 103
	"=="           shift, and enter state 104


State 146

	COND -> '[' COND "for" identificador . "in" COND ']'    (rule 59)

	"in"           shift, and enter state 158


State 147

	COND -> funcion '(' COND ')' .                      (rule 53)

	'+'            reduce using rule 53
	'-'            reduce using rule 53
	'*'            reduce using rule 53
	'/'            reduce using rule 53
	'^'            reduce using rule 53
	')'            reduce using rule 53
	']'            reduce using rule 53
	','            reduce using rule 53
	"for"          reduce using rule 53
	"AND"          reduce using rule 53
	"OR"           reduce using rule 53
	'<'            reduce using rule 53
	'>'            reduce using rule 53
	">="           reduce using rule 53
	"<="           reduce using rule 53
	"=="           reduce using rule 53


State 148

	EM -> "if" '(' COND ',' EM ',' . EM ')'             (rule 36)

	'-'            shift, and enter state 15
	int            shift, and enter state 16
	real           shift, and enter state 17
	constmat       shift, and enter state 18
	funcion        shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	"range"        shift, and enter state 22
	"if"           shift, and enter state 23
	identificador  shift, and enter state 24

	EM             goto state 157

State 149

	EM -> "range" '(' EM ',' EM ')' .                   (rule 34)

	'+'            reduce using rule 34
	'-'            reduce using rule 34
	'*'            reduce using rule 34
	'/'            reduce using rule 34
	'^'            reduce using rule 34
	')'            reduce using rule 34
	']'            reduce using rule 34
	','            reduce using rule 34
	"for"          reduce using rule 34
	';'            reduce using rule 34
	"with"         reduce using rule 34
	"plot"         reduce using rule 34
	"endfor"       reduce using rule 34
	"step"         reduce using rule 34
	"push_back"    reduce using rule 34
	identificador  reduce using rule 34
	%eof           reduce using rule 34


State 150

	EM -> EM . '+' EM                                   (rule 19)
	EM -> EM . '-' EM                                   (rule 20)
	EM -> EM . '*' EM                                   (rule 21)
	EM -> EM . '/' EM                                   (rule 22)
	EM -> EM . '^' EM                                   (rule 23)
	EM -> '[' EM "for" identificador "in" EM . ']'      (rule 35)

	'+'            shift, and enter state 40
	'-'            shift, and enter state 41
	'*'            shift, and enter state 42
	'/'            shift, and enter state 43
	'^'            shift, and enter state 44
	']'            shift, and enter state 156


State 151

	INSTR -> "plot" EM ',' EG "with" '[' SECUENCIA_ESTILO . ']'    (rule 13)
	SECUENCIA_ESTILO -> SECUENCIA_ESTILO . ',' estilo    (rule 42)

	']'            shift, and enter state 154
	','            shift, and enter state 155


State 152

	INSTR -> "plot" EM ',' EG "with" '[' ']' .          (rule 12)

	';'            reduce using rule 12
	"endfor"       reduce using rule 12
	%eof           reduce using rule 12


State 153

	SECUENCIA_ESTILO -> estilo .                        (rule 41)

	']'            reduce using rule 41
	','            reduce using rule 41


State 154

	INSTR -> "plot" EM ',' EG "with" '[' SECUENCIA_ESTILO ']' .    (rule 13)

	';'            reduce using rule 13
	"endfor"       reduce using rule 13
	%eof           reduce using rule 13


State 155

	SECUENCIA_ESTILO -> SECUENCIA_ESTILO ',' . estilo    (rule 42)

	estilo         shift, and enter state 166


State 156

	EM -> '[' EM "for" identificador "in" EM ']' .      (rule 35)

	'+'            reduce using rule 35
	'-'            reduce using rule 35
	'*'            reduce using rule 35
	'/'            reduce using rule 35
	'^'            reduce using rule 35
	')'            reduce using rule 35
	']'            reduce using rule 35
	','            reduce using rule 35
	"for"          reduce using rule 35
	';'            reduce using rule 35
	"with"         reduce using rule 35
	"plot"         reduce using rule 35
	"endfor"       reduce using rule 35
	"step"         reduce using rule 35
	"push_back"    reduce using rule 35
	identificador  reduce using rule 35
	%eof           reduce using rule 35


State 157

	EM -> EM . '+' EM                                   (rule 19)
	EM -> EM . '-' EM                                   (rule 20)
	EM -> EM . '*' EM                                   (rule 21)
	EM -> EM . '/' EM                                   (rule 22)
	EM -> EM . '^' EM                                   (rule 23)
	EM -> "if" '(' COND ',' EM ',' EM . ')'             (rule 36)

	'+'            shift, and enter state 40
	'-'            shift, and enter state 41
	'*'            shift, and enter state 42
	'/'            shift, and enter state 43
	'^'            shift, and enter state 44
	')'            shift, and enter state 165


State 158

	COND -> '[' COND "for" identificador "in" . COND ']'    (rule 59)

	'-'            shift, and enter state 66
	int            shift, and enter state 67
	real           shift, and enter state 68
	constmat       shift, and enter state 69
	funcion        shift, and enter state 70
	'('            shift, and enter state 71
	'['            shift, and enter state 72
	"range"        shift, and enter state 73
	"if"           shift, and enter state 74
	"NOT"          shift, and enter state 75
	identificador  shift, and enter state 76

	COND           goto state 164

State 159

	COND -> COND . '+' COND                             (rule 43)
	COND -> COND . '-' COND                             (rule 44)
	COND -> COND . '*' COND                             (rule 45)
	COND -> COND . '/' COND                             (rule 46)
	COND -> COND . '^' COND                             (rule 47)
	COND -> "range" '(' COND ',' COND . ')'             (rule 58)
	COND -> COND . "AND" COND                           (rule 61)
	COND -> COND . "OR" COND                            (rule 62)
	COND -> COND . '>' COND                             (rule 64)
	COND -> COND . '<' COND                             (rule 65)
	COND -> COND . "<=" COND                            (rule 66)
	COND -> COND . ">=" COND                            (rule 67)
	COND -> COND . "==" COND                            (rule 68)

	'+'            shift, and enter state 92
	'-'            shift, and enter state 93
	'*'            shift, and enter state 94
	'/'            shift, and enter state 95
	'^'            shift, and enter state 96
	')'            shift, and enter state 163
	"AND"          shift, and enter state 98
	"OR"           shift, and enter state 99
	'<'            shift, and enter state 100
	'>'            shift, and enter state 101
	">="           shift, and enter state 102
	"<="           shift, and enter state 103
	"=="           shift, and enter state 104


State 160

	COND -> COND . '+' COND                             (rule 43)
	COND -> COND . '-' COND                             (rule 44)
	COND -> COND . '*' COND                             (rule 45)
	COND -> COND . '/' COND                             (rule 46)
	COND -> COND . '^' COND                             (rule 47)
	COND -> "if" '(' COND ',' COND . ',' COND ')'       (rule 60)
	COND -> COND . "AND" COND                           (rule 61)
	COND -> COND . "OR" COND                            (rule 62)
	COND -> COND . '>' COND                             (rule 64)
	COND -> COND . '<' COND                             (rule 65)
	COND -> COND . "<=" COND                            (rule 66)
	COND -> COND . ">=" COND                            (rule 67)
	COND -> COND . "==" COND                            (rule 68)

	'+'            shift, and enter state 92
	'-'            shift, and enter state 93
	'*'            shift, and enter state 94
	'/'            shift, and enter state 95
	'^'            shift, and enter state 96
	','            shift, and enter state 162
	"AND"          shift, and enter state 98
	"OR"           shift, and enter state 99
	'<'            shift, and enter state 100
	'>'            shift, and enter state 101
	">="           shift, and enter state 102
	"<="           shift, and enter state 103
	"=="           shift, and enter state 104


State 161

	CICLO -> "for" identificador "in" EM "step" EM SECUENCIA_1 "endfor" .    (rule 18)

	"for"          reduce using rule 18
	"plot"         reduce using rule 18
	"endfor"       reduce using rule 18
	"push_back"    reduce using rule 18
	identificador  reduce using rule 18
	%eof           reduce using rule 18


State 162

	COND -> "if" '(' COND ',' COND ',' . COND ')'       (rule 60)

	'-'            shift, and enter state 66
	int            shift, and enter state 67
	real           shift, and enter state 68
	constmat       shift, and enter state 69
	funcion        shift, and enter state 70
	'('            shift, and enter state 71
	'['            shift, and enter state 72
	"range"        shift, and enter state 73
	"if"           shift, and enter state 74
	"NOT"          shift, and enter state 75
	identificador  shift, and enter state 76

	COND           goto state 168

State 163

	COND -> "range" '(' COND ',' COND ')' .             (rule 58)

	'+'            reduce using rule 58
	'-'            reduce using rule 58
	'*'            reduce using rule 58
	'/'            reduce using rule 58
	'^'            reduce using rule 58
	')'            reduce using rule 58
	']'            reduce using rule 58
	','            reduce using rule 58
	"for"          reduce using rule 58
	"AND"          reduce using rule 58
	"OR"           reduce using rule 58
	'<'            reduce using rule 58
	'>'            reduce using rule 58
	">="           reduce using rule 58
	"<="           reduce using rule 58
	"=="           reduce using rule 58


State 164

	COND -> COND . '+' COND                             (rule 43)
	COND -> COND . '-' COND                             (rule 44)
	COND -> COND . '*' COND                             (rule 45)
	COND -> COND . '/' COND                             (rule 46)
	COND -> COND . '^' COND                             (rule 47)
	COND -> '[' COND "for" identificador "in" COND . ']'    (rule 59)
	COND -> COND . "AND" COND                           (rule 61)
	COND -> COND . "OR" COND                            (rule 62)
	COND -> COND . '>' COND                             (rule 64)
	COND -> COND . '<' COND                             (rule 65)
	COND -> COND . "<=" COND                            (rule 66)
	COND -> COND . ">=" COND                            (rule 67)
	COND -> COND . "==" COND                            (rule 68)

	'+'            shift, and enter state 92
	'-'            shift, and enter state 93
	'*'            shift, and enter state 94
	'/'            shift, and enter state 95
	'^'            shift, and enter state 96
	']'            shift, and enter state 167
	"AND"          shift, and enter state 98
	"OR"           shift, and enter state 99
	'<'            shift, and enter state 100
	'>'            shift, and enter state 101
	">="           shift, and enter state 102
	"<="           shift, and enter state 103
	"=="           shift, and enter state 104


State 165

	EM -> "if" '(' COND ',' EM ',' EM ')' .             (rule 36)

	'+'            reduce using rule 36
	'-'            reduce using rule 36
	'*'            reduce using rule 36
	'/'            reduce using rule 36
	'^'            reduce using rule 36
	')'            reduce using rule 36
	']'            reduce using rule 36
	','            reduce using rule 36
	"for"          reduce using rule 36
	';'            reduce using rule 36
	"with"         reduce using rule 36
	"plot"         reduce using rule 36
	"endfor"       reduce using rule 36
	"step"         reduce using rule 36
	"push_back"    reduce using rule 36
	identificador  reduce using rule 36
	%eof           reduce using rule 36


State 166

	SECUENCIA_ESTILO -> SECUENCIA_ESTILO ',' estilo .    (rule 42)

	']'            reduce using rule 42
	','            reduce using rule 42


State 167

	COND -> '[' COND "for" identificador "in" COND ']' .    (rule 59)

	'+'            reduce using rule 59
	'-'            reduce using rule 59
	'*'            reduce using rule 59
	'/'            reduce using rule 59
	'^'            reduce using rule 59
	')'            reduce using rule 59
	']'            reduce using rule 59
	','            reduce using rule 59
	"for"          reduce using rule 59
	"AND"          reduce using rule 59
	"OR"           reduce using rule 59
	'<'            reduce using rule 59
	'>'            reduce using rule 59
	">="           reduce using rule 59
	"<="           reduce using rule 59
	"=="           reduce using rule 59


State 168

	COND -> COND . '+' COND                             (rule 43)
	COND -> COND . '-' COND                             (rule 44)
	COND -> COND . '*' COND                             (rule 45)
	COND -> COND . '/' COND                             (rule 46)
	COND -> COND . '^' COND                             (rule 47)
	COND -> "if" '(' COND ',' COND ',' COND . ')'       (rule 60)
	COND -> COND . "AND" COND                           (rule 61)
	COND -> COND . "OR" COND                            (rule 62)
	COND -> COND . '>' COND                             (rule 64)
	COND -> COND . '<' COND                             (rule 65)
	COND -> COND . "<=" COND                            (rule 66)
	COND -> COND . ">=" COND                            (rule 67)
	COND -> COND . "==" COND                            (rule 68)

	'+'            shift, and enter state 92
	'-'            shift, and enter state 93
	'*'            shift, and enter state 94
	'/'            shift, and enter state 95
	'^'            shift, and enter state 96
	')'            shift, and enter state 169
	"AND"          shift, and enter state 98
	"OR"           shift, and enter state 99
	'<'            shift, and enter state 100
	'>'            shift, and enter state 101
	">="           shift, and enter state 102
	"<="           shift, and enter state 103
	"=="           shift, and enter state 104


State 169

	COND -> "if" '(' COND ',' COND ',' COND ')' .       (rule 60)

	'+'            reduce using rule 60
	'-'            reduce using rule 60
	'*'            reduce using rule 60
	'/'            reduce using rule 60
	'^'            reduce using rule 60
	')'            reduce using rule 60
	']'            reduce using rule 60
	','            reduce using rule 60
	"for"          reduce using rule 60
	"AND"          reduce using rule 60
	"OR"           reduce using rule 60
	'<'            reduce using rule 60
	'>'            reduce using rule 60
	">="           reduce using rule 60
	"<="           reduce using rule 60
	"=="           reduce using rule 60


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 71
Number of terminals: 36
Number of non-terminals: 12
Number of states: 170
