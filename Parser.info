-----------------------------------------------------------------------------
Info file generated by Happy Version 1.18.4 from Parser.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> SEC_INSTR                          (0)
	SEC_INSTR -> INSTR ';'                             (1)
	SEC_INSTR -> CICLO                                 (2)
	SEC_INSTR -> SEC_INSTR INSTR ';'                   (3)
	SEC_INSTR -> SEC_INSTR CICLO                       (4)
	INSTR -> identificador '(' identificador ')' '=' EM   (5)
	INSTR -> identificador '=' EM                      (6)
	INSTR -> "plot" EM ',' EG "with" '[' ']'           (7)
	INSTR -> "plot" EM ',' EG "with" '[' SECUENCIA_ESTILO ']'   (8)
	INSTR -> "plot" EM ',' EG "with" estilo            (9)
	INSTR -> "plot" EM ',' EG                          (10)
	INSTR -> "push_back" '(' identificador ',' EM ')'   (11)
	CICLO -> "for" identificador "in" EM SEC_INSTR_CICLO "endfor"   (12)
	CICLO -> "for" identificador "in" EM "step" int SEC_INSTR_CICLO "endfor"   (13)
	SEC_INSTR_CICLO -> INSTR                           (14)
	SEC_INSTR_CICLO -> CICLO                           (15)
	SEC_INSTR_CICLO -> SEC_INSTR_CICLO ';' INSTR       (16)
	SECUENCIA_ESTILO -> SECUENCIA_ESTILO ',' estilo    (17)
	SECUENCIA_ESTILO -> estilo                         (18)
	EM -> EM '+' EM                                    (19)
	EM -> EM '-' EM                                    (20)
	EM -> EM '*' EM                                    (21)
	EM -> EM '/' EM                                    (22)
	EM -> EM '^' EM                                    (23)
	EM -> '-' EM                                       (24)
	EM -> '(' EM ')'                                   (25)
	EM -> int                                          (26)
	EM -> real                                         (27)
	EM -> constmat                                     (28)
	EM -> funcion '(' EM ')'                           (29)
	EM -> identificador '(' EM ')'                     (30)
	EM -> identificador                                (31)
	EM -> '[' ']'                                      (32)
	EM -> '[' SECUENCIA_EM ']'                         (33)
	EM -> "range" '(' EM ',' EM ')'                    (34)
	EM -> '[' EM "for" identificador "in" EM ']'       (35)
	EM -> "if" '(' COND ',' EM ',' EM ')'              (36)
	SECUENCIA_EM -> EM                                 (37)
	SECUENCIA_EM -> SECUENCIA_EM ',' EM                (38)
	COND -> EM                                         (39)
	COND -> COND "AND" COND                            (40)
	COND -> COND "OR" COND                             (41)
	COND -> "NOT" COND                                 (42)
	COND -> EM '>' EM                                  (43)
	COND -> EM '<' EM                                  (44)
	COND -> EM "<=" EM                                 (45)
	COND -> EM ">=" EM                                 (46)
	COND -> EM "==" EM                                 (47)
	EG -> EM                                           (48)
	EG -> archivo                                      (49)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'+'            { TkMas }
	'-'            { TkMenos }
	'*'            { TkPor }
	'/'            { TkEntre }
	'^'            { TkElevado }
	int            { TkEntero $$ }
	real           { TkReal $$ }
	constmat       { TkConstanteMat $$ }
	funcion        { TkFuncion $$ }
	'('            { TkParentesisI }
	')'            { TkParentesisD }
	'['            { TkCorcheteI }
	']'            { TkCorcheteD }
	','            { TkComa }
	"range"        { TkRango }
	"for"          { TkFor }
	"in"           { TkIn }
	"if"           { TkIf }
	"AND"          { TkAnd }
	"OR"           { TkOr }
	"NOT"          { TkNot }
	'<'            { TkMenor }
	'>'            { TkMayor }
	">="           { TkMayorIg }
	"<="           { TkMenorIg }
	"=="           { TkIgual }
	';'            { TkPuntoYComa }
	'='            { TkAsignacion }
	"with"         { TkWith }
	"plot"         { TkPlot }
	"endfor"       { TkEndFor }
	"step"         { TkStep }
	"push_back"    { TkPushBack }
	estilo         { TkEstilo $$ }
	identificador  { TkIdentificador $$ }
	archivo        { TkArchivo $$ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	SEC_INSTR       rules 1, 2, 3, 4
	INSTR           rules 5, 6, 7, 8, 9, 10, 11
	CICLO           rules 12, 13
	SEC_INSTR_CICLO rules 14, 15, 16
	SECUENCIA_ESTILO rules 17, 18
	EM              rules 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36
	SECUENCIA_EM    rules 37, 38
	COND            rules 39, 40, 41, 42, 43, 44, 45, 46, 47
	EG              rules 48, 49

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	"for"          shift, and enter state 8
	"plot"         shift, and enter state 3
	"push_back"    shift, and enter state 4
	identificador  shift, and enter state 5

	SEC_INSTR      goto state 6
	INSTR          goto state 2
	CICLO          goto state 7

State 1


	"plot"         shift, and enter state 3
	"push_back"    shift, and enter state 4
	identificador  shift, and enter state 5

	INSTR          goto state 2

State 2

	SEC_INSTR -> INSTR . ';'                            (rule 1)

	';'            shift, and enter state 26


State 3

	INSTR -> "plot" . EM ',' EG "with" '[' ']'          (rule 7)
	INSTR -> "plot" . EM ',' EG "with" '[' SECUENCIA_ESTILO ']'    (rule 8)
	INSTR -> "plot" . EM ',' EG "with" estilo           (rule 9)
	INSTR -> "plot" . EM ',' EG                         (rule 10)

	'-'            shift, and enter state 16
	int            shift, and enter state 17
	real           shift, and enter state 18
	constmat       shift, and enter state 19
	funcion        shift, and enter state 20
	'('            shift, and enter state 21
	'['            shift, and enter state 22
	"range"        shift, and enter state 23
	"if"           shift, and enter state 24
	identificador  shift, and enter state 25

	EM             goto state 15

State 4

	INSTR -> "push_back" . '(' identificador ',' EM ')'    (rule 11)

	'('            shift, and enter state 14


State 5

	INSTR -> identificador . '(' identificador ')' '=' EM    (rule 5)
	INSTR -> identificador . '=' EM                     (rule 6)

	'('            shift, and enter state 12
	'='            shift, and enter state 13


State 6

	%start_parse -> SEC_INSTR .                         (rule 0)
	SEC_INSTR -> SEC_INSTR . INSTR ';'                  (rule 3)
	SEC_INSTR -> SEC_INSTR . CICLO                      (rule 4)

	"for"          shift, and enter state 8
	"plot"         shift, and enter state 3
	"push_back"    shift, and enter state 4
	identificador  shift, and enter state 5
	%eof           accept

	INSTR          goto state 10
	CICLO          goto state 11

State 7

	SEC_INSTR -> CICLO .                                (rule 2)

	"for"          reduce using rule 2
	"plot"         reduce using rule 2
	"push_back"    reduce using rule 2
	identificador  reduce using rule 2
	%eof           reduce using rule 2


State 8

	CICLO -> "for" . identificador "in" EM SEC_INSTR_CICLO "endfor"    (rule 12)
	CICLO -> "for" . identificador "in" EM "step" int SEC_INSTR_CICLO "endfor"    (rule 13)

	identificador  shift, and enter state 9


State 9

	CICLO -> "for" identificador . "in" EM SEC_INSTR_CICLO "endfor"    (rule 12)
	CICLO -> "for" identificador . "in" EM "step" int SEC_INSTR_CICLO "endfor"    (rule 13)

	"in"           shift, and enter state 46


State 10

	SEC_INSTR -> SEC_INSTR INSTR . ';'                  (rule 3)

	';'            shift, and enter state 45


State 11

	SEC_INSTR -> SEC_INSTR CICLO .                      (rule 4)

	"for"          reduce using rule 4
	"plot"         reduce using rule 4
	"push_back"    reduce using rule 4
	identificador  reduce using rule 4
	%eof           reduce using rule 4


State 12

	INSTR -> identificador '(' . identificador ')' '=' EM    (rule 5)

	identificador  shift, and enter state 44


State 13

	INSTR -> identificador '=' . EM                     (rule 6)

	'-'            shift, and enter state 16
	int            shift, and enter state 17
	real           shift, and enter state 18
	constmat       shift, and enter state 19
	funcion        shift, and enter state 20
	'('            shift, and enter state 21
	'['            shift, and enter state 22
	"range"        shift, and enter state 23
	"if"           shift, and enter state 24
	identificador  shift, and enter state 25

	EM             goto state 43

State 14

	INSTR -> "push_back" '(' . identificador ',' EM ')'    (rule 11)

	identificador  shift, and enter state 42


State 15

	INSTR -> "plot" EM . ',' EG "with" '[' ']'          (rule 7)
	INSTR -> "plot" EM . ',' EG "with" '[' SECUENCIA_ESTILO ']'    (rule 8)
	INSTR -> "plot" EM . ',' EG "with" estilo           (rule 9)
	INSTR -> "plot" EM . ',' EG                         (rule 10)
	EM -> EM . '+' EM                                   (rule 19)
	EM -> EM . '-' EM                                   (rule 20)
	EM -> EM . '*' EM                                   (rule 21)
	EM -> EM . '/' EM                                   (rule 22)
	EM -> EM . '^' EM                                   (rule 23)

	'+'            shift, and enter state 36
	'-'            shift, and enter state 37
	'*'            shift, and enter state 38
	'/'            shift, and enter state 39
	'^'            shift, and enter state 40
	','            shift, and enter state 41


State 16

	EM -> '-' . EM                                      (rule 24)

	'-'            shift, and enter state 16
	int            shift, and enter state 17
	real           shift, and enter state 18
	constmat       shift, and enter state 19
	funcion        shift, and enter state 20
	'('            shift, and enter state 21
	'['            shift, and enter state 22
	"range"        shift, and enter state 23
	"if"           shift, and enter state 24
	identificador  shift, and enter state 25

	EM             goto state 35

State 17

	EM -> int .                                         (rule 26)

	'+'            reduce using rule 26
	'-'            reduce using rule 26
	'*'            reduce using rule 26
	'/'            reduce using rule 26
	'^'            reduce using rule 26
	')'            reduce using rule 26
	']'            reduce using rule 26
	','            reduce using rule 26
	"for"          reduce using rule 26
	"AND"          reduce using rule 26
	"OR"           reduce using rule 26
	'<'            reduce using rule 26
	'>'            reduce using rule 26
	">="           reduce using rule 26
	"<="           reduce using rule 26
	"=="           reduce using rule 26
	';'            reduce using rule 26
	"with"         reduce using rule 26
	"plot"         reduce using rule 26
	"endfor"       reduce using rule 26
	"step"         reduce using rule 26
	"push_back"    reduce using rule 26
	identificador  reduce using rule 26


State 18

	EM -> real .                                        (rule 27)

	'+'            reduce using rule 27
	'-'            reduce using rule 27
	'*'            reduce using rule 27
	'/'            reduce using rule 27
	'^'            reduce using rule 27
	')'            reduce using rule 27
	']'            reduce using rule 27
	','            reduce using rule 27
	"for"          reduce using rule 27
	"AND"          reduce using rule 27
	"OR"           reduce using rule 27
	'<'            reduce using rule 27
	'>'            reduce using rule 27
	">="           reduce using rule 27
	"<="           reduce using rule 27
	"=="           reduce using rule 27
	';'            reduce using rule 27
	"with"         reduce using rule 27
	"plot"         reduce using rule 27
	"endfor"       reduce using rule 27
	"step"         reduce using rule 27
	"push_back"    reduce using rule 27
	identificador  reduce using rule 27


State 19

	EM -> constmat .                                    (rule 28)

	'+'            reduce using rule 28
	'-'            reduce using rule 28
	'*'            reduce using rule 28
	'/'            reduce using rule 28
	'^'            reduce using rule 28
	')'            reduce using rule 28
	']'            reduce using rule 28
	','            reduce using rule 28
	"for"          reduce using rule 28
	"AND"          reduce using rule 28
	"OR"           reduce using rule 28
	'<'            reduce using rule 28
	'>'            reduce using rule 28
	">="           reduce using rule 28
	"<="           reduce using rule 28
	"=="           reduce using rule 28
	';'            reduce using rule 28
	"with"         reduce using rule 28
	"plot"         reduce using rule 28
	"endfor"       reduce using rule 28
	"step"         reduce using rule 28
	"push_back"    reduce using rule 28
	identificador  reduce using rule 28


State 20

	EM -> funcion . '(' EM ')'                          (rule 29)

	'('            shift, and enter state 34


State 21

	EM -> '(' . EM ')'                                  (rule 25)

	'-'            shift, and enter state 16
	int            shift, and enter state 17
	real           shift, and enter state 18
	constmat       shift, and enter state 19
	funcion        shift, and enter state 20
	'('            shift, and enter state 21
	'['            shift, and enter state 22
	"range"        shift, and enter state 23
	"if"           shift, and enter state 24
	identificador  shift, and enter state 25

	EM             goto state 33

State 22

	EM -> '[' . ']'                                     (rule 32)
	EM -> '[' . SECUENCIA_EM ']'                        (rule 33)
	EM -> '[' . EM "for" identificador "in" EM ']'      (rule 35)

	'-'            shift, and enter state 16
	int            shift, and enter state 17
	real           shift, and enter state 18
	constmat       shift, and enter state 19
	funcion        shift, and enter state 20
	'('            shift, and enter state 21
	'['            shift, and enter state 22
	']'            shift, and enter state 32
	"range"        shift, and enter state 23
	"if"           shift, and enter state 24
	identificador  shift, and enter state 25

	EM             goto state 30
	SECUENCIA_EM   goto state 31

State 23

	EM -> "range" . '(' EM ',' EM ')'                   (rule 34)

	'('            shift, and enter state 29


State 24

	EM -> "if" . '(' COND ',' EM ',' EM ')'             (rule 36)

	'('            shift, and enter state 28


State 25

	EM -> identificador . '(' EM ')'                    (rule 30)
	EM -> identificador .                               (rule 31)

	'+'            reduce using rule 31
	'-'            reduce using rule 31
	'*'            reduce using rule 31
	'/'            reduce using rule 31
	'^'            reduce using rule 31
	'('            shift, and enter state 27
	')'            reduce using rule 31
	']'            reduce using rule 31
	','            reduce using rule 31
	"for"          reduce using rule 31
	"AND"          reduce using rule 31
	"OR"           reduce using rule 31
	'<'            reduce using rule 31
	'>'            reduce using rule 31
	">="           reduce using rule 31
	"<="           reduce using rule 31
	"=="           reduce using rule 31
	';'            reduce using rule 31
	"with"         reduce using rule 31
	"plot"         reduce using rule 31
	"endfor"       reduce using rule 31
	"step"         reduce using rule 31
	"push_back"    reduce using rule 31
	identificador  reduce using rule 31


State 26

	SEC_INSTR -> INSTR ';' .                            (rule 1)

	"for"          reduce using rule 1
	"plot"         reduce using rule 1
	"push_back"    reduce using rule 1
	identificador  reduce using rule 1
	%eof           reduce using rule 1


State 27

	EM -> identificador '(' . EM ')'                    (rule 30)

	'-'            shift, and enter state 16
	int            shift, and enter state 17
	real           shift, and enter state 18
	constmat       shift, and enter state 19
	funcion        shift, and enter state 20
	'('            shift, and enter state 21
	'['            shift, and enter state 22
	"range"        shift, and enter state 23
	"if"           shift, and enter state 24
	identificador  shift, and enter state 25

	EM             goto state 67

State 28

	EM -> "if" '(' . COND ',' EM ',' EM ')'             (rule 36)

	'-'            shift, and enter state 16
	int            shift, and enter state 17
	real           shift, and enter state 18
	constmat       shift, and enter state 19
	funcion        shift, and enter state 20
	'('            shift, and enter state 21
	'['            shift, and enter state 22
	"range"        shift, and enter state 23
	"if"           shift, and enter state 24
	"NOT"          shift, and enter state 66
	identificador  shift, and enter state 25

	EM             goto state 64
	COND           goto state 65

State 29

	EM -> "range" '(' . EM ',' EM ')'                   (rule 34)

	'-'            shift, and enter state 16
	int            shift, and enter state 17
	real           shift, and enter state 18
	constmat       shift, and enter state 19
	funcion        shift, and enter state 20
	'('            shift, and enter state 21
	'['            shift, and enter state 22
	"range"        shift, and enter state 23
	"if"           shift, and enter state 24
	identificador  shift, and enter state 25

	EM             goto state 63

State 30

	EM -> EM . '+' EM                                   (rule 19)
	EM -> EM . '-' EM                                   (rule 20)
	EM -> EM . '*' EM                                   (rule 21)
	EM -> EM . '/' EM                                   (rule 22)
	EM -> EM . '^' EM                                   (rule 23)
	EM -> '[' EM . "for" identificador "in" EM ']'      (rule 35)
	SECUENCIA_EM -> EM .                                (rule 37)

	'+'            shift, and enter state 36
	'-'            shift, and enter state 37
	'*'            shift, and enter state 38
	'/'            shift, and enter state 39
	'^'            shift, and enter state 40
	']'            reduce using rule 37
	','            reduce using rule 37
	"for"          shift, and enter state 62


State 31

	EM -> '[' SECUENCIA_EM . ']'                        (rule 33)
	SECUENCIA_EM -> SECUENCIA_EM . ',' EM               (rule 38)

	']'            shift, and enter state 60
	','            shift, and enter state 61


State 32

	EM -> '[' ']' .                                     (rule 32)

	'+'            reduce using rule 32
	'-'            reduce using rule 32
	'*'            reduce using rule 32
	'/'            reduce using rule 32
	'^'            reduce using rule 32
	')'            reduce using rule 32
	']'            reduce using rule 32
	','            reduce using rule 32
	"for"          reduce using rule 32
	"AND"          reduce using rule 32
	"OR"           reduce using rule 32
	'<'            reduce using rule 32
	'>'            reduce using rule 32
	">="           reduce using rule 32
	"<="           reduce using rule 32
	"=="           reduce using rule 32
	';'            reduce using rule 32
	"with"         reduce using rule 32
	"plot"         reduce using rule 32
	"endfor"       reduce using rule 32
	"step"         reduce using rule 32
	"push_back"    reduce using rule 32
	identificador  reduce using rule 32


State 33

	EM -> EM . '+' EM                                   (rule 19)
	EM -> EM . '-' EM                                   (rule 20)
	EM -> EM . '*' EM                                   (rule 21)
	EM -> EM . '/' EM                                   (rule 22)
	EM -> EM . '^' EM                                   (rule 23)
	EM -> '(' EM . ')'                                  (rule 25)

	'+'            shift, and enter state 36
	'-'            shift, and enter state 37
	'*'            shift, and enter state 38
	'/'            shift, and enter state 39
	'^'            shift, and enter state 40
	')'            shift, and enter state 59


State 34

	EM -> funcion '(' . EM ')'                          (rule 29)

	'-'            shift, and enter state 16
	int            shift, and enter state 17
	real           shift, and enter state 18
	constmat       shift, and enter state 19
	funcion        shift, and enter state 20
	'('            shift, and enter state 21
	'['            shift, and enter state 22
	"range"        shift, and enter state 23
	"if"           shift, and enter state 24
	identificador  shift, and enter state 25

	EM             goto state 58

State 35

	EM -> EM . '+' EM                                   (rule 19)
	EM -> EM . '-' EM                                   (rule 20)
	EM -> EM . '*' EM                                   (rule 21)
	EM -> EM . '/' EM                                   (rule 22)
	EM -> EM . '^' EM                                   (rule 23)
	EM -> '-' EM .                                      (rule 24)

	'+'            reduce using rule 24
	'-'            reduce using rule 24
	'*'            shift, and enter state 38
	'/'            shift, and enter state 39
	'^'            shift, and enter state 40
	')'            reduce using rule 24
	']'            reduce using rule 24
	','            reduce using rule 24
	"for"          reduce using rule 24
	"AND"          reduce using rule 24
	"OR"           reduce using rule 24
	'<'            reduce using rule 24
	'>'            reduce using rule 24
	">="           reduce using rule 24
	"<="           reduce using rule 24
	"=="           reduce using rule 24
	';'            reduce using rule 24
	"with"         reduce using rule 24
	"plot"         reduce using rule 24
	"endfor"       reduce using rule 24
	"step"         reduce using rule 24
	"push_back"    reduce using rule 24
	identificador  reduce using rule 24


State 36

	EM -> EM '+' . EM                                   (rule 19)

	'-'            shift, and enter state 16
	int            shift, and enter state 17
	real           shift, and enter state 18
	constmat       shift, and enter state 19
	funcion        shift, and enter state 20
	'('            shift, and enter state 21
	'['            shift, and enter state 22
	"range"        shift, and enter state 23
	"if"           shift, and enter state 24
	identificador  shift, and enter state 25

	EM             goto state 57

State 37

	EM -> EM '-' . EM                                   (rule 20)

	'-'            shift, and enter state 16
	int            shift, and enter state 17
	real           shift, and enter state 18
	constmat       shift, and enter state 19
	funcion        shift, and enter state 20
	'('            shift, and enter state 21
	'['            shift, and enter state 22
	"range"        shift, and enter state 23
	"if"           shift, and enter state 24
	identificador  shift, and enter state 25

	EM             goto state 56

State 38

	EM -> EM '*' . EM                                   (rule 21)

	'-'            shift, and enter state 16
	int            shift, and enter state 17
	real           shift, and enter state 18
	constmat       shift, and enter state 19
	funcion        shift, and enter state 20
	'('            shift, and enter state 21
	'['            shift, and enter state 22
	"range"        shift, and enter state 23
	"if"           shift, and enter state 24
	identificador  shift, and enter state 25

	EM             goto state 55

State 39

	EM -> EM '/' . EM                                   (rule 22)

	'-'            shift, and enter state 16
	int            shift, and enter state 17
	real           shift, and enter state 18
	constmat       shift, and enter state 19
	funcion        shift, and enter state 20
	'('            shift, and enter state 21
	'['            shift, and enter state 22
	"range"        shift, and enter state 23
	"if"           shift, and enter state 24
	identificador  shift, and enter state 25

	EM             goto state 54

State 40

	EM -> EM '^' . EM                                   (rule 23)

	'-'            shift, and enter state 16
	int            shift, and enter state 17
	real           shift, and enter state 18
	constmat       shift, and enter state 19
	funcion        shift, and enter state 20
	'('            shift, and enter state 21
	'['            shift, and enter state 22
	"range"        shift, and enter state 23
	"if"           shift, and enter state 24
	identificador  shift, and enter state 25

	EM             goto state 53

State 41

	INSTR -> "plot" EM ',' . EG "with" '[' ']'          (rule 7)
	INSTR -> "plot" EM ',' . EG "with" '[' SECUENCIA_ESTILO ']'    (rule 8)
	INSTR -> "plot" EM ',' . EG "with" estilo           (rule 9)
	INSTR -> "plot" EM ',' . EG                         (rule 10)

	'-'            shift, and enter state 16
	int            shift, and enter state 17
	real           shift, and enter state 18
	constmat       shift, and enter state 19
	funcion        shift, and enter state 20
	'('            shift, and enter state 21
	'['            shift, and enter state 22
	"range"        shift, and enter state 23
	"if"           shift, and enter state 24
	identificador  shift, and enter state 25
	archivo        shift, and enter state 52

	EM             goto state 50
	EG             goto state 51

State 42

	INSTR -> "push_back" '(' identificador . ',' EM ')'    (rule 11)

	','            shift, and enter state 49


State 43

	INSTR -> identificador '=' EM .                     (rule 6)
	EM -> EM . '+' EM                                   (rule 19)
	EM -> EM . '-' EM                                   (rule 20)
	EM -> EM . '*' EM                                   (rule 21)
	EM -> EM . '/' EM                                   (rule 22)
	EM -> EM . '^' EM                                   (rule 23)

	'+'            shift, and enter state 36
	'-'            shift, and enter state 37
	'*'            shift, and enter state 38
	'/'            shift, and enter state 39
	'^'            shift, and enter state 40
	';'            reduce using rule 6
	"endfor"       reduce using rule 6


State 44

	INSTR -> identificador '(' identificador . ')' '=' EM    (rule 5)

	')'            shift, and enter state 48


State 45

	SEC_INSTR -> SEC_INSTR INSTR ';' .                  (rule 3)

	"for"          reduce using rule 3
	"plot"         reduce using rule 3
	"push_back"    reduce using rule 3
	identificador  reduce using rule 3
	%eof           reduce using rule 3


State 46

	CICLO -> "for" identificador "in" . EM SEC_INSTR_CICLO "endfor"    (rule 12)
	CICLO -> "for" identificador "in" . EM "step" int SEC_INSTR_CICLO "endfor"    (rule 13)

	'-'            shift, and enter state 16
	int            shift, and enter state 17
	real           shift, and enter state 18
	constmat       shift, and enter state 19
	funcion        shift, and enter state 20
	'('            shift, and enter state 21
	'['            shift, and enter state 22
	"range"        shift, and enter state 23
	"if"           shift, and enter state 24
	identificador  shift, and enter state 25

	EM             goto state 47

State 47

	CICLO -> "for" identificador "in" EM . SEC_INSTR_CICLO "endfor"    (rule 12)
	CICLO -> "for" identificador "in" EM . "step" int SEC_INSTR_CICLO "endfor"    (rule 13)
	EM -> EM . '+' EM                                   (rule 19)
	EM -> EM . '-' EM                                   (rule 20)
	EM -> EM . '*' EM                                   (rule 21)
	EM -> EM . '/' EM                                   (rule 22)
	EM -> EM . '^' EM                                   (rule 23)

	'+'            shift, and enter state 36
	'-'            shift, and enter state 37
	'*'            shift, and enter state 38
	'/'            shift, and enter state 39
	'^'            shift, and enter state 40
	"for"          shift, and enter state 8
	"plot"         shift, and enter state 3
	"step"         shift, and enter state 88
	"push_back"    shift, and enter state 4
	identificador  shift, and enter state 5

	INSTR          goto state 85
	CICLO          goto state 86
	SEC_INSTR_CICLOgoto state 87

State 48

	INSTR -> identificador '(' identificador ')' . '=' EM    (rule 5)

	'='            shift, and enter state 84


State 49

	INSTR -> "push_back" '(' identificador ',' . EM ')'    (rule 11)

	'-'            shift, and enter state 16
	int            shift, and enter state 17
	real           shift, and enter state 18
	constmat       shift, and enter state 19
	funcion        shift, and enter state 20
	'('            shift, and enter state 21
	'['            shift, and enter state 22
	"range"        shift, and enter state 23
	"if"           shift, and enter state 24
	identificador  shift, and enter state 25

	EM             goto state 83

State 50

	EM -> EM . '+' EM                                   (rule 19)
	EM -> EM . '-' EM                                   (rule 20)
	EM -> EM . '*' EM                                   (rule 21)
	EM -> EM . '/' EM                                   (rule 22)
	EM -> EM . '^' EM                                   (rule 23)
	EG -> EM .                                          (rule 48)

	'+'            shift, and enter state 36
	'-'            shift, and enter state 37
	'*'            shift, and enter state 38
	'/'            shift, and enter state 39
	'^'            shift, and enter state 40
	';'            reduce using rule 48
	"with"         reduce using rule 48
	"endfor"       reduce using rule 48


State 51

	INSTR -> "plot" EM ',' EG . "with" '[' ']'          (rule 7)
	INSTR -> "plot" EM ',' EG . "with" '[' SECUENCIA_ESTILO ']'    (rule 8)
	INSTR -> "plot" EM ',' EG . "with" estilo           (rule 9)
	INSTR -> "plot" EM ',' EG .                         (rule 10)

	';'            reduce using rule 10
	"with"         shift, and enter state 82
	"endfor"       reduce using rule 10


State 52

	EG -> archivo .                                     (rule 49)

	';'            reduce using rule 49
	"with"         reduce using rule 49
	"endfor"       reduce using rule 49


State 53

	EM -> EM . '+' EM                                   (rule 19)
	EM -> EM . '-' EM                                   (rule 20)
	EM -> EM . '*' EM                                   (rule 21)
	EM -> EM . '/' EM                                   (rule 22)
	EM -> EM . '^' EM                                   (rule 23)
	EM -> EM '^' EM .                                   (rule 23)

	'+'            reduce using rule 23
	'-'            reduce using rule 23
	'*'            reduce using rule 23
	'/'            reduce using rule 23
	'^'            shift, and enter state 40
	')'            reduce using rule 23
	']'            reduce using rule 23
	','            reduce using rule 23
	"for"          reduce using rule 23
	"AND"          reduce using rule 23
	"OR"           reduce using rule 23
	'<'            reduce using rule 23
	'>'            reduce using rule 23
	">="           reduce using rule 23
	"<="           reduce using rule 23
	"=="           reduce using rule 23
	';'            reduce using rule 23
	"with"         reduce using rule 23
	"plot"         reduce using rule 23
	"endfor"       reduce using rule 23
	"step"         reduce using rule 23
	"push_back"    reduce using rule 23
	identificador  reduce using rule 23


State 54

	EM -> EM . '+' EM                                   (rule 19)
	EM -> EM . '-' EM                                   (rule 20)
	EM -> EM . '*' EM                                   (rule 21)
	EM -> EM . '/' EM                                   (rule 22)
	EM -> EM '/' EM .                                   (rule 22)
	EM -> EM . '^' EM                                   (rule 23)

	'+'            reduce using rule 22
	'-'            reduce using rule 22
	'*'            reduce using rule 22
	'/'            reduce using rule 22
	'^'            shift, and enter state 40
	')'            reduce using rule 22
	']'            reduce using rule 22
	','            reduce using rule 22
	"for"          reduce using rule 22
	"AND"          reduce using rule 22
	"OR"           reduce using rule 22
	'<'            reduce using rule 22
	'>'            reduce using rule 22
	">="           reduce using rule 22
	"<="           reduce using rule 22
	"=="           reduce using rule 22
	';'            reduce using rule 22
	"with"         reduce using rule 22
	"plot"         reduce using rule 22
	"endfor"       reduce using rule 22
	"step"         reduce using rule 22
	"push_back"    reduce using rule 22
	identificador  reduce using rule 22


State 55

	EM -> EM . '+' EM                                   (rule 19)
	EM -> EM . '-' EM                                   (rule 20)
	EM -> EM . '*' EM                                   (rule 21)
	EM -> EM '*' EM .                                   (rule 21)
	EM -> EM . '/' EM                                   (rule 22)
	EM -> EM . '^' EM                                   (rule 23)

	'+'            reduce using rule 21
	'-'            reduce using rule 21
	'*'            reduce using rule 21
	'/'            reduce using rule 21
	'^'            shift, and enter state 40
	')'            reduce using rule 21
	']'            reduce using rule 21
	','            reduce using rule 21
	"for"          reduce using rule 21
	"AND"          reduce using rule 21
	"OR"           reduce using rule 21
	'<'            reduce using rule 21
	'>'            reduce using rule 21
	">="           reduce using rule 21
	"<="           reduce using rule 21
	"=="           reduce using rule 21
	';'            reduce using rule 21
	"with"         reduce using rule 21
	"plot"         reduce using rule 21
	"endfor"       reduce using rule 21
	"step"         reduce using rule 21
	"push_back"    reduce using rule 21
	identificador  reduce using rule 21


State 56

	EM -> EM . '+' EM                                   (rule 19)
	EM -> EM . '-' EM                                   (rule 20)
	EM -> EM '-' EM .                                   (rule 20)
	EM -> EM . '*' EM                                   (rule 21)
	EM -> EM . '/' EM                                   (rule 22)
	EM -> EM . '^' EM                                   (rule 23)

	'+'            reduce using rule 20
	'-'            reduce using rule 20
	'*'            shift, and enter state 38
	'/'            shift, and enter state 39
	'^'            shift, and enter state 40
	')'            reduce using rule 20
	']'            reduce using rule 20
	','            reduce using rule 20
	"for"          reduce using rule 20
	"AND"          reduce using rule 20
	"OR"           reduce using rule 20
	'<'            reduce using rule 20
	'>'            reduce using rule 20
	">="           reduce using rule 20
	"<="           reduce using rule 20
	"=="           reduce using rule 20
	';'            reduce using rule 20
	"with"         reduce using rule 20
	"plot"         reduce using rule 20
	"endfor"       reduce using rule 20
	"step"         reduce using rule 20
	"push_back"    reduce using rule 20
	identificador  reduce using rule 20


State 57

	EM -> EM . '+' EM                                   (rule 19)
	EM -> EM '+' EM .                                   (rule 19)
	EM -> EM . '-' EM                                   (rule 20)
	EM -> EM . '*' EM                                   (rule 21)
	EM -> EM . '/' EM                                   (rule 22)
	EM -> EM . '^' EM                                   (rule 23)

	'+'            reduce using rule 19
	'-'            reduce using rule 19
	'*'            shift, and enter state 38
	'/'            shift, and enter state 39
	'^'            shift, and enter state 40
	')'            reduce using rule 19
	']'            reduce using rule 19
	','            reduce using rule 19
	"for"          reduce using rule 19
	"AND"          reduce using rule 19
	"OR"           reduce using rule 19
	'<'            reduce using rule 19
	'>'            reduce using rule 19
	">="           reduce using rule 19
	"<="           reduce using rule 19
	"=="           reduce using rule 19
	';'            reduce using rule 19
	"with"         reduce using rule 19
	"plot"         reduce using rule 19
	"endfor"       reduce using rule 19
	"step"         reduce using rule 19
	"push_back"    reduce using rule 19
	identificador  reduce using rule 19


State 58

	EM -> EM . '+' EM                                   (rule 19)
	EM -> EM . '-' EM                                   (rule 20)
	EM -> EM . '*' EM                                   (rule 21)
	EM -> EM . '/' EM                                   (rule 22)
	EM -> EM . '^' EM                                   (rule 23)
	EM -> funcion '(' EM . ')'                          (rule 29)

	'+'            shift, and enter state 36
	'-'            shift, and enter state 37
	'*'            shift, and enter state 38
	'/'            shift, and enter state 39
	'^'            shift, and enter state 40
	')'            shift, and enter state 81


State 59

	EM -> '(' EM ')' .                                  (rule 25)

	'+'            reduce using rule 25
	'-'            reduce using rule 25
	'*'            reduce using rule 25
	'/'            reduce using rule 25
	'^'            reduce using rule 25
	')'            reduce using rule 25
	']'            reduce using rule 25
	','            reduce using rule 25
	"for"          reduce using rule 25
	"AND"          reduce using rule 25
	"OR"           reduce using rule 25
	'<'            reduce using rule 25
	'>'            reduce using rule 25
	">="           reduce using rule 25
	"<="           reduce using rule 25
	"=="           reduce using rule 25
	';'            reduce using rule 25
	"with"         reduce using rule 25
	"plot"         reduce using rule 25
	"endfor"       reduce using rule 25
	"step"         reduce using rule 25
	"push_back"    reduce using rule 25
	identificador  reduce using rule 25


State 60

	EM -> '[' SECUENCIA_EM ']' .                        (rule 33)

	'+'            reduce using rule 33
	'-'            reduce using rule 33
	'*'            reduce using rule 33
	'/'            reduce using rule 33
	'^'            reduce using rule 33
	')'            reduce using rule 33
	']'            reduce using rule 33
	','            reduce using rule 33
	"for"          reduce using rule 33
	"AND"          reduce using rule 33
	"OR"           reduce using rule 33
	'<'            reduce using rule 33
	'>'            reduce using rule 33
	">="           reduce using rule 33
	"<="           reduce using rule 33
	"=="           reduce using rule 33
	';'            reduce using rule 33
	"with"         reduce using rule 33
	"plot"         reduce using rule 33
	"endfor"       reduce using rule 33
	"step"         reduce using rule 33
	"push_back"    reduce using rule 33
	identificador  reduce using rule 33


State 61

	SECUENCIA_EM -> SECUENCIA_EM ',' . EM               (rule 38)

	'-'            shift, and enter state 16
	int            shift, and enter state 17
	real           shift, and enter state 18
	constmat       shift, and enter state 19
	funcion        shift, and enter state 20
	'('            shift, and enter state 21
	'['            shift, and enter state 22
	"range"        shift, and enter state 23
	"if"           shift, and enter state 24
	identificador  shift, and enter state 25

	EM             goto state 80

State 62

	EM -> '[' EM "for" . identificador "in" EM ']'      (rule 35)

	identificador  shift, and enter state 79


State 63

	EM -> EM . '+' EM                                   (rule 19)
	EM -> EM . '-' EM                                   (rule 20)
	EM -> EM . '*' EM                                   (rule 21)
	EM -> EM . '/' EM                                   (rule 22)
	EM -> EM . '^' EM                                   (rule 23)
	EM -> "range" '(' EM . ',' EM ')'                   (rule 34)

	'+'            shift, and enter state 36
	'-'            shift, and enter state 37
	'*'            shift, and enter state 38
	'/'            shift, and enter state 39
	'^'            shift, and enter state 40
	','            shift, and enter state 78


State 64

	EM -> EM . '+' EM                                   (rule 19)
	EM -> EM . '-' EM                                   (rule 20)
	EM -> EM . '*' EM                                   (rule 21)
	EM -> EM . '/' EM                                   (rule 22)
	EM -> EM . '^' EM                                   (rule 23)
	COND -> EM .                                        (rule 39)
	COND -> EM . '>' EM                                 (rule 43)
	COND -> EM . '<' EM                                 (rule 44)
	COND -> EM . "<=" EM                                (rule 45)
	COND -> EM . ">=" EM                                (rule 46)
	COND -> EM . "==" EM                                (rule 47)

	'+'            shift, and enter state 36
	'-'            shift, and enter state 37
	'*'            shift, and enter state 38
	'/'            shift, and enter state 39
	'^'            shift, and enter state 40
	','            reduce using rule 39
	"AND"          reduce using rule 39
	"OR"           reduce using rule 39
	'<'            shift, and enter state 73
	'>'            shift, and enter state 74
	">="           shift, and enter state 75
	"<="           shift, and enter state 76
	"=="           shift, and enter state 77


State 65

	EM -> "if" '(' COND . ',' EM ',' EM ')'             (rule 36)
	COND -> COND . "AND" COND                           (rule 40)
	COND -> COND . "OR" COND                            (rule 41)

	','            shift, and enter state 70
	"AND"          shift, and enter state 71
	"OR"           shift, and enter state 72


State 66

	COND -> "NOT" . COND                                (rule 42)

	'-'            shift, and enter state 16
	int            shift, and enter state 17
	real           shift, and enter state 18
	constmat       shift, and enter state 19
	funcion        shift, and enter state 20
	'('            shift, and enter state 21
	'['            shift, and enter state 22
	"range"        shift, and enter state 23
	"if"           shift, and enter state 24
	"NOT"          shift, and enter state 66
	identificador  shift, and enter state 25

	EM             goto state 64
	COND           goto state 69

State 67

	EM -> EM . '+' EM                                   (rule 19)
	EM -> EM . '-' EM                                   (rule 20)
	EM -> EM . '*' EM                                   (rule 21)
	EM -> EM . '/' EM                                   (rule 22)
	EM -> EM . '^' EM                                   (rule 23)
	EM -> identificador '(' EM . ')'                    (rule 30)

	'+'            shift, and enter state 36
	'-'            shift, and enter state 37
	'*'            shift, and enter state 38
	'/'            shift, and enter state 39
	'^'            shift, and enter state 40
	')'            shift, and enter state 68


State 68

	EM -> identificador '(' EM ')' .                    (rule 30)

	'+'            reduce using rule 30
	'-'            reduce using rule 30
	'*'            reduce using rule 30
	'/'            reduce using rule 30
	'^'            reduce using rule 30
	')'            reduce using rule 30
	']'            reduce using rule 30
	','            reduce using rule 30
	"for"          reduce using rule 30
	"AND"          reduce using rule 30
	"OR"           reduce using rule 30
	'<'            reduce using rule 30
	'>'            reduce using rule 30
	">="           reduce using rule 30
	"<="           reduce using rule 30
	"=="           reduce using rule 30
	';'            reduce using rule 30
	"with"         reduce using rule 30
	"plot"         reduce using rule 30
	"endfor"       reduce using rule 30
	"step"         reduce using rule 30
	"push_back"    reduce using rule 30
	identificador  reduce using rule 30


State 69

	COND -> COND . "AND" COND                           (rule 40)
	COND -> COND . "OR" COND                            (rule 41)
	COND -> "NOT" COND .                                (rule 42)

	','            reduce using rule 42
	"AND"          reduce using rule 42
	"OR"           reduce using rule 42


State 70

	EM -> "if" '(' COND ',' . EM ',' EM ')'             (rule 36)

	'-'            shift, and enter state 16
	int            shift, and enter state 17
	real           shift, and enter state 18
	constmat       shift, and enter state 19
	funcion        shift, and enter state 20
	'('            shift, and enter state 21
	'['            shift, and enter state 22
	"range"        shift, and enter state 23
	"if"           shift, and enter state 24
	identificador  shift, and enter state 25

	EM             goto state 105

State 71

	COND -> COND "AND" . COND                           (rule 40)

	'-'            shift, and enter state 16
	int            shift, and enter state 17
	real           shift, and enter state 18
	constmat       shift, and enter state 19
	funcion        shift, and enter state 20
	'('            shift, and enter state 21
	'['            shift, and enter state 22
	"range"        shift, and enter state 23
	"if"           shift, and enter state 24
	"NOT"          shift, and enter state 66
	identificador  shift, and enter state 25

	EM             goto state 64
	COND           goto state 104

State 72

	COND -> COND "OR" . COND                            (rule 41)

	'-'            shift, and enter state 16
	int            shift, and enter state 17
	real           shift, and enter state 18
	constmat       shift, and enter state 19
	funcion        shift, and enter state 20
	'('            shift, and enter state 21
	'['            shift, and enter state 22
	"range"        shift, and enter state 23
	"if"           shift, and enter state 24
	"NOT"          shift, and enter state 66
	identificador  shift, and enter state 25

	EM             goto state 64
	COND           goto state 103

State 73

	COND -> EM '<' . EM                                 (rule 44)

	'-'            shift, and enter state 16
	int            shift, and enter state 17
	real           shift, and enter state 18
	constmat       shift, and enter state 19
	funcion        shift, and enter state 20
	'('            shift, and enter state 21
	'['            shift, and enter state 22
	"range"        shift, and enter state 23
	"if"           shift, and enter state 24
	identificador  shift, and enter state 25

	EM             goto state 102

State 74

	COND -> EM '>' . EM                                 (rule 43)

	'-'            shift, and enter state 16
	int            shift, and enter state 17
	real           shift, and enter state 18
	constmat       shift, and enter state 19
	funcion        shift, and enter state 20
	'('            shift, and enter state 21
	'['            shift, and enter state 22
	"range"        shift, and enter state 23
	"if"           shift, and enter state 24
	identificador  shift, and enter state 25

	EM             goto state 101

State 75

	COND -> EM ">=" . EM                                (rule 46)

	'-'            shift, and enter state 16
	int            shift, and enter state 17
	real           shift, and enter state 18
	constmat       shift, and enter state 19
	funcion        shift, and enter state 20
	'('            shift, and enter state 21
	'['            shift, and enter state 22
	"range"        shift, and enter state 23
	"if"           shift, and enter state 24
	identificador  shift, and enter state 25

	EM             goto state 100

State 76

	COND -> EM "<=" . EM                                (rule 45)

	'-'            shift, and enter state 16
	int            shift, and enter state 17
	real           shift, and enter state 18
	constmat       shift, and enter state 19
	funcion        shift, and enter state 20
	'('            shift, and enter state 21
	'['            shift, and enter state 22
	"range"        shift, and enter state 23
	"if"           shift, and enter state 24
	identificador  shift, and enter state 25

	EM             goto state 99

State 77

	COND -> EM "==" . EM                                (rule 47)

	'-'            shift, and enter state 16
	int            shift, and enter state 17
	real           shift, and enter state 18
	constmat       shift, and enter state 19
	funcion        shift, and enter state 20
	'('            shift, and enter state 21
	'['            shift, and enter state 22
	"range"        shift, and enter state 23
	"if"           shift, and enter state 24
	identificador  shift, and enter state 25

	EM             goto state 98

State 78

	EM -> "range" '(' EM ',' . EM ')'                   (rule 34)

	'-'            shift, and enter state 16
	int            shift, and enter state 17
	real           shift, and enter state 18
	constmat       shift, and enter state 19
	funcion        shift, and enter state 20
	'('            shift, and enter state 21
	'['            shift, and enter state 22
	"range"        shift, and enter state 23
	"if"           shift, and enter state 24
	identificador  shift, and enter state 25

	EM             goto state 97

State 79

	EM -> '[' EM "for" identificador . "in" EM ']'      (rule 35)

	"in"           shift, and enter state 96


State 80

	EM -> EM . '+' EM                                   (rule 19)
	EM -> EM . '-' EM                                   (rule 20)
	EM -> EM . '*' EM                                   (rule 21)
	EM -> EM . '/' EM                                   (rule 22)
	EM -> EM . '^' EM                                   (rule 23)
	SECUENCIA_EM -> SECUENCIA_EM ',' EM .               (rule 38)

	'+'            shift, and enter state 36
	'-'            shift, and enter state 37
	'*'            shift, and enter state 38
	'/'            shift, and enter state 39
	'^'            shift, and enter state 40
	']'            reduce using rule 38
	','            reduce using rule 38


State 81

	EM -> funcion '(' EM ')' .                          (rule 29)

	'+'            reduce using rule 29
	'-'            reduce using rule 29
	'*'            reduce using rule 29
	'/'            reduce using rule 29
	'^'            reduce using rule 29
	')'            reduce using rule 29
	']'            reduce using rule 29
	','            reduce using rule 29
	"for"          reduce using rule 29
	"AND"          reduce using rule 29
	"OR"           reduce using rule 29
	'<'            reduce using rule 29
	'>'            reduce using rule 29
	">="           reduce using rule 29
	"<="           reduce using rule 29
	"=="           reduce using rule 29
	';'            reduce using rule 29
	"with"         reduce using rule 29
	"plot"         reduce using rule 29
	"endfor"       reduce using rule 29
	"step"         reduce using rule 29
	"push_back"    reduce using rule 29
	identificador  reduce using rule 29


State 82

	INSTR -> "plot" EM ',' EG "with" . '[' ']'          (rule 7)
	INSTR -> "plot" EM ',' EG "with" . '[' SECUENCIA_ESTILO ']'    (rule 8)
	INSTR -> "plot" EM ',' EG "with" . estilo           (rule 9)

	'['            shift, and enter state 94
	estilo         shift, and enter state 95


State 83

	INSTR -> "push_back" '(' identificador ',' EM . ')'    (rule 11)
	EM -> EM . '+' EM                                   (rule 19)
	EM -> EM . '-' EM                                   (rule 20)
	EM -> EM . '*' EM                                   (rule 21)
	EM -> EM . '/' EM                                   (rule 22)
	EM -> EM . '^' EM                                   (rule 23)

	'+'            shift, and enter state 36
	'-'            shift, and enter state 37
	'*'            shift, and enter state 38
	'/'            shift, and enter state 39
	'^'            shift, and enter state 40
	')'            shift, and enter state 93


State 84

	INSTR -> identificador '(' identificador ')' '=' . EM    (rule 5)

	'-'            shift, and enter state 16
	int            shift, and enter state 17
	real           shift, and enter state 18
	constmat       shift, and enter state 19
	funcion        shift, and enter state 20
	'('            shift, and enter state 21
	'['            shift, and enter state 22
	"range"        shift, and enter state 23
	"if"           shift, and enter state 24
	identificador  shift, and enter state 25

	EM             goto state 92

State 85

	SEC_INSTR_CICLO -> INSTR .                          (rule 14)

	';'            reduce using rule 14
	"endfor"       reduce using rule 14


State 86

	SEC_INSTR_CICLO -> CICLO .                          (rule 15)

	';'            reduce using rule 15
	"endfor"       reduce using rule 15


State 87

	CICLO -> "for" identificador "in" EM SEC_INSTR_CICLO . "endfor"    (rule 12)
	SEC_INSTR_CICLO -> SEC_INSTR_CICLO . ';' INSTR      (rule 16)

	';'            shift, and enter state 90
	"endfor"       shift, and enter state 91


State 88

	CICLO -> "for" identificador "in" EM "step" . int SEC_INSTR_CICLO "endfor"    (rule 13)

	int            shift, and enter state 89


State 89

	CICLO -> "for" identificador "in" EM "step" int . SEC_INSTR_CICLO "endfor"    (rule 13)

	"for"          shift, and enter state 8
	"plot"         shift, and enter state 3
	"push_back"    shift, and enter state 4
	identificador  shift, and enter state 5

	INSTR          goto state 85
	CICLO          goto state 86
	SEC_INSTR_CICLOgoto state 113

State 90

	SEC_INSTR_CICLO -> SEC_INSTR_CICLO ';' . INSTR      (rule 16)

	"plot"         shift, and enter state 3
	"push_back"    shift, and enter state 4
	identificador  shift, and enter state 5

	INSTR          goto state 112

State 91

	CICLO -> "for" identificador "in" EM SEC_INSTR_CICLO "endfor" .    (rule 12)

	"for"          reduce using rule 12
	';'            reduce using rule 12
	"plot"         reduce using rule 12
	"endfor"       reduce using rule 12
	"push_back"    reduce using rule 12
	identificador  reduce using rule 12
	%eof           reduce using rule 12


State 92

	INSTR -> identificador '(' identificador ')' '=' EM .    (rule 5)
	EM -> EM . '+' EM                                   (rule 19)
	EM -> EM . '-' EM                                   (rule 20)
	EM -> EM . '*' EM                                   (rule 21)
	EM -> EM . '/' EM                                   (rule 22)
	EM -> EM . '^' EM                                   (rule 23)

	'+'            shift, and enter state 36
	'-'            shift, and enter state 37
	'*'            shift, and enter state 38
	'/'            shift, and enter state 39
	'^'            shift, and enter state 40
	';'            reduce using rule 5
	"endfor"       reduce using rule 5


State 93

	INSTR -> "push_back" '(' identificador ',' EM ')' .    (rule 11)

	';'            reduce using rule 11
	"endfor"       reduce using rule 11


State 94

	INSTR -> "plot" EM ',' EG "with" '[' . ']'          (rule 7)
	INSTR -> "plot" EM ',' EG "with" '[' . SECUENCIA_ESTILO ']'    (rule 8)

	']'            shift, and enter state 110
	estilo         shift, and enter state 111

	SECUENCIA_ESTILOgoto state 109

State 95

	INSTR -> "plot" EM ',' EG "with" estilo .           (rule 9)

	';'            reduce using rule 9
	"endfor"       reduce using rule 9


State 96

	EM -> '[' EM "for" identificador "in" . EM ']'      (rule 35)

	'-'            shift, and enter state 16
	int            shift, and enter state 17
	real           shift, and enter state 18
	constmat       shift, and enter state 19
	funcion        shift, and enter state 20
	'('            shift, and enter state 21
	'['            shift, and enter state 22
	"range"        shift, and enter state 23
	"if"           shift, and enter state 24
	identificador  shift, and enter state 25

	EM             goto state 108

State 97

	EM -> EM . '+' EM                                   (rule 19)
	EM -> EM . '-' EM                                   (rule 20)
	EM -> EM . '*' EM                                   (rule 21)
	EM -> EM . '/' EM                                   (rule 22)
	EM -> EM . '^' EM                                   (rule 23)
	EM -> "range" '(' EM ',' EM . ')'                   (rule 34)

	'+'            shift, and enter state 36
	'-'            shift, and enter state 37
	'*'            shift, and enter state 38
	'/'            shift, and enter state 39
	'^'            shift, and enter state 40
	')'            shift, and enter state 107


State 98

	EM -> EM . '+' EM                                   (rule 19)
	EM -> EM . '-' EM                                   (rule 20)
	EM -> EM . '*' EM                                   (rule 21)
	EM -> EM . '/' EM                                   (rule 22)
	EM -> EM . '^' EM                                   (rule 23)
	COND -> EM "==" EM .                                (rule 47)

	'+'            shift, and enter state 36
	'-'            shift, and enter state 37
	'*'            shift, and enter state 38
	'/'            shift, and enter state 39
	'^'            shift, and enter state 40
	','            reduce using rule 47
	"AND"          reduce using rule 47
	"OR"           reduce using rule 47


State 99

	EM -> EM . '+' EM                                   (rule 19)
	EM -> EM . '-' EM                                   (rule 20)
	EM -> EM . '*' EM                                   (rule 21)
	EM -> EM . '/' EM                                   (rule 22)
	EM -> EM . '^' EM                                   (rule 23)
	COND -> EM "<=" EM .                                (rule 45)

	'+'            shift, and enter state 36
	'-'            shift, and enter state 37
	'*'            shift, and enter state 38
	'/'            shift, and enter state 39
	'^'            shift, and enter state 40
	','            reduce using rule 45
	"AND"          reduce using rule 45
	"OR"           reduce using rule 45


State 100

	EM -> EM . '+' EM                                   (rule 19)
	EM -> EM . '-' EM                                   (rule 20)
	EM -> EM . '*' EM                                   (rule 21)
	EM -> EM . '/' EM                                   (rule 22)
	EM -> EM . '^' EM                                   (rule 23)
	COND -> EM ">=" EM .                                (rule 46)

	'+'            shift, and enter state 36
	'-'            shift, and enter state 37
	'*'            shift, and enter state 38
	'/'            shift, and enter state 39
	'^'            shift, and enter state 40
	','            reduce using rule 46
	"AND"          reduce using rule 46
	"OR"           reduce using rule 46


State 101

	EM -> EM . '+' EM                                   (rule 19)
	EM -> EM . '-' EM                                   (rule 20)
	EM -> EM . '*' EM                                   (rule 21)
	EM -> EM . '/' EM                                   (rule 22)
	EM -> EM . '^' EM                                   (rule 23)
	COND -> EM '>' EM .                                 (rule 43)

	'+'            shift, and enter state 36
	'-'            shift, and enter state 37
	'*'            shift, and enter state 38
	'/'            shift, and enter state 39
	'^'            shift, and enter state 40
	','            reduce using rule 43
	"AND"          reduce using rule 43
	"OR"           reduce using rule 43


State 102

	EM -> EM . '+' EM                                   (rule 19)
	EM -> EM . '-' EM                                   (rule 20)
	EM -> EM . '*' EM                                   (rule 21)
	EM -> EM . '/' EM                                   (rule 22)
	EM -> EM . '^' EM                                   (rule 23)
	COND -> EM '<' EM .                                 (rule 44)

	'+'            shift, and enter state 36
	'-'            shift, and enter state 37
	'*'            shift, and enter state 38
	'/'            shift, and enter state 39
	'^'            shift, and enter state 40
	','            reduce using rule 44
	"AND"          reduce using rule 44
	"OR"           reduce using rule 44


State 103

	COND -> COND . "AND" COND                           (rule 40)
	COND -> COND . "OR" COND                            (rule 41)
	COND -> COND "OR" COND .                            (rule 41)

	','            reduce using rule 41
	"AND"          shift, and enter state 71
	"OR"           reduce using rule 41


State 104

	COND -> COND . "AND" COND                           (rule 40)
	COND -> COND "AND" COND .                           (rule 40)
	COND -> COND . "OR" COND                            (rule 41)

	','            reduce using rule 40
	"AND"          reduce using rule 40
	"OR"           reduce using rule 40


State 105

	EM -> EM . '+' EM                                   (rule 19)
	EM -> EM . '-' EM                                   (rule 20)
	EM -> EM . '*' EM                                   (rule 21)
	EM -> EM . '/' EM                                   (rule 22)
	EM -> EM . '^' EM                                   (rule 23)
	EM -> "if" '(' COND ',' EM . ',' EM ')'             (rule 36)

	'+'            shift, and enter state 36
	'-'            shift, and enter state 37
	'*'            shift, and enter state 38
	'/'            shift, and enter state 39
	'^'            shift, and enter state 40
	','            shift, and enter state 106


State 106

	EM -> "if" '(' COND ',' EM ',' . EM ')'             (rule 36)

	'-'            shift, and enter state 16
	int            shift, and enter state 17
	real           shift, and enter state 18
	constmat       shift, and enter state 19
	funcion        shift, and enter state 20
	'('            shift, and enter state 21
	'['            shift, and enter state 22
	"range"        shift, and enter state 23
	"if"           shift, and enter state 24
	identificador  shift, and enter state 25

	EM             goto state 118

State 107

	EM -> "range" '(' EM ',' EM ')' .                   (rule 34)

	'+'            reduce using rule 34
	'-'            reduce using rule 34
	'*'            reduce using rule 34
	'/'            reduce using rule 34
	'^'            reduce using rule 34
	')'            reduce using rule 34
	']'            reduce using rule 34
	','            reduce using rule 34
	"for"          reduce using rule 34
	"AND"          reduce using rule 34
	"OR"           reduce using rule 34
	'<'            reduce using rule 34
	'>'            reduce using rule 34
	">="           reduce using rule 34
	"<="           reduce using rule 34
	"=="           reduce using rule 34
	';'            reduce using rule 34
	"with"         reduce using rule 34
	"plot"         reduce using rule 34
	"endfor"       reduce using rule 34
	"step"         reduce using rule 34
	"push_back"    reduce using rule 34
	identificador  reduce using rule 34


State 108

	EM -> EM . '+' EM                                   (rule 19)
	EM -> EM . '-' EM                                   (rule 20)
	EM -> EM . '*' EM                                   (rule 21)
	EM -> EM . '/' EM                                   (rule 22)
	EM -> EM . '^' EM                                   (rule 23)
	EM -> '[' EM "for" identificador "in" EM . ']'      (rule 35)

	'+'            shift, and enter state 36
	'-'            shift, and enter state 37
	'*'            shift, and enter state 38
	'/'            shift, and enter state 39
	'^'            shift, and enter state 40
	']'            shift, and enter state 117


State 109

	INSTR -> "plot" EM ',' EG "with" '[' SECUENCIA_ESTILO . ']'    (rule 8)
	SECUENCIA_ESTILO -> SECUENCIA_ESTILO . ',' estilo    (rule 17)

	']'            shift, and enter state 115
	','            shift, and enter state 116


State 110

	INSTR -> "plot" EM ',' EG "with" '[' ']' .          (rule 7)

	';'            reduce using rule 7
	"endfor"       reduce using rule 7


State 111

	SECUENCIA_ESTILO -> estilo .                        (rule 18)

	']'            reduce using rule 18
	','            reduce using rule 18


State 112

	SEC_INSTR_CICLO -> SEC_INSTR_CICLO ';' INSTR .      (rule 16)

	';'            reduce using rule 16
	"endfor"       reduce using rule 16


State 113

	CICLO -> "for" identificador "in" EM "step" int SEC_INSTR_CICLO . "endfor"    (rule 13)
	SEC_INSTR_CICLO -> SEC_INSTR_CICLO . ';' INSTR      (rule 16)

	';'            shift, and enter state 90
	"endfor"       shift, and enter state 114


State 114

	CICLO -> "for" identificador "in" EM "step" int SEC_INSTR_CICLO "endfor" .    (rule 13)

	"for"          reduce using rule 13
	';'            reduce using rule 13
	"plot"         reduce using rule 13
	"endfor"       reduce using rule 13
	"push_back"    reduce using rule 13
	identificador  reduce using rule 13
	%eof           reduce using rule 13


State 115

	INSTR -> "plot" EM ',' EG "with" '[' SECUENCIA_ESTILO ']' .    (rule 8)

	';'            reduce using rule 8
	"endfor"       reduce using rule 8


State 116

	SECUENCIA_ESTILO -> SECUENCIA_ESTILO ',' . estilo    (rule 17)

	estilo         shift, and enter state 120


State 117

	EM -> '[' EM "for" identificador "in" EM ']' .      (rule 35)

	'+'            reduce using rule 35
	'-'            reduce using rule 35
	'*'            reduce using rule 35
	'/'            reduce using rule 35
	'^'            reduce using rule 35
	')'            reduce using rule 35
	']'            reduce using rule 35
	','            reduce using rule 35
	"for"          reduce using rule 35
	"AND"          reduce using rule 35
	"OR"           reduce using rule 35
	'<'            reduce using rule 35
	'>'            reduce using rule 35
	">="           reduce using rule 35
	"<="           reduce using rule 35
	"=="           reduce using rule 35
	';'            reduce using rule 35
	"with"         reduce using rule 35
	"plot"         reduce using rule 35
	"endfor"       reduce using rule 35
	"step"         reduce using rule 35
	"push_back"    reduce using rule 35
	identificador  reduce using rule 35


State 118

	EM -> EM . '+' EM                                   (rule 19)
	EM -> EM . '-' EM                                   (rule 20)
	EM -> EM . '*' EM                                   (rule 21)
	EM -> EM . '/' EM                                   (rule 22)
	EM -> EM . '^' EM                                   (rule 23)
	EM -> "if" '(' COND ',' EM ',' EM . ')'             (rule 36)

	'+'            shift, and enter state 36
	'-'            shift, and enter state 37
	'*'            shift, and enter state 38
	'/'            shift, and enter state 39
	'^'            shift, and enter state 40
	')'            shift, and enter state 119


State 119

	EM -> "if" '(' COND ',' EM ',' EM ')' .             (rule 36)

	'+'            reduce using rule 36
	'-'            reduce using rule 36
	'*'            reduce using rule 36
	'/'            reduce using rule 36
	'^'            reduce using rule 36
	')'            reduce using rule 36
	']'            reduce using rule 36
	','            reduce using rule 36
	"for"          reduce using rule 36
	"AND"          reduce using rule 36
	"OR"           reduce using rule 36
	'<'            reduce using rule 36
	'>'            reduce using rule 36
	">="           reduce using rule 36
	"<="           reduce using rule 36
	"=="           reduce using rule 36
	';'            reduce using rule 36
	"with"         reduce using rule 36
	"plot"         reduce using rule 36
	"endfor"       reduce using rule 36
	"step"         reduce using rule 36
	"push_back"    reduce using rule 36
	identificador  reduce using rule 36


State 120

	SECUENCIA_ESTILO -> SECUENCIA_ESTILO ',' estilo .    (rule 17)

	']'            reduce using rule 17
	','            reduce using rule 17


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 50
Number of terminals: 36
Number of non-terminals: 10
Number of states: 121
