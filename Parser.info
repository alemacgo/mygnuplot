-----------------------------------------------------------------------------
Info file generated by Happy Version 1.18.4 from Parser.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> SEC_INSTR                          (0)
	SEC_INSTR -> INSTR                                 (1)
	SEC_INSTR -> SEC_INSTR INSTR                       (2)
	INSTR -> identificador '(' identificador ')' '=' EM ';'   (3)
	INSTR -> identificador '=' EM ';'                  (4)
	INSTR -> "plot" EM ',' EG "with" '[' ']' ';'       (5)
	INSTR -> "plot" EM ',' EG "with" '[' SECUENCIA_ESTILO ']' ';'   (6)
	INSTR -> "plot" EM ',' EG "with" estilo ';'        (7)
	INSTR -> "plot" EM ',' EG ';'                      (8)
	SECUENCIA_ESTILO -> SECUENCIA_ESTILO ',' estilo    (9)
	SECUENCIA_ESTILO -> estilo                         (10)
	EM -> EM '+' EM                                    (11)
	EM -> EM '-' EM                                    (12)
	EM -> EM '*' EM                                    (13)
	EM -> EM '/' EM                                    (14)
	EM -> EM '^' EM                                    (15)
	EM -> '-' EM                                       (16)
	EM -> '(' EM ')'                                   (17)
	EM -> int                                          (18)
	EM -> real                                         (19)
	EM -> constmat                                     (20)
	EM -> funcion '(' EM ')'                           (21)
	EM -> identificador '(' EM ')'                     (22)
	EM -> identificador                                (23)
	EM -> '[' ']'                                      (24)
	EM -> '[' SECUENCIA_EM ']'                         (25)
	EM -> "range" '(' EM ',' EM ')'                    (26)
	EM -> '[' EM "for" identificador "in" EM ']'       (27)
	EM -> "if" '(' COND ',' EM ',' EM ')'              (28)
	SECUENCIA_EM -> EM                                 (29)
	SECUENCIA_EM -> SECUENCIA_EM ',' EM                (30)
	COND -> EM                                         (31)
	COND -> COND "AND" COND                            (32)
	COND -> COND "OR" COND                             (33)
	COND -> "NOT" COND                                 (34)
	COND -> COND '>' COND                              (35)
	COND -> COND '<' COND                              (36)
	COND -> COND "<=" COND                             (37)
	COND -> COND ">=" COND                             (38)
	COND -> COND "==" COND                             (39)
	EG -> EM                                           (40)
	EG -> '\'' identificador '\''                      (41)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'+'            { TkMas }
	'-'            { TkMenos }
	'*'            { TkPor }
	'/'            { TkEntre }
	'^'            { TkElevado }
	int            { TkEntero $$ }
	real           { TkReal $$ }
	constmat       { TkConstanteMat $$ }
	funcion        { TkFuncion $$ }
	'('            { TkParentesisI }
	')'            { TkParentesisD }
	'['            { TkCorcheteI }
	']'            { TkCorcheteD }
	','            { TkComa }
	"range"        { TkRango }
	"for"          { TkFor }
	"in"           { TkIn }
	"if"           { TkIf }
	"AND"          { TkAnd }
	"OR"           { TkOr }
	"NOT"          { TkNot }
	'<'            { TkMenor }
	'>'            { TkMayor }
	">="           { TkMayorIg }
	"<="           { TkMenorIg }
	"=="           { TkIgual }
	'\''           { TkComilla }
	';'            { TkPuntoYComa }
	'='            { TkAsignacion }
	"with"         { TkWith }
	"plot"         { TkPlot }
	estilo         { TkEstilo $$ }
	identificador  { TkIdentificador $$ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	SEC_INSTR       rules 1, 2
	INSTR           rules 3, 4, 5, 6, 7, 8
	SECUENCIA_ESTILO rules 9, 10
	EM              rules 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28
	SECUENCIA_EM    rules 29, 30
	COND            rules 31, 32, 33, 34, 35, 36, 37, 38, 39
	EG              rules 40, 41

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	"plot"         shift, and enter state 3
	identificador  shift, and enter state 4

	SEC_INSTR      goto state 5
	INSTR          goto state 2

State 1


	"plot"         shift, and enter state 3
	identificador  shift, and enter state 4

	INSTR          goto state 2

State 2

	SEC_INSTR -> INSTR .                                (rule 1)

	"plot"         reduce using rule 1
	identificador  reduce using rule 1
	%eof           reduce using rule 1


State 3

	INSTR -> "plot" . EM ',' EG "with" '[' ']' ';'      (rule 5)
	INSTR -> "plot" . EM ',' EG "with" '[' SECUENCIA_ESTILO ']' ';'    (rule 6)
	INSTR -> "plot" . EM ',' EG "with" estilo ';'       (rule 7)
	INSTR -> "plot" . EM ',' EG ';'                     (rule 8)

	'-'            shift, and enter state 10
	int            shift, and enter state 11
	real           shift, and enter state 12
	constmat       shift, and enter state 13
	funcion        shift, and enter state 14
	'('            shift, and enter state 15
	'['            shift, and enter state 16
	"range"        shift, and enter state 17
	"if"           shift, and enter state 18
	identificador  shift, and enter state 19

	EM             goto state 9

State 4

	INSTR -> identificador . '(' identificador ')' '=' EM ';'    (rule 3)
	INSTR -> identificador . '=' EM ';'                 (rule 4)

	'('            shift, and enter state 7
	'='            shift, and enter state 8


State 5

	%start_parse -> SEC_INSTR .                         (rule 0)
	SEC_INSTR -> SEC_INSTR . INSTR                      (rule 2)

	"plot"         shift, and enter state 3
	identificador  shift, and enter state 4
	%eof           accept

	INSTR          goto state 6

State 6

	SEC_INSTR -> SEC_INSTR INSTR .                      (rule 2)

	"plot"         reduce using rule 2
	identificador  reduce using rule 2
	%eof           reduce using rule 2


State 7

	INSTR -> identificador '(' . identificador ')' '=' EM ';'    (rule 3)

	identificador  shift, and enter state 36


State 8

	INSTR -> identificador '=' . EM ';'                 (rule 4)

	'-'            shift, and enter state 10
	int            shift, and enter state 11
	real           shift, and enter state 12
	constmat       shift, and enter state 13
	funcion        shift, and enter state 14
	'('            shift, and enter state 15
	'['            shift, and enter state 16
	"range"        shift, and enter state 17
	"if"           shift, and enter state 18
	identificador  shift, and enter state 19

	EM             goto state 35

State 9

	INSTR -> "plot" EM . ',' EG "with" '[' ']' ';'      (rule 5)
	INSTR -> "plot" EM . ',' EG "with" '[' SECUENCIA_ESTILO ']' ';'    (rule 6)
	INSTR -> "plot" EM . ',' EG "with" estilo ';'       (rule 7)
	INSTR -> "plot" EM . ',' EG ';'                     (rule 8)
	EM -> EM . '+' EM                                   (rule 11)
	EM -> EM . '-' EM                                   (rule 12)
	EM -> EM . '*' EM                                   (rule 13)
	EM -> EM . '/' EM                                   (rule 14)
	EM -> EM . '^' EM                                   (rule 15)

	'+'            shift, and enter state 29
	'-'            shift, and enter state 30
	'*'            shift, and enter state 31
	'/'            shift, and enter state 32
	'^'            shift, and enter state 33
	','            shift, and enter state 34


State 10

	EM -> '-' . EM                                      (rule 16)

	'-'            shift, and enter state 10
	int            shift, and enter state 11
	real           shift, and enter state 12
	constmat       shift, and enter state 13
	funcion        shift, and enter state 14
	'('            shift, and enter state 15
	'['            shift, and enter state 16
	"range"        shift, and enter state 17
	"if"           shift, and enter state 18
	identificador  shift, and enter state 19

	EM             goto state 28

State 11

	EM -> int .                                         (rule 18)

	'+'            reduce using rule 18
	'-'            reduce using rule 18
	'*'            reduce using rule 18
	'/'            reduce using rule 18
	'^'            reduce using rule 18
	')'            reduce using rule 18
	']'            reduce using rule 18
	','            reduce using rule 18
	"for"          reduce using rule 18
	"AND"          reduce using rule 18
	"OR"           reduce using rule 18
	'<'            reduce using rule 18
	'>'            reduce using rule 18
	">="           reduce using rule 18
	"<="           reduce using rule 18
	"=="           reduce using rule 18
	';'            reduce using rule 18
	"with"         reduce using rule 18


State 12

	EM -> real .                                        (rule 19)

	'+'            reduce using rule 19
	'-'            reduce using rule 19
	'*'            reduce using rule 19
	'/'            reduce using rule 19
	'^'            reduce using rule 19
	')'            reduce using rule 19
	']'            reduce using rule 19
	','            reduce using rule 19
	"for"          reduce using rule 19
	"AND"          reduce using rule 19
	"OR"           reduce using rule 19
	'<'            reduce using rule 19
	'>'            reduce using rule 19
	">="           reduce using rule 19
	"<="           reduce using rule 19
	"=="           reduce using rule 19
	';'            reduce using rule 19
	"with"         reduce using rule 19


State 13

	EM -> constmat .                                    (rule 20)

	'+'            reduce using rule 20
	'-'            reduce using rule 20
	'*'            reduce using rule 20
	'/'            reduce using rule 20
	'^'            reduce using rule 20
	')'            reduce using rule 20
	']'            reduce using rule 20
	','            reduce using rule 20
	"for"          reduce using rule 20
	"AND"          reduce using rule 20
	"OR"           reduce using rule 20
	'<'            reduce using rule 20
	'>'            reduce using rule 20
	">="           reduce using rule 20
	"<="           reduce using rule 20
	"=="           reduce using rule 20
	';'            reduce using rule 20
	"with"         reduce using rule 20


State 14

	EM -> funcion . '(' EM ')'                          (rule 21)

	'('            shift, and enter state 27


State 15

	EM -> '(' . EM ')'                                  (rule 17)

	'-'            shift, and enter state 10
	int            shift, and enter state 11
	real           shift, and enter state 12
	constmat       shift, and enter state 13
	funcion        shift, and enter state 14
	'('            shift, and enter state 15
	'['            shift, and enter state 16
	"range"        shift, and enter state 17
	"if"           shift, and enter state 18
	identificador  shift, and enter state 19

	EM             goto state 26

State 16

	EM -> '[' . ']'                                     (rule 24)
	EM -> '[' . SECUENCIA_EM ']'                        (rule 25)
	EM -> '[' . EM "for" identificador "in" EM ']'      (rule 27)

	'-'            shift, and enter state 10
	int            shift, and enter state 11
	real           shift, and enter state 12
	constmat       shift, and enter state 13
	funcion        shift, and enter state 14
	'('            shift, and enter state 15
	'['            shift, and enter state 16
	']'            shift, and enter state 25
	"range"        shift, and enter state 17
	"if"           shift, and enter state 18
	identificador  shift, and enter state 19

	EM             goto state 23
	SECUENCIA_EM   goto state 24

State 17

	EM -> "range" . '(' EM ',' EM ')'                   (rule 26)

	'('            shift, and enter state 22


State 18

	EM -> "if" . '(' COND ',' EM ',' EM ')'             (rule 28)

	'('            shift, and enter state 21


State 19

	EM -> identificador . '(' EM ')'                    (rule 22)
	EM -> identificador .                               (rule 23)

	'+'            reduce using rule 23
	'-'            reduce using rule 23
	'*'            reduce using rule 23
	'/'            reduce using rule 23
	'^'            reduce using rule 23
	'('            shift, and enter state 20
	')'            reduce using rule 23
	']'            reduce using rule 23
	','            reduce using rule 23
	"for"          reduce using rule 23
	"AND"          reduce using rule 23
	"OR"           reduce using rule 23
	'<'            reduce using rule 23
	'>'            reduce using rule 23
	">="           reduce using rule 23
	"<="           reduce using rule 23
	"=="           reduce using rule 23
	';'            reduce using rule 23
	"with"         reduce using rule 23


State 20

	EM -> identificador '(' . EM ')'                    (rule 22)

	'-'            shift, and enter state 10
	int            shift, and enter state 11
	real           shift, and enter state 12
	constmat       shift, and enter state 13
	funcion        shift, and enter state 14
	'('            shift, and enter state 15
	'['            shift, and enter state 16
	"range"        shift, and enter state 17
	"if"           shift, and enter state 18
	identificador  shift, and enter state 19

	EM             goto state 56

State 21

	EM -> "if" '(' . COND ',' EM ',' EM ')'             (rule 28)

	'-'            shift, and enter state 10
	int            shift, and enter state 11
	real           shift, and enter state 12
	constmat       shift, and enter state 13
	funcion        shift, and enter state 14
	'('            shift, and enter state 15
	'['            shift, and enter state 16
	"range"        shift, and enter state 17
	"if"           shift, and enter state 18
	"NOT"          shift, and enter state 55
	identificador  shift, and enter state 19

	EM             goto state 53
	COND           goto state 54

State 22

	EM -> "range" '(' . EM ',' EM ')'                   (rule 26)

	'-'            shift, and enter state 10
	int            shift, and enter state 11
	real           shift, and enter state 12
	constmat       shift, and enter state 13
	funcion        shift, and enter state 14
	'('            shift, and enter state 15
	'['            shift, and enter state 16
	"range"        shift, and enter state 17
	"if"           shift, and enter state 18
	identificador  shift, and enter state 19

	EM             goto state 52

State 23

	EM -> EM . '+' EM                                   (rule 11)
	EM -> EM . '-' EM                                   (rule 12)
	EM -> EM . '*' EM                                   (rule 13)
	EM -> EM . '/' EM                                   (rule 14)
	EM -> EM . '^' EM                                   (rule 15)
	EM -> '[' EM . "for" identificador "in" EM ']'      (rule 27)
	SECUENCIA_EM -> EM .                                (rule 29)

	'+'            shift, and enter state 29
	'-'            shift, and enter state 30
	'*'            shift, and enter state 31
	'/'            shift, and enter state 32
	'^'            shift, and enter state 33
	']'            reduce using rule 29
	','            reduce using rule 29
	"for"          shift, and enter state 51


State 24

	EM -> '[' SECUENCIA_EM . ']'                        (rule 25)
	SECUENCIA_EM -> SECUENCIA_EM . ',' EM               (rule 30)

	']'            shift, and enter state 49
	','            shift, and enter state 50


State 25

	EM -> '[' ']' .                                     (rule 24)

	'+'            reduce using rule 24
	'-'            reduce using rule 24
	'*'            reduce using rule 24
	'/'            reduce using rule 24
	'^'            reduce using rule 24
	')'            reduce using rule 24
	']'            reduce using rule 24
	','            reduce using rule 24
	"for"          reduce using rule 24
	"AND"          reduce using rule 24
	"OR"           reduce using rule 24
	'<'            reduce using rule 24
	'>'            reduce using rule 24
	">="           reduce using rule 24
	"<="           reduce using rule 24
	"=="           reduce using rule 24
	';'            reduce using rule 24
	"with"         reduce using rule 24


State 26

	EM -> EM . '+' EM                                   (rule 11)
	EM -> EM . '-' EM                                   (rule 12)
	EM -> EM . '*' EM                                   (rule 13)
	EM -> EM . '/' EM                                   (rule 14)
	EM -> EM . '^' EM                                   (rule 15)
	EM -> '(' EM . ')'                                  (rule 17)

	'+'            shift, and enter state 29
	'-'            shift, and enter state 30
	'*'            shift, and enter state 31
	'/'            shift, and enter state 32
	'^'            shift, and enter state 33
	')'            shift, and enter state 48


State 27

	EM -> funcion '(' . EM ')'                          (rule 21)

	'-'            shift, and enter state 10
	int            shift, and enter state 11
	real           shift, and enter state 12
	constmat       shift, and enter state 13
	funcion        shift, and enter state 14
	'('            shift, and enter state 15
	'['            shift, and enter state 16
	"range"        shift, and enter state 17
	"if"           shift, and enter state 18
	identificador  shift, and enter state 19

	EM             goto state 47

State 28

	EM -> EM . '+' EM                                   (rule 11)
	EM -> EM . '-' EM                                   (rule 12)
	EM -> EM . '*' EM                                   (rule 13)
	EM -> EM . '/' EM                                   (rule 14)
	EM -> EM . '^' EM                                   (rule 15)
	EM -> '-' EM .                                      (rule 16)

	'+'            reduce using rule 16
	'-'            reduce using rule 16
	'*'            shift, and enter state 31
	'/'            shift, and enter state 32
	'^'            shift, and enter state 33
	')'            reduce using rule 16
	']'            reduce using rule 16
	','            reduce using rule 16
	"for"          reduce using rule 16
	"AND"          reduce using rule 16
	"OR"           reduce using rule 16
	'<'            reduce using rule 16
	'>'            reduce using rule 16
	">="           reduce using rule 16
	"<="           reduce using rule 16
	"=="           reduce using rule 16
	';'            reduce using rule 16
	"with"         reduce using rule 16


State 29

	EM -> EM '+' . EM                                   (rule 11)

	'-'            shift, and enter state 10
	int            shift, and enter state 11
	real           shift, and enter state 12
	constmat       shift, and enter state 13
	funcion        shift, and enter state 14
	'('            shift, and enter state 15
	'['            shift, and enter state 16
	"range"        shift, and enter state 17
	"if"           shift, and enter state 18
	identificador  shift, and enter state 19

	EM             goto state 46

State 30

	EM -> EM '-' . EM                                   (rule 12)

	'-'            shift, and enter state 10
	int            shift, and enter state 11
	real           shift, and enter state 12
	constmat       shift, and enter state 13
	funcion        shift, and enter state 14
	'('            shift, and enter state 15
	'['            shift, and enter state 16
	"range"        shift, and enter state 17
	"if"           shift, and enter state 18
	identificador  shift, and enter state 19

	EM             goto state 45

State 31

	EM -> EM '*' . EM                                   (rule 13)

	'-'            shift, and enter state 10
	int            shift, and enter state 11
	real           shift, and enter state 12
	constmat       shift, and enter state 13
	funcion        shift, and enter state 14
	'('            shift, and enter state 15
	'['            shift, and enter state 16
	"range"        shift, and enter state 17
	"if"           shift, and enter state 18
	identificador  shift, and enter state 19

	EM             goto state 44

State 32

	EM -> EM '/' . EM                                   (rule 14)

	'-'            shift, and enter state 10
	int            shift, and enter state 11
	real           shift, and enter state 12
	constmat       shift, and enter state 13
	funcion        shift, and enter state 14
	'('            shift, and enter state 15
	'['            shift, and enter state 16
	"range"        shift, and enter state 17
	"if"           shift, and enter state 18
	identificador  shift, and enter state 19

	EM             goto state 43

State 33

	EM -> EM '^' . EM                                   (rule 15)

	'-'            shift, and enter state 10
	int            shift, and enter state 11
	real           shift, and enter state 12
	constmat       shift, and enter state 13
	funcion        shift, and enter state 14
	'('            shift, and enter state 15
	'['            shift, and enter state 16
	"range"        shift, and enter state 17
	"if"           shift, and enter state 18
	identificador  shift, and enter state 19

	EM             goto state 42

State 34

	INSTR -> "plot" EM ',' . EG "with" '[' ']' ';'      (rule 5)
	INSTR -> "plot" EM ',' . EG "with" '[' SECUENCIA_ESTILO ']' ';'    (rule 6)
	INSTR -> "plot" EM ',' . EG "with" estilo ';'       (rule 7)
	INSTR -> "plot" EM ',' . EG ';'                     (rule 8)

	'-'            shift, and enter state 10
	int            shift, and enter state 11
	real           shift, and enter state 12
	constmat       shift, and enter state 13
	funcion        shift, and enter state 14
	'('            shift, and enter state 15
	'['            shift, and enter state 16
	"range"        shift, and enter state 17
	"if"           shift, and enter state 18
	'\''           shift, and enter state 41
	identificador  shift, and enter state 19

	EM             goto state 39
	EG             goto state 40

State 35

	INSTR -> identificador '=' EM . ';'                 (rule 4)
	EM -> EM . '+' EM                                   (rule 11)
	EM -> EM . '-' EM                                   (rule 12)
	EM -> EM . '*' EM                                   (rule 13)
	EM -> EM . '/' EM                                   (rule 14)
	EM -> EM . '^' EM                                   (rule 15)

	'+'            shift, and enter state 29
	'-'            shift, and enter state 30
	'*'            shift, and enter state 31
	'/'            shift, and enter state 32
	'^'            shift, and enter state 33
	';'            shift, and enter state 38


State 36

	INSTR -> identificador '(' identificador . ')' '=' EM ';'    (rule 3)

	')'            shift, and enter state 37


State 37

	INSTR -> identificador '(' identificador ')' . '=' EM ';'    (rule 3)

	'='            shift, and enter state 74


State 38

	INSTR -> identificador '=' EM ';' .                 (rule 4)

	"plot"         reduce using rule 4
	identificador  reduce using rule 4
	%eof           reduce using rule 4


State 39

	EM -> EM . '+' EM                                   (rule 11)
	EM -> EM . '-' EM                                   (rule 12)
	EM -> EM . '*' EM                                   (rule 13)
	EM -> EM . '/' EM                                   (rule 14)
	EM -> EM . '^' EM                                   (rule 15)
	EG -> EM .                                          (rule 40)

	'+'            shift, and enter state 29
	'-'            shift, and enter state 30
	'*'            shift, and enter state 31
	'/'            shift, and enter state 32
	'^'            shift, and enter state 33
	';'            reduce using rule 40
	"with"         reduce using rule 40


State 40

	INSTR -> "plot" EM ',' EG . "with" '[' ']' ';'      (rule 5)
	INSTR -> "plot" EM ',' EG . "with" '[' SECUENCIA_ESTILO ']' ';'    (rule 6)
	INSTR -> "plot" EM ',' EG . "with" estilo ';'       (rule 7)
	INSTR -> "plot" EM ',' EG . ';'                     (rule 8)

	';'            shift, and enter state 72
	"with"         shift, and enter state 73


State 41

	EG -> '\'' . identificador '\''                     (rule 41)

	identificador  shift, and enter state 71


State 42

	EM -> EM . '+' EM                                   (rule 11)
	EM -> EM . '-' EM                                   (rule 12)
	EM -> EM . '*' EM                                   (rule 13)
	EM -> EM . '/' EM                                   (rule 14)
	EM -> EM . '^' EM                                   (rule 15)
	EM -> EM '^' EM .                                   (rule 15)

	'+'            reduce using rule 15
	'-'            reduce using rule 15
	'*'            reduce using rule 15
	'/'            reduce using rule 15
	'^'            shift, and enter state 33
	')'            reduce using rule 15
	']'            reduce using rule 15
	','            reduce using rule 15
	"for"          reduce using rule 15
	"AND"          reduce using rule 15
	"OR"           reduce using rule 15
	'<'            reduce using rule 15
	'>'            reduce using rule 15
	">="           reduce using rule 15
	"<="           reduce using rule 15
	"=="           reduce using rule 15
	';'            reduce using rule 15
	"with"         reduce using rule 15


State 43

	EM -> EM . '+' EM                                   (rule 11)
	EM -> EM . '-' EM                                   (rule 12)
	EM -> EM . '*' EM                                   (rule 13)
	EM -> EM . '/' EM                                   (rule 14)
	EM -> EM '/' EM .                                   (rule 14)
	EM -> EM . '^' EM                                   (rule 15)

	'+'            reduce using rule 14
	'-'            reduce using rule 14
	'*'            reduce using rule 14
	'/'            reduce using rule 14
	'^'            shift, and enter state 33
	')'            reduce using rule 14
	']'            reduce using rule 14
	','            reduce using rule 14
	"for"          reduce using rule 14
	"AND"          reduce using rule 14
	"OR"           reduce using rule 14
	'<'            reduce using rule 14
	'>'            reduce using rule 14
	">="           reduce using rule 14
	"<="           reduce using rule 14
	"=="           reduce using rule 14
	';'            reduce using rule 14
	"with"         reduce using rule 14


State 44

	EM -> EM . '+' EM                                   (rule 11)
	EM -> EM . '-' EM                                   (rule 12)
	EM -> EM . '*' EM                                   (rule 13)
	EM -> EM '*' EM .                                   (rule 13)
	EM -> EM . '/' EM                                   (rule 14)
	EM -> EM . '^' EM                                   (rule 15)

	'+'            reduce using rule 13
	'-'            reduce using rule 13
	'*'            reduce using rule 13
	'/'            reduce using rule 13
	'^'            shift, and enter state 33
	')'            reduce using rule 13
	']'            reduce using rule 13
	','            reduce using rule 13
	"for"          reduce using rule 13
	"AND"          reduce using rule 13
	"OR"           reduce using rule 13
	'<'            reduce using rule 13
	'>'            reduce using rule 13
	">="           reduce using rule 13
	"<="           reduce using rule 13
	"=="           reduce using rule 13
	';'            reduce using rule 13
	"with"         reduce using rule 13


State 45

	EM -> EM . '+' EM                                   (rule 11)
	EM -> EM . '-' EM                                   (rule 12)
	EM -> EM '-' EM .                                   (rule 12)
	EM -> EM . '*' EM                                   (rule 13)
	EM -> EM . '/' EM                                   (rule 14)
	EM -> EM . '^' EM                                   (rule 15)

	'+'            reduce using rule 12
	'-'            reduce using rule 12
	'*'            shift, and enter state 31
	'/'            shift, and enter state 32
	'^'            shift, and enter state 33
	')'            reduce using rule 12
	']'            reduce using rule 12
	','            reduce using rule 12
	"for"          reduce using rule 12
	"AND"          reduce using rule 12
	"OR"           reduce using rule 12
	'<'            reduce using rule 12
	'>'            reduce using rule 12
	">="           reduce using rule 12
	"<="           reduce using rule 12
	"=="           reduce using rule 12
	';'            reduce using rule 12
	"with"         reduce using rule 12


State 46

	EM -> EM . '+' EM                                   (rule 11)
	EM -> EM '+' EM .                                   (rule 11)
	EM -> EM . '-' EM                                   (rule 12)
	EM -> EM . '*' EM                                   (rule 13)
	EM -> EM . '/' EM                                   (rule 14)
	EM -> EM . '^' EM                                   (rule 15)

	'+'            reduce using rule 11
	'-'            reduce using rule 11
	'*'            shift, and enter state 31
	'/'            shift, and enter state 32
	'^'            shift, and enter state 33
	')'            reduce using rule 11
	']'            reduce using rule 11
	','            reduce using rule 11
	"for"          reduce using rule 11
	"AND"          reduce using rule 11
	"OR"           reduce using rule 11
	'<'            reduce using rule 11
	'>'            reduce using rule 11
	">="           reduce using rule 11
	"<="           reduce using rule 11
	"=="           reduce using rule 11
	';'            reduce using rule 11
	"with"         reduce using rule 11


State 47

	EM -> EM . '+' EM                                   (rule 11)
	EM -> EM . '-' EM                                   (rule 12)
	EM -> EM . '*' EM                                   (rule 13)
	EM -> EM . '/' EM                                   (rule 14)
	EM -> EM . '^' EM                                   (rule 15)
	EM -> funcion '(' EM . ')'                          (rule 21)

	'+'            shift, and enter state 29
	'-'            shift, and enter state 30
	'*'            shift, and enter state 31
	'/'            shift, and enter state 32
	'^'            shift, and enter state 33
	')'            shift, and enter state 70


State 48

	EM -> '(' EM ')' .                                  (rule 17)

	'+'            reduce using rule 17
	'-'            reduce using rule 17
	'*'            reduce using rule 17
	'/'            reduce using rule 17
	'^'            reduce using rule 17
	')'            reduce using rule 17
	']'            reduce using rule 17
	','            reduce using rule 17
	"for"          reduce using rule 17
	"AND"          reduce using rule 17
	"OR"           reduce using rule 17
	'<'            reduce using rule 17
	'>'            reduce using rule 17
	">="           reduce using rule 17
	"<="           reduce using rule 17
	"=="           reduce using rule 17
	';'            reduce using rule 17
	"with"         reduce using rule 17


State 49

	EM -> '[' SECUENCIA_EM ']' .                        (rule 25)

	'+'            reduce using rule 25
	'-'            reduce using rule 25
	'*'            reduce using rule 25
	'/'            reduce using rule 25
	'^'            reduce using rule 25
	')'            reduce using rule 25
	']'            reduce using rule 25
	','            reduce using rule 25
	"for"          reduce using rule 25
	"AND"          reduce using rule 25
	"OR"           reduce using rule 25
	'<'            reduce using rule 25
	'>'            reduce using rule 25
	">="           reduce using rule 25
	"<="           reduce using rule 25
	"=="           reduce using rule 25
	';'            reduce using rule 25
	"with"         reduce using rule 25


State 50

	SECUENCIA_EM -> SECUENCIA_EM ',' . EM               (rule 30)

	'-'            shift, and enter state 10
	int            shift, and enter state 11
	real           shift, and enter state 12
	constmat       shift, and enter state 13
	funcion        shift, and enter state 14
	'('            shift, and enter state 15
	'['            shift, and enter state 16
	"range"        shift, and enter state 17
	"if"           shift, and enter state 18
	identificador  shift, and enter state 19

	EM             goto state 69

State 51

	EM -> '[' EM "for" . identificador "in" EM ']'      (rule 27)

	identificador  shift, and enter state 68


State 52

	EM -> EM . '+' EM                                   (rule 11)
	EM -> EM . '-' EM                                   (rule 12)
	EM -> EM . '*' EM                                   (rule 13)
	EM -> EM . '/' EM                                   (rule 14)
	EM -> EM . '^' EM                                   (rule 15)
	EM -> "range" '(' EM . ',' EM ')'                   (rule 26)

	'+'            shift, and enter state 29
	'-'            shift, and enter state 30
	'*'            shift, and enter state 31
	'/'            shift, and enter state 32
	'^'            shift, and enter state 33
	','            shift, and enter state 67


State 53

	EM -> EM . '+' EM                                   (rule 11)
	EM -> EM . '-' EM                                   (rule 12)
	EM -> EM . '*' EM                                   (rule 13)
	EM -> EM . '/' EM                                   (rule 14)
	EM -> EM . '^' EM                                   (rule 15)
	COND -> EM .                                        (rule 31)

	'+'            shift, and enter state 29
	'-'            shift, and enter state 30
	'*'            shift, and enter state 31
	'/'            shift, and enter state 32
	'^'            shift, and enter state 33
	','            reduce using rule 31
	"AND"          reduce using rule 31
	"OR"           reduce using rule 31
	'<'            reduce using rule 31
	'>'            reduce using rule 31
	">="           reduce using rule 31
	"<="           reduce using rule 31
	"=="           reduce using rule 31


State 54

	EM -> "if" '(' COND . ',' EM ',' EM ')'             (rule 28)
	COND -> COND . "AND" COND                           (rule 32)
	COND -> COND . "OR" COND                            (rule 33)
	COND -> COND . '>' COND                             (rule 35)
	COND -> COND . '<' COND                             (rule 36)
	COND -> COND . "<=" COND                            (rule 37)
	COND -> COND . ">=" COND                            (rule 38)
	COND -> COND . "==" COND                            (rule 39)

	','            shift, and enter state 59
	"AND"          shift, and enter state 60
	"OR"           shift, and enter state 61
	'<'            shift, and enter state 62
	'>'            shift, and enter state 63
	">="           shift, and enter state 64
	"<="           shift, and enter state 65
	"=="           shift, and enter state 66


State 55

	COND -> "NOT" . COND                                (rule 34)

	'-'            shift, and enter state 10
	int            shift, and enter state 11
	real           shift, and enter state 12
	constmat       shift, and enter state 13
	funcion        shift, and enter state 14
	'('            shift, and enter state 15
	'['            shift, and enter state 16
	"range"        shift, and enter state 17
	"if"           shift, and enter state 18
	"NOT"          shift, and enter state 55
	identificador  shift, and enter state 19

	EM             goto state 53
	COND           goto state 58

State 56

	EM -> EM . '+' EM                                   (rule 11)
	EM -> EM . '-' EM                                   (rule 12)
	EM -> EM . '*' EM                                   (rule 13)
	EM -> EM . '/' EM                                   (rule 14)
	EM -> EM . '^' EM                                   (rule 15)
	EM -> identificador '(' EM . ')'                    (rule 22)

	'+'            shift, and enter state 29
	'-'            shift, and enter state 30
	'*'            shift, and enter state 31
	'/'            shift, and enter state 32
	'^'            shift, and enter state 33
	')'            shift, and enter state 57


State 57

	EM -> identificador '(' EM ')' .                    (rule 22)

	'+'            reduce using rule 22
	'-'            reduce using rule 22
	'*'            reduce using rule 22
	'/'            reduce using rule 22
	'^'            reduce using rule 22
	')'            reduce using rule 22
	']'            reduce using rule 22
	','            reduce using rule 22
	"for"          reduce using rule 22
	"AND"          reduce using rule 22
	"OR"           reduce using rule 22
	'<'            reduce using rule 22
	'>'            reduce using rule 22
	">="           reduce using rule 22
	"<="           reduce using rule 22
	"=="           reduce using rule 22
	';'            reduce using rule 22
	"with"         reduce using rule 22


State 58

	COND -> COND . "AND" COND                           (rule 32)
	COND -> COND . "OR" COND                            (rule 33)
	COND -> "NOT" COND .                                (rule 34)
	COND -> COND . '>' COND                             (rule 35)
	COND -> COND . '<' COND                             (rule 36)
	COND -> COND . "<=" COND                            (rule 37)
	COND -> COND . ">=" COND                            (rule 38)
	COND -> COND . "==" COND                            (rule 39)

	','            reduce using rule 34
	"AND"          reduce using rule 34
	"OR"           reduce using rule 34
	'<'            shift, and enter state 62
	'>'            shift, and enter state 63
	">="           shift, and enter state 64
	"<="           shift, and enter state 65
	"=="           shift, and enter state 66


State 59

	EM -> "if" '(' COND ',' . EM ',' EM ')'             (rule 28)

	'-'            shift, and enter state 10
	int            shift, and enter state 11
	real           shift, and enter state 12
	constmat       shift, and enter state 13
	funcion        shift, and enter state 14
	'('            shift, and enter state 15
	'['            shift, and enter state 16
	"range"        shift, and enter state 17
	"if"           shift, and enter state 18
	identificador  shift, and enter state 19

	EM             goto state 88

State 60

	COND -> COND "AND" . COND                           (rule 32)

	'-'            shift, and enter state 10
	int            shift, and enter state 11
	real           shift, and enter state 12
	constmat       shift, and enter state 13
	funcion        shift, and enter state 14
	'('            shift, and enter state 15
	'['            shift, and enter state 16
	"range"        shift, and enter state 17
	"if"           shift, and enter state 18
	"NOT"          shift, and enter state 55
	identificador  shift, and enter state 19

	EM             goto state 53
	COND           goto state 87

State 61

	COND -> COND "OR" . COND                            (rule 33)

	'-'            shift, and enter state 10
	int            shift, and enter state 11
	real           shift, and enter state 12
	constmat       shift, and enter state 13
	funcion        shift, and enter state 14
	'('            shift, and enter state 15
	'['            shift, and enter state 16
	"range"        shift, and enter state 17
	"if"           shift, and enter state 18
	"NOT"          shift, and enter state 55
	identificador  shift, and enter state 19

	EM             goto state 53
	COND           goto state 86

State 62

	COND -> COND '<' . COND                             (rule 36)

	'-'            shift, and enter state 10
	int            shift, and enter state 11
	real           shift, and enter state 12
	constmat       shift, and enter state 13
	funcion        shift, and enter state 14
	'('            shift, and enter state 15
	'['            shift, and enter state 16
	"range"        shift, and enter state 17
	"if"           shift, and enter state 18
	"NOT"          shift, and enter state 55
	identificador  shift, and enter state 19

	EM             goto state 53
	COND           goto state 85

State 63

	COND -> COND '>' . COND                             (rule 35)

	'-'            shift, and enter state 10
	int            shift, and enter state 11
	real           shift, and enter state 12
	constmat       shift, and enter state 13
	funcion        shift, and enter state 14
	'('            shift, and enter state 15
	'['            shift, and enter state 16
	"range"        shift, and enter state 17
	"if"           shift, and enter state 18
	"NOT"          shift, and enter state 55
	identificador  shift, and enter state 19

	EM             goto state 53
	COND           goto state 84

State 64

	COND -> COND ">=" . COND                            (rule 38)

	'-'            shift, and enter state 10
	int            shift, and enter state 11
	real           shift, and enter state 12
	constmat       shift, and enter state 13
	funcion        shift, and enter state 14
	'('            shift, and enter state 15
	'['            shift, and enter state 16
	"range"        shift, and enter state 17
	"if"           shift, and enter state 18
	"NOT"          shift, and enter state 55
	identificador  shift, and enter state 19

	EM             goto state 53
	COND           goto state 83

State 65

	COND -> COND "<=" . COND                            (rule 37)

	'-'            shift, and enter state 10
	int            shift, and enter state 11
	real           shift, and enter state 12
	constmat       shift, and enter state 13
	funcion        shift, and enter state 14
	'('            shift, and enter state 15
	'['            shift, and enter state 16
	"range"        shift, and enter state 17
	"if"           shift, and enter state 18
	"NOT"          shift, and enter state 55
	identificador  shift, and enter state 19

	EM             goto state 53
	COND           goto state 82

State 66

	COND -> COND "==" . COND                            (rule 39)

	'-'            shift, and enter state 10
	int            shift, and enter state 11
	real           shift, and enter state 12
	constmat       shift, and enter state 13
	funcion        shift, and enter state 14
	'('            shift, and enter state 15
	'['            shift, and enter state 16
	"range"        shift, and enter state 17
	"if"           shift, and enter state 18
	"NOT"          shift, and enter state 55
	identificador  shift, and enter state 19

	EM             goto state 53
	COND           goto state 81

State 67

	EM -> "range" '(' EM ',' . EM ')'                   (rule 26)

	'-'            shift, and enter state 10
	int            shift, and enter state 11
	real           shift, and enter state 12
	constmat       shift, and enter state 13
	funcion        shift, and enter state 14
	'('            shift, and enter state 15
	'['            shift, and enter state 16
	"range"        shift, and enter state 17
	"if"           shift, and enter state 18
	identificador  shift, and enter state 19

	EM             goto state 80

State 68

	EM -> '[' EM "for" identificador . "in" EM ']'      (rule 27)

	"in"           shift, and enter state 79


State 69

	EM -> EM . '+' EM                                   (rule 11)
	EM -> EM . '-' EM                                   (rule 12)
	EM -> EM . '*' EM                                   (rule 13)
	EM -> EM . '/' EM                                   (rule 14)
	EM -> EM . '^' EM                                   (rule 15)
	SECUENCIA_EM -> SECUENCIA_EM ',' EM .               (rule 30)

	'+'            shift, and enter state 29
	'-'            shift, and enter state 30
	'*'            shift, and enter state 31
	'/'            shift, and enter state 32
	'^'            shift, and enter state 33
	']'            reduce using rule 30
	','            reduce using rule 30


State 70

	EM -> funcion '(' EM ')' .                          (rule 21)

	'+'            reduce using rule 21
	'-'            reduce using rule 21
	'*'            reduce using rule 21
	'/'            reduce using rule 21
	'^'            reduce using rule 21
	')'            reduce using rule 21
	']'            reduce using rule 21
	','            reduce using rule 21
	"for"          reduce using rule 21
	"AND"          reduce using rule 21
	"OR"           reduce using rule 21
	'<'            reduce using rule 21
	'>'            reduce using rule 21
	">="           reduce using rule 21
	"<="           reduce using rule 21
	"=="           reduce using rule 21
	';'            reduce using rule 21
	"with"         reduce using rule 21


State 71

	EG -> '\'' identificador . '\''                     (rule 41)

	'\''           shift, and enter state 78


State 72

	INSTR -> "plot" EM ',' EG ';' .                     (rule 8)

	"plot"         reduce using rule 8
	identificador  reduce using rule 8
	%eof           reduce using rule 8


State 73

	INSTR -> "plot" EM ',' EG "with" . '[' ']' ';'      (rule 5)
	INSTR -> "plot" EM ',' EG "with" . '[' SECUENCIA_ESTILO ']' ';'    (rule 6)
	INSTR -> "plot" EM ',' EG "with" . estilo ';'       (rule 7)

	'['            shift, and enter state 76
	estilo         shift, and enter state 77


State 74

	INSTR -> identificador '(' identificador ')' '=' . EM ';'    (rule 3)

	'-'            shift, and enter state 10
	int            shift, and enter state 11
	real           shift, and enter state 12
	constmat       shift, and enter state 13
	funcion        shift, and enter state 14
	'('            shift, and enter state 15
	'['            shift, and enter state 16
	"range"        shift, and enter state 17
	"if"           shift, and enter state 18
	identificador  shift, and enter state 19

	EM             goto state 75

State 75

	INSTR -> identificador '(' identificador ')' '=' EM . ';'    (rule 3)
	EM -> EM . '+' EM                                   (rule 11)
	EM -> EM . '-' EM                                   (rule 12)
	EM -> EM . '*' EM                                   (rule 13)
	EM -> EM . '/' EM                                   (rule 14)
	EM -> EM . '^' EM                                   (rule 15)

	'+'            shift, and enter state 29
	'-'            shift, and enter state 30
	'*'            shift, and enter state 31
	'/'            shift, and enter state 32
	'^'            shift, and enter state 33
	';'            shift, and enter state 96


State 76

	INSTR -> "plot" EM ',' EG "with" '[' . ']' ';'      (rule 5)
	INSTR -> "plot" EM ',' EG "with" '[' . SECUENCIA_ESTILO ']' ';'    (rule 6)

	']'            shift, and enter state 94
	estilo         shift, and enter state 95

	SECUENCIA_ESTILOgoto state 93

State 77

	INSTR -> "plot" EM ',' EG "with" estilo . ';'       (rule 7)

	';'            shift, and enter state 92


State 78

	EG -> '\'' identificador '\'' .                     (rule 41)

	';'            reduce using rule 41
	"with"         reduce using rule 41


State 79

	EM -> '[' EM "for" identificador "in" . EM ']'      (rule 27)

	'-'            shift, and enter state 10
	int            shift, and enter state 11
	real           shift, and enter state 12
	constmat       shift, and enter state 13
	funcion        shift, and enter state 14
	'('            shift, and enter state 15
	'['            shift, and enter state 16
	"range"        shift, and enter state 17
	"if"           shift, and enter state 18
	identificador  shift, and enter state 19

	EM             goto state 91

State 80

	EM -> EM . '+' EM                                   (rule 11)
	EM -> EM . '-' EM                                   (rule 12)
	EM -> EM . '*' EM                                   (rule 13)
	EM -> EM . '/' EM                                   (rule 14)
	EM -> EM . '^' EM                                   (rule 15)
	EM -> "range" '(' EM ',' EM . ')'                   (rule 26)

	'+'            shift, and enter state 29
	'-'            shift, and enter state 30
	'*'            shift, and enter state 31
	'/'            shift, and enter state 32
	'^'            shift, and enter state 33
	')'            shift, and enter state 90


State 81

	COND -> COND . "AND" COND                           (rule 32)
	COND -> COND . "OR" COND                            (rule 33)
	COND -> COND . '>' COND                             (rule 35)
	COND -> COND . '<' COND                             (rule 36)
	COND -> COND . "<=" COND                            (rule 37)
	COND -> COND . ">=" COND                            (rule 38)
	COND -> COND . "==" COND                            (rule 39)
	COND -> COND "==" COND .                            (rule 39)

	','            reduce using rule 39
	"AND"          reduce using rule 39
	"OR"           reduce using rule 39
	'<'            shift, and enter state 62
	'>'            shift, and enter state 63
	">="           shift, and enter state 64
	"<="           shift, and enter state 65
	"=="           reduce using rule 39


State 82

	COND -> COND . "AND" COND                           (rule 32)
	COND -> COND . "OR" COND                            (rule 33)
	COND -> COND . '>' COND                             (rule 35)
	COND -> COND . '<' COND                             (rule 36)
	COND -> COND . "<=" COND                            (rule 37)
	COND -> COND "<=" COND .                            (rule 37)
	COND -> COND . ">=" COND                            (rule 38)
	COND -> COND . "==" COND                            (rule 39)

	','            reduce using rule 37
	"AND"          reduce using rule 37
	"OR"           reduce using rule 37
	'<'            reduce using rule 37
	'>'            reduce using rule 37
	">="           reduce using rule 37
	"<="           reduce using rule 37
	"=="           reduce using rule 37


State 83

	COND -> COND . "AND" COND                           (rule 32)
	COND -> COND . "OR" COND                            (rule 33)
	COND -> COND . '>' COND                             (rule 35)
	COND -> COND . '<' COND                             (rule 36)
	COND -> COND . "<=" COND                            (rule 37)
	COND -> COND . ">=" COND                            (rule 38)
	COND -> COND ">=" COND .                            (rule 38)
	COND -> COND . "==" COND                            (rule 39)

	','            reduce using rule 38
	"AND"          reduce using rule 38
	"OR"           reduce using rule 38
	'<'            reduce using rule 38
	'>'            reduce using rule 38
	">="           reduce using rule 38
	"<="           reduce using rule 38
	"=="           reduce using rule 38


State 84

	COND -> COND . "AND" COND                           (rule 32)
	COND -> COND . "OR" COND                            (rule 33)
	COND -> COND . '>' COND                             (rule 35)
	COND -> COND '>' COND .                             (rule 35)
	COND -> COND . '<' COND                             (rule 36)
	COND -> COND . "<=" COND                            (rule 37)
	COND -> COND . ">=" COND                            (rule 38)
	COND -> COND . "==" COND                            (rule 39)

	','            reduce using rule 35
	"AND"          reduce using rule 35
	"OR"           reduce using rule 35
	'<'            reduce using rule 35
	'>'            reduce using rule 35
	">="           reduce using rule 35
	"<="           reduce using rule 35
	"=="           reduce using rule 35


State 85

	COND -> COND . "AND" COND                           (rule 32)
	COND -> COND . "OR" COND                            (rule 33)
	COND -> COND . '>' COND                             (rule 35)
	COND -> COND . '<' COND                             (rule 36)
	COND -> COND '<' COND .                             (rule 36)
	COND -> COND . "<=" COND                            (rule 37)
	COND -> COND . ">=" COND                            (rule 38)
	COND -> COND . "==" COND                            (rule 39)

	','            reduce using rule 36
	"AND"          reduce using rule 36
	"OR"           reduce using rule 36
	'<'            reduce using rule 36
	'>'            reduce using rule 36
	">="           reduce using rule 36
	"<="           reduce using rule 36
	"=="           reduce using rule 36


State 86

	COND -> COND . "AND" COND                           (rule 32)
	COND -> COND . "OR" COND                            (rule 33)
	COND -> COND "OR" COND .                            (rule 33)
	COND -> COND . '>' COND                             (rule 35)
	COND -> COND . '<' COND                             (rule 36)
	COND -> COND . "<=" COND                            (rule 37)
	COND -> COND . ">=" COND                            (rule 38)
	COND -> COND . "==" COND                            (rule 39)

	','            reduce using rule 33
	"AND"          reduce using rule 33
	"OR"           reduce using rule 33
	'<'            shift, and enter state 62
	'>'            shift, and enter state 63
	">="           shift, and enter state 64
	"<="           shift, and enter state 65
	"=="           shift, and enter state 66


State 87

	COND -> COND . "AND" COND                           (rule 32)
	COND -> COND "AND" COND .                           (rule 32)
	COND -> COND . "OR" COND                            (rule 33)
	COND -> COND . '>' COND                             (rule 35)
	COND -> COND . '<' COND                             (rule 36)
	COND -> COND . "<=" COND                            (rule 37)
	COND -> COND . ">=" COND                            (rule 38)
	COND -> COND . "==" COND                            (rule 39)

	','            reduce using rule 32
	"AND"          reduce using rule 32
	"OR"           reduce using rule 32
	'<'            shift, and enter state 62
	'>'            shift, and enter state 63
	">="           shift, and enter state 64
	"<="           shift, and enter state 65
	"=="           shift, and enter state 66


State 88

	EM -> EM . '+' EM                                   (rule 11)
	EM -> EM . '-' EM                                   (rule 12)
	EM -> EM . '*' EM                                   (rule 13)
	EM -> EM . '/' EM                                   (rule 14)
	EM -> EM . '^' EM                                   (rule 15)
	EM -> "if" '(' COND ',' EM . ',' EM ')'             (rule 28)

	'+'            shift, and enter state 29
	'-'            shift, and enter state 30
	'*'            shift, and enter state 31
	'/'            shift, and enter state 32
	'^'            shift, and enter state 33
	','            shift, and enter state 89


State 89

	EM -> "if" '(' COND ',' EM ',' . EM ')'             (rule 28)

	'-'            shift, and enter state 10
	int            shift, and enter state 11
	real           shift, and enter state 12
	constmat       shift, and enter state 13
	funcion        shift, and enter state 14
	'('            shift, and enter state 15
	'['            shift, and enter state 16
	"range"        shift, and enter state 17
	"if"           shift, and enter state 18
	identificador  shift, and enter state 19

	EM             goto state 101

State 90

	EM -> "range" '(' EM ',' EM ')' .                   (rule 26)

	'+'            reduce using rule 26
	'-'            reduce using rule 26
	'*'            reduce using rule 26
	'/'            reduce using rule 26
	'^'            reduce using rule 26
	')'            reduce using rule 26
	']'            reduce using rule 26
	','            reduce using rule 26
	"for"          reduce using rule 26
	"AND"          reduce using rule 26
	"OR"           reduce using rule 26
	'<'            reduce using rule 26
	'>'            reduce using rule 26
	">="           reduce using rule 26
	"<="           reduce using rule 26
	"=="           reduce using rule 26
	';'            reduce using rule 26
	"with"         reduce using rule 26


State 91

	EM -> EM . '+' EM                                   (rule 11)
	EM -> EM . '-' EM                                   (rule 12)
	EM -> EM . '*' EM                                   (rule 13)
	EM -> EM . '/' EM                                   (rule 14)
	EM -> EM . '^' EM                                   (rule 15)
	EM -> '[' EM "for" identificador "in" EM . ']'      (rule 27)

	'+'            shift, and enter state 29
	'-'            shift, and enter state 30
	'*'            shift, and enter state 31
	'/'            shift, and enter state 32
	'^'            shift, and enter state 33
	']'            shift, and enter state 100


State 92

	INSTR -> "plot" EM ',' EG "with" estilo ';' .       (rule 7)

	"plot"         reduce using rule 7
	identificador  reduce using rule 7
	%eof           reduce using rule 7


State 93

	INSTR -> "plot" EM ',' EG "with" '[' SECUENCIA_ESTILO . ']' ';'    (rule 6)
	SECUENCIA_ESTILO -> SECUENCIA_ESTILO . ',' estilo    (rule 9)

	']'            shift, and enter state 98
	','            shift, and enter state 99


State 94

	INSTR -> "plot" EM ',' EG "with" '[' ']' . ';'      (rule 5)

	';'            shift, and enter state 97


State 95

	SECUENCIA_ESTILO -> estilo .                        (rule 10)

	']'            reduce using rule 10
	','            reduce using rule 10


State 96

	INSTR -> identificador '(' identificador ')' '=' EM ';' .    (rule 3)

	"plot"         reduce using rule 3
	identificador  reduce using rule 3
	%eof           reduce using rule 3


State 97

	INSTR -> "plot" EM ',' EG "with" '[' ']' ';' .      (rule 5)

	"plot"         reduce using rule 5
	identificador  reduce using rule 5
	%eof           reduce using rule 5


State 98

	INSTR -> "plot" EM ',' EG "with" '[' SECUENCIA_ESTILO ']' . ';'    (rule 6)

	';'            shift, and enter state 104


State 99

	SECUENCIA_ESTILO -> SECUENCIA_ESTILO ',' . estilo    (rule 9)

	estilo         shift, and enter state 103


State 100

	EM -> '[' EM "for" identificador "in" EM ']' .      (rule 27)

	'+'            reduce using rule 27
	'-'            reduce using rule 27
	'*'            reduce using rule 27
	'/'            reduce using rule 27
	'^'            reduce using rule 27
	')'            reduce using rule 27
	']'            reduce using rule 27
	','            reduce using rule 27
	"for"          reduce using rule 27
	"AND"          reduce using rule 27
	"OR"           reduce using rule 27
	'<'            reduce using rule 27
	'>'            reduce using rule 27
	">="           reduce using rule 27
	"<="           reduce using rule 27
	"=="           reduce using rule 27
	';'            reduce using rule 27
	"with"         reduce using rule 27


State 101

	EM -> EM . '+' EM                                   (rule 11)
	EM -> EM . '-' EM                                   (rule 12)
	EM -> EM . '*' EM                                   (rule 13)
	EM -> EM . '/' EM                                   (rule 14)
	EM -> EM . '^' EM                                   (rule 15)
	EM -> "if" '(' COND ',' EM ',' EM . ')'             (rule 28)

	'+'            shift, and enter state 29
	'-'            shift, and enter state 30
	'*'            shift, and enter state 31
	'/'            shift, and enter state 32
	'^'            shift, and enter state 33
	')'            shift, and enter state 102


State 102

	EM -> "if" '(' COND ',' EM ',' EM ')' .             (rule 28)

	'+'            reduce using rule 28
	'-'            reduce using rule 28
	'*'            reduce using rule 28
	'/'            reduce using rule 28
	'^'            reduce using rule 28
	')'            reduce using rule 28
	']'            reduce using rule 28
	','            reduce using rule 28
	"for"          reduce using rule 28
	"AND"          reduce using rule 28
	"OR"           reduce using rule 28
	'<'            reduce using rule 28
	'>'            reduce using rule 28
	">="           reduce using rule 28
	"<="           reduce using rule 28
	"=="           reduce using rule 28
	';'            reduce using rule 28
	"with"         reduce using rule 28


State 103

	SECUENCIA_ESTILO -> SECUENCIA_ESTILO ',' estilo .    (rule 9)

	']'            reduce using rule 9
	','            reduce using rule 9


State 104

	INSTR -> "plot" EM ',' EG "with" '[' SECUENCIA_ESTILO ']' ';' .    (rule 6)

	"plot"         reduce using rule 6
	identificador  reduce using rule 6
	%eof           reduce using rule 6


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 42
Number of terminals: 33
Number of non-terminals: 8
Number of states: 105
