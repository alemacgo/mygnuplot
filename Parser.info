-----------------------------------------------------------------------------
Info file generated by Happy Version 1.17 from Parser.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> PROGRAMA                           (0)
	PROGRAMA -> SEC_INSTR                              (1)
	SEC_INSTR -> INSTR ';'                             (2)
	SEC_INSTR -> CICLO                                 (3)
	SEC_INSTR -> SEC_INSTR INSTR ';'                   (4)
	SEC_INSTR -> SEC_INSTR CICLO                       (5)
	INSTR -> identificador '(' identificador ')' '=' EM   (6)
	INSTR -> identificador '=' EM                      (7)
	INSTR -> "plot" EM ',' EG "with" '[' ']'           (8)
	INSTR -> "plot" EM ',' EG "with" '[' SECUENCIA_ESTILO ']'   (9)
	INSTR -> "plot" EM ',' EG "with" estilo            (10)
	INSTR -> "plot" EM ',' EG                          (11)
	INSTR -> "push_back" '(' identificador ',' EM ')'   (12)
	CICLO -> "for" identificador "in" EM SEC_INSTR_CICLO "endfor"   (13)
	CICLO -> "for" identificador "in" EM "step" EM SEC_INSTR_CICLO "endfor"   (14)
	SEC_INSTR_CICLO -> INSTR                           (15)
	SEC_INSTR_CICLO -> CICLO                           (16)
	SEC_INSTR_CICLO -> SEC_INSTR_CICLO ';' INSTR       (17)
	EM -> EM '+' EM                                    (18)
	EM -> EM '-' EM                                    (19)
	EM -> EM '*' EM                                    (20)
	EM -> EM '/' EM                                    (21)
	EM -> EM '^' EM                                    (22)
	EM -> '-' EM                                       (23)
	EM -> '(' EM ')'                                   (24)
	EM -> int                                          (25)
	EM -> real                                         (26)
	EM -> constmat                                     (27)
	EM -> funcion '(' EM ')'                           (28)
	EM -> identificador '(' EM ')'                     (29)
	EM -> identificador                                (30)
	EM -> '[' ']'                                      (31)
	EM -> '[' SECUENCIA_EM ']'                         (32)
	EM -> "range" '(' EM ',' EM ')'                    (33)
	EM -> '[' EM "for" identificador "in" EM ']'       (34)
	EM -> "if" '(' COND ',' EM ',' EM ')'              (35)
	SECUENCIA_EM -> EM                                 (36)
	SECUENCIA_EM -> SECUENCIA_EM ',' EM                (37)
	SECUENCIA_ESTILO -> estilo                         (38)
	SECUENCIA_ESTILO -> SECUENCIA_ESTILO ',' estilo    (39)
	COND -> EM                                         (40)
	COND -> COND "AND" COND                            (41)
	COND -> COND "OR" COND                             (42)
	COND -> "NOT" COND                                 (43)
	COND -> COND '>' COND                              (44)
	COND -> COND '<' COND                              (45)
	COND -> COND "<=" COND                             (46)
	COND -> COND ">=" COND                             (47)
	COND -> COND "==" COND                             (48)
	EG -> EM                                           (49)
	EG -> archivo                                      (50)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'+'            { ParserStatus TkMas _ _ }
	'-'            { ParserStatus TkMenos _ _ }
	'*'            { ParserStatus TkPor _ _ }
	'/'            { ParserStatus TkEntre  _ _ }
	'^'            { ParserStatus TkElevado _ _ }
	int            { ParserStatus (TkEntero $$) _ _ }
	real           { ParserStatus (TkReal $$) _ _ }
	constmat       { ParserStatus (TkConstanteMat $$) _ _ }
	funcion        { ParserStatus (TkFuncion $$) _ _ }
	'('            { ParserStatus TkParentesisI _ _ }
	')'            { ParserStatus TkParentesisD _ _ }
	'['            { ParserStatus TkCorcheteI _ _ }
	']'            { ParserStatus TkCorcheteD _ _ }
	','            { ParserStatus TkComa _ _ }
	"range"        { ParserStatus TkRango _ _ }
	"for"          { ParserStatus TkFor _ _ }
	"in"           { ParserStatus TkIn _ _ }
	"if"           { ParserStatus TkIf _ _ }
	"AND"          { ParserStatus TkAnd _ _ }
	"OR"           { ParserStatus TkOr _ _ }
	"NOT"          { ParserStatus TkNot _ _ }
	'<'            { ParserStatus TkMenor _ _ }
	'>'            { ParserStatus TkMayor _ _ }
	">="           { ParserStatus TkMayorIg _ _ }
	"<="           { ParserStatus TkMenorIg _ _ }
	"=="           { ParserStatus TkIgual _ _ }
	';'            { ParserStatus TkPuntoYComa _ _ }
	'='            { ParserStatus TkAsignacion _ _ }
	"with"         { ParserStatus TkWith _ _ }
	"plot"         { ParserStatus TkPlot _ _ }
	"endfor"       { ParserStatus TkEndFor _ _ }
	"step"         { ParserStatus TkStep _ _ }
	"push_back"    { ParserStatus TkPushBack _ _ }
	estilo         { ParserStatus (TkEstilo $$) _ _ }
	identificador  { ParserStatus (TkIdentificador $$) _ _ }
	archivo        { ParserStatus (TkArchivo $$) _ _ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	PROGRAMA        rule  1
	SEC_INSTR       rules 2, 3, 4, 5
	INSTR           rules 6, 7, 8, 9, 10, 11, 12
	CICLO           rules 13, 14
	SEC_INSTR_CICLO rules 15, 16, 17
	EM              rules 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35
	SECUENCIA_EM    rules 36, 37
	SECUENCIA_ESTILO rules 38, 39
	COND            rules 40, 41, 42, 43, 44, 45, 46, 47, 48
	EG              rules 49, 50

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	"for"          shift, and enter state 5
	"plot"         shift, and enter state 6
	"push_back"    shift, and enter state 7
	identificador  shift, and enter state 8

	PROGRAMA       goto state 9
	SEC_INSTR      goto state 2
	INSTR          goto state 3
	CICLO          goto state 4

State 1


	"for"          shift, and enter state 5
	"plot"         shift, and enter state 6
	"push_back"    shift, and enter state 7
	identificador  shift, and enter state 8

	SEC_INSTR      goto state 2
	INSTR          goto state 3
	CICLO          goto state 4

State 2

	PROGRAMA -> SEC_INSTR .                             (rule 1)
	SEC_INSTR -> SEC_INSTR . INSTR ';'                  (rule 4)
	SEC_INSTR -> SEC_INSTR . CICLO                      (rule 5)

	"for"          shift, and enter state 5
	"plot"         shift, and enter state 6
	"push_back"    shift, and enter state 7
	identificador  shift, and enter state 8
	%eof           reduce using rule 1

	INSTR          goto state 26
	CICLO          goto state 27

State 3

	SEC_INSTR -> INSTR . ';'                            (rule 2)

	';'            shift, and enter state 25


State 4

	SEC_INSTR -> CICLO .                                (rule 3)

	"for"          reduce using rule 3
	"plot"         reduce using rule 3
	"push_back"    reduce using rule 3
	identificador  reduce using rule 3
	%eof           reduce using rule 3


State 5

	CICLO -> "for" . identificador "in" EM SEC_INSTR_CICLO "endfor"    (rule 13)
	CICLO -> "for" . identificador "in" EM "step" EM SEC_INSTR_CICLO "endfor"    (rule 14)

	identificador  shift, and enter state 24


State 6

	INSTR -> "plot" . EM ',' EG "with" '[' ']'          (rule 8)
	INSTR -> "plot" . EM ',' EG "with" '[' SECUENCIA_ESTILO ']'    (rule 9)
	INSTR -> "plot" . EM ',' EG "with" estilo           (rule 10)
	INSTR -> "plot" . EM ',' EG                         (rule 11)

	'-'            shift, and enter state 14
	int            shift, and enter state 15
	real           shift, and enter state 16
	constmat       shift, and enter state 17
	funcion        shift, and enter state 18
	'('            shift, and enter state 19
	'['            shift, and enter state 20
	"range"        shift, and enter state 21
	"if"           shift, and enter state 22
	identificador  shift, and enter state 23

	EM             goto state 13

State 7

	INSTR -> "push_back" . '(' identificador ',' EM ')'    (rule 12)

	'('            shift, and enter state 12


State 8

	INSTR -> identificador . '(' identificador ')' '=' EM    (rule 6)
	INSTR -> identificador . '=' EM                     (rule 7)

	'('            shift, and enter state 10
	'='            shift, and enter state 11


State 9

	%start_parse -> PROGRAMA .                          (rule 0)

	%eof           accept


State 10

	INSTR -> identificador '(' . identificador ')' '=' EM    (rule 6)

	identificador  shift, and enter state 47


State 11

	INSTR -> identificador '=' . EM                     (rule 7)

	'-'            shift, and enter state 14
	int            shift, and enter state 15
	real           shift, and enter state 16
	constmat       shift, and enter state 17
	funcion        shift, and enter state 18
	'('            shift, and enter state 19
	'['            shift, and enter state 20
	"range"        shift, and enter state 21
	"if"           shift, and enter state 22
	identificador  shift, and enter state 23

	EM             goto state 46

State 12

	INSTR -> "push_back" '(' . identificador ',' EM ')'    (rule 12)

	identificador  shift, and enter state 45


State 13

	INSTR -> "plot" EM . ',' EG "with" '[' ']'          (rule 8)
	INSTR -> "plot" EM . ',' EG "with" '[' SECUENCIA_ESTILO ']'    (rule 9)
	INSTR -> "plot" EM . ',' EG "with" estilo           (rule 10)
	INSTR -> "plot" EM . ',' EG                         (rule 11)
	EM -> EM . '+' EM                                   (rule 18)
	EM -> EM . '-' EM                                   (rule 19)
	EM -> EM . '*' EM                                   (rule 20)
	EM -> EM . '/' EM                                   (rule 21)
	EM -> EM . '^' EM                                   (rule 22)

	'+'            shift, and enter state 39
	'-'            shift, and enter state 40
	'*'            shift, and enter state 41
	'/'            shift, and enter state 42
	'^'            shift, and enter state 43
	','            shift, and enter state 44


State 14

	EM -> '-' . EM                                      (rule 23)

	'-'            shift, and enter state 14
	int            shift, and enter state 15
	real           shift, and enter state 16
	constmat       shift, and enter state 17
	funcion        shift, and enter state 18
	'('            shift, and enter state 19
	'['            shift, and enter state 20
	"range"        shift, and enter state 21
	"if"           shift, and enter state 22
	identificador  shift, and enter state 23

	EM             goto state 38

State 15

	EM -> int .                                         (rule 25)

	'+'            reduce using rule 25
	'-'            reduce using rule 25
	'*'            reduce using rule 25
	'/'            reduce using rule 25
	'^'            reduce using rule 25
	')'            reduce using rule 25
	']'            reduce using rule 25
	','            reduce using rule 25
	"for"          reduce using rule 25
	"AND"          reduce using rule 25
	"OR"           reduce using rule 25
	'<'            reduce using rule 25
	'>'            reduce using rule 25
	">="           reduce using rule 25
	"<="           reduce using rule 25
	"=="           reduce using rule 25
	';'            reduce using rule 25
	"with"         reduce using rule 25
	"plot"         reduce using rule 25
	"endfor"       reduce using rule 25
	"step"         reduce using rule 25
	"push_back"    reduce using rule 25
	identificador  reduce using rule 25


State 16

	EM -> real .                                        (rule 26)

	'+'            reduce using rule 26
	'-'            reduce using rule 26
	'*'            reduce using rule 26
	'/'            reduce using rule 26
	'^'            reduce using rule 26
	')'            reduce using rule 26
	']'            reduce using rule 26
	','            reduce using rule 26
	"for"          reduce using rule 26
	"AND"          reduce using rule 26
	"OR"           reduce using rule 26
	'<'            reduce using rule 26
	'>'            reduce using rule 26
	">="           reduce using rule 26
	"<="           reduce using rule 26
	"=="           reduce using rule 26
	';'            reduce using rule 26
	"with"         reduce using rule 26
	"plot"         reduce using rule 26
	"endfor"       reduce using rule 26
	"step"         reduce using rule 26
	"push_back"    reduce using rule 26
	identificador  reduce using rule 26


State 17

	EM -> constmat .                                    (rule 27)

	'+'            reduce using rule 27
	'-'            reduce using rule 27
	'*'            reduce using rule 27
	'/'            reduce using rule 27
	'^'            reduce using rule 27
	')'            reduce using rule 27
	']'            reduce using rule 27
	','            reduce using rule 27
	"for"          reduce using rule 27
	"AND"          reduce using rule 27
	"OR"           reduce using rule 27
	'<'            reduce using rule 27
	'>'            reduce using rule 27
	">="           reduce using rule 27
	"<="           reduce using rule 27
	"=="           reduce using rule 27
	';'            reduce using rule 27
	"with"         reduce using rule 27
	"plot"         reduce using rule 27
	"endfor"       reduce using rule 27
	"step"         reduce using rule 27
	"push_back"    reduce using rule 27
	identificador  reduce using rule 27


State 18

	EM -> funcion . '(' EM ')'                          (rule 28)

	'('            shift, and enter state 37


State 19

	EM -> '(' . EM ')'                                  (rule 24)

	'-'            shift, and enter state 14
	int            shift, and enter state 15
	real           shift, and enter state 16
	constmat       shift, and enter state 17
	funcion        shift, and enter state 18
	'('            shift, and enter state 19
	'['            shift, and enter state 20
	"range"        shift, and enter state 21
	"if"           shift, and enter state 22
	identificador  shift, and enter state 23

	EM             goto state 36

State 20

	EM -> '[' . ']'                                     (rule 31)
	EM -> '[' . SECUENCIA_EM ']'                        (rule 32)
	EM -> '[' . EM "for" identificador "in" EM ']'      (rule 34)

	'-'            shift, and enter state 14
	int            shift, and enter state 15
	real           shift, and enter state 16
	constmat       shift, and enter state 17
	funcion        shift, and enter state 18
	'('            shift, and enter state 19
	'['            shift, and enter state 20
	']'            shift, and enter state 35
	"range"        shift, and enter state 21
	"if"           shift, and enter state 22
	identificador  shift, and enter state 23

	EM             goto state 33
	SECUENCIA_EM   goto state 34

State 21

	EM -> "range" . '(' EM ',' EM ')'                   (rule 33)

	'('            shift, and enter state 32


State 22

	EM -> "if" . '(' COND ',' EM ',' EM ')'             (rule 35)

	'('            shift, and enter state 31


State 23

	EM -> identificador . '(' EM ')'                    (rule 29)
	EM -> identificador .                               (rule 30)

	'+'            reduce using rule 30
	'-'            reduce using rule 30
	'*'            reduce using rule 30
	'/'            reduce using rule 30
	'^'            reduce using rule 30
	'('            shift, and enter state 30
	')'            reduce using rule 30
	']'            reduce using rule 30
	','            reduce using rule 30
	"for"          reduce using rule 30
	"AND"          reduce using rule 30
	"OR"           reduce using rule 30
	'<'            reduce using rule 30
	'>'            reduce using rule 30
	">="           reduce using rule 30
	"<="           reduce using rule 30
	"=="           reduce using rule 30
	';'            reduce using rule 30
	"with"         reduce using rule 30
	"plot"         reduce using rule 30
	"endfor"       reduce using rule 30
	"step"         reduce using rule 30
	"push_back"    reduce using rule 30
	identificador  reduce using rule 30


State 24

	CICLO -> "for" identificador . "in" EM SEC_INSTR_CICLO "endfor"    (rule 13)
	CICLO -> "for" identificador . "in" EM "step" EM SEC_INSTR_CICLO "endfor"    (rule 14)

	"in"           shift, and enter state 29


State 25

	SEC_INSTR -> INSTR ';' .                            (rule 2)

	"for"          reduce using rule 2
	"plot"         reduce using rule 2
	"push_back"    reduce using rule 2
	identificador  reduce using rule 2
	%eof           reduce using rule 2


State 26

	SEC_INSTR -> SEC_INSTR INSTR . ';'                  (rule 4)

	';'            shift, and enter state 28


State 27

	SEC_INSTR -> SEC_INSTR CICLO .                      (rule 5)

	"for"          reduce using rule 5
	"plot"         reduce using rule 5
	"push_back"    reduce using rule 5
	identificador  reduce using rule 5
	%eof           reduce using rule 5


State 28

	SEC_INSTR -> SEC_INSTR INSTR ';' .                  (rule 4)

	"for"          reduce using rule 4
	"plot"         reduce using rule 4
	"push_back"    reduce using rule 4
	identificador  reduce using rule 4
	%eof           reduce using rule 4


State 29

	CICLO -> "for" identificador "in" . EM SEC_INSTR_CICLO "endfor"    (rule 13)
	CICLO -> "for" identificador "in" . EM "step" EM SEC_INSTR_CICLO "endfor"    (rule 14)

	'-'            shift, and enter state 14
	int            shift, and enter state 15
	real           shift, and enter state 16
	constmat       shift, and enter state 17
	funcion        shift, and enter state 18
	'('            shift, and enter state 19
	'['            shift, and enter state 20
	"range"        shift, and enter state 21
	"if"           shift, and enter state 22
	identificador  shift, and enter state 23

	EM             goto state 68

State 30

	EM -> identificador '(' . EM ')'                    (rule 29)

	'-'            shift, and enter state 14
	int            shift, and enter state 15
	real           shift, and enter state 16
	constmat       shift, and enter state 17
	funcion        shift, and enter state 18
	'('            shift, and enter state 19
	'['            shift, and enter state 20
	"range"        shift, and enter state 21
	"if"           shift, and enter state 22
	identificador  shift, and enter state 23

	EM             goto state 67

State 31

	EM -> "if" '(' . COND ',' EM ',' EM ')'             (rule 35)

	'-'            shift, and enter state 14
	int            shift, and enter state 15
	real           shift, and enter state 16
	constmat       shift, and enter state 17
	funcion        shift, and enter state 18
	'('            shift, and enter state 19
	'['            shift, and enter state 20
	"range"        shift, and enter state 21
	"if"           shift, and enter state 22
	"NOT"          shift, and enter state 66
	identificador  shift, and enter state 23

	EM             goto state 64
	COND           goto state 65

State 32

	EM -> "range" '(' . EM ',' EM ')'                   (rule 33)

	'-'            shift, and enter state 14
	int            shift, and enter state 15
	real           shift, and enter state 16
	constmat       shift, and enter state 17
	funcion        shift, and enter state 18
	'('            shift, and enter state 19
	'['            shift, and enter state 20
	"range"        shift, and enter state 21
	"if"           shift, and enter state 22
	identificador  shift, and enter state 23

	EM             goto state 63

State 33

	EM -> EM . '+' EM                                   (rule 18)
	EM -> EM . '-' EM                                   (rule 19)
	EM -> EM . '*' EM                                   (rule 20)
	EM -> EM . '/' EM                                   (rule 21)
	EM -> EM . '^' EM                                   (rule 22)
	EM -> '[' EM . "for" identificador "in" EM ']'      (rule 34)
	SECUENCIA_EM -> EM .                                (rule 36)

	'+'            shift, and enter state 39
	'-'            shift, and enter state 40
	'*'            shift, and enter state 41
	'/'            shift, and enter state 42
	'^'            shift, and enter state 43
	']'            reduce using rule 36
	','            reduce using rule 36
	"for"          shift, and enter state 62


State 34

	EM -> '[' SECUENCIA_EM . ']'                        (rule 32)
	SECUENCIA_EM -> SECUENCIA_EM . ',' EM               (rule 37)

	']'            shift, and enter state 60
	','            shift, and enter state 61


State 35

	EM -> '[' ']' .                                     (rule 31)

	'+'            reduce using rule 31
	'-'            reduce using rule 31
	'*'            reduce using rule 31
	'/'            reduce using rule 31
	'^'            reduce using rule 31
	')'            reduce using rule 31
	']'            reduce using rule 31
	','            reduce using rule 31
	"for"          reduce using rule 31
	"AND"          reduce using rule 31
	"OR"           reduce using rule 31
	'<'            reduce using rule 31
	'>'            reduce using rule 31
	">="           reduce using rule 31
	"<="           reduce using rule 31
	"=="           reduce using rule 31
	';'            reduce using rule 31
	"with"         reduce using rule 31
	"plot"         reduce using rule 31
	"endfor"       reduce using rule 31
	"step"         reduce using rule 31
	"push_back"    reduce using rule 31
	identificador  reduce using rule 31


State 36

	EM -> EM . '+' EM                                   (rule 18)
	EM -> EM . '-' EM                                   (rule 19)
	EM -> EM . '*' EM                                   (rule 20)
	EM -> EM . '/' EM                                   (rule 21)
	EM -> EM . '^' EM                                   (rule 22)
	EM -> '(' EM . ')'                                  (rule 24)

	'+'            shift, and enter state 39
	'-'            shift, and enter state 40
	'*'            shift, and enter state 41
	'/'            shift, and enter state 42
	'^'            shift, and enter state 43
	')'            shift, and enter state 59


State 37

	EM -> funcion '(' . EM ')'                          (rule 28)

	'-'            shift, and enter state 14
	int            shift, and enter state 15
	real           shift, and enter state 16
	constmat       shift, and enter state 17
	funcion        shift, and enter state 18
	'('            shift, and enter state 19
	'['            shift, and enter state 20
	"range"        shift, and enter state 21
	"if"           shift, and enter state 22
	identificador  shift, and enter state 23

	EM             goto state 58

State 38

	EM -> EM . '+' EM                                   (rule 18)
	EM -> EM . '-' EM                                   (rule 19)
	EM -> EM . '*' EM                                   (rule 20)
	EM -> EM . '/' EM                                   (rule 21)
	EM -> EM . '^' EM                                   (rule 22)
	EM -> '-' EM .                                      (rule 23)

	'+'            reduce using rule 23
	'-'            reduce using rule 23
	'*'            reduce using rule 23
	'/'            reduce using rule 23
	'^'            shift, and enter state 43
	')'            reduce using rule 23
	']'            reduce using rule 23
	','            reduce using rule 23
	"for"          reduce using rule 23
	"AND"          reduce using rule 23
	"OR"           reduce using rule 23
	'<'            reduce using rule 23
	'>'            reduce using rule 23
	">="           reduce using rule 23
	"<="           reduce using rule 23
	"=="           reduce using rule 23
	';'            reduce using rule 23
	"with"         reduce using rule 23
	"plot"         reduce using rule 23
	"endfor"       reduce using rule 23
	"step"         reduce using rule 23
	"push_back"    reduce using rule 23
	identificador  reduce using rule 23


State 39

	EM -> EM '+' . EM                                   (rule 18)

	'-'            shift, and enter state 14
	int            shift, and enter state 15
	real           shift, and enter state 16
	constmat       shift, and enter state 17
	funcion        shift, and enter state 18
	'('            shift, and enter state 19
	'['            shift, and enter state 20
	"range"        shift, and enter state 21
	"if"           shift, and enter state 22
	identificador  shift, and enter state 23

	EM             goto state 57

State 40

	EM -> EM '-' . EM                                   (rule 19)

	'-'            shift, and enter state 14
	int            shift, and enter state 15
	real           shift, and enter state 16
	constmat       shift, and enter state 17
	funcion        shift, and enter state 18
	'('            shift, and enter state 19
	'['            shift, and enter state 20
	"range"        shift, and enter state 21
	"if"           shift, and enter state 22
	identificador  shift, and enter state 23

	EM             goto state 56

State 41

	EM -> EM '*' . EM                                   (rule 20)

	'-'            shift, and enter state 14
	int            shift, and enter state 15
	real           shift, and enter state 16
	constmat       shift, and enter state 17
	funcion        shift, and enter state 18
	'('            shift, and enter state 19
	'['            shift, and enter state 20
	"range"        shift, and enter state 21
	"if"           shift, and enter state 22
	identificador  shift, and enter state 23

	EM             goto state 55

State 42

	EM -> EM '/' . EM                                   (rule 21)

	'-'            shift, and enter state 14
	int            shift, and enter state 15
	real           shift, and enter state 16
	constmat       shift, and enter state 17
	funcion        shift, and enter state 18
	'('            shift, and enter state 19
	'['            shift, and enter state 20
	"range"        shift, and enter state 21
	"if"           shift, and enter state 22
	identificador  shift, and enter state 23

	EM             goto state 54

State 43

	EM -> EM '^' . EM                                   (rule 22)

	'-'            shift, and enter state 14
	int            shift, and enter state 15
	real           shift, and enter state 16
	constmat       shift, and enter state 17
	funcion        shift, and enter state 18
	'('            shift, and enter state 19
	'['            shift, and enter state 20
	"range"        shift, and enter state 21
	"if"           shift, and enter state 22
	identificador  shift, and enter state 23

	EM             goto state 53

State 44

	INSTR -> "plot" EM ',' . EG "with" '[' ']'          (rule 8)
	INSTR -> "plot" EM ',' . EG "with" '[' SECUENCIA_ESTILO ']'    (rule 9)
	INSTR -> "plot" EM ',' . EG "with" estilo           (rule 10)
	INSTR -> "plot" EM ',' . EG                         (rule 11)

	'-'            shift, and enter state 14
	int            shift, and enter state 15
	real           shift, and enter state 16
	constmat       shift, and enter state 17
	funcion        shift, and enter state 18
	'('            shift, and enter state 19
	'['            shift, and enter state 20
	"range"        shift, and enter state 21
	"if"           shift, and enter state 22
	identificador  shift, and enter state 23
	archivo        shift, and enter state 52

	EM             goto state 50
	EG             goto state 51

State 45

	INSTR -> "push_back" '(' identificador . ',' EM ')'    (rule 12)

	','            shift, and enter state 49


State 46

	INSTR -> identificador '=' EM .                     (rule 7)
	EM -> EM . '+' EM                                   (rule 18)
	EM -> EM . '-' EM                                   (rule 19)
	EM -> EM . '*' EM                                   (rule 20)
	EM -> EM . '/' EM                                   (rule 21)
	EM -> EM . '^' EM                                   (rule 22)

	'+'            shift, and enter state 39
	'-'            shift, and enter state 40
	'*'            shift, and enter state 41
	'/'            shift, and enter state 42
	'^'            shift, and enter state 43
	';'            reduce using rule 7
	"endfor"       reduce using rule 7


State 47

	INSTR -> identificador '(' identificador . ')' '=' EM    (rule 6)

	')'            shift, and enter state 48


State 48

	INSTR -> identificador '(' identificador ')' . '=' EM    (rule 6)

	'='            shift, and enter state 89


State 49

	INSTR -> "push_back" '(' identificador ',' . EM ')'    (rule 12)

	'-'            shift, and enter state 14
	int            shift, and enter state 15
	real           shift, and enter state 16
	constmat       shift, and enter state 17
	funcion        shift, and enter state 18
	'('            shift, and enter state 19
	'['            shift, and enter state 20
	"range"        shift, and enter state 21
	"if"           shift, and enter state 22
	identificador  shift, and enter state 23

	EM             goto state 88

State 50

	EM -> EM . '+' EM                                   (rule 18)
	EM -> EM . '-' EM                                   (rule 19)
	EM -> EM . '*' EM                                   (rule 20)
	EM -> EM . '/' EM                                   (rule 21)
	EM -> EM . '^' EM                                   (rule 22)
	EG -> EM .                                          (rule 49)

	'+'            shift, and enter state 39
	'-'            shift, and enter state 40
	'*'            shift, and enter state 41
	'/'            shift, and enter state 42
	'^'            shift, and enter state 43
	';'            reduce using rule 49
	"with"         reduce using rule 49
	"endfor"       reduce using rule 49


State 51

	INSTR -> "plot" EM ',' EG . "with" '[' ']'          (rule 8)
	INSTR -> "plot" EM ',' EG . "with" '[' SECUENCIA_ESTILO ']'    (rule 9)
	INSTR -> "plot" EM ',' EG . "with" estilo           (rule 10)
	INSTR -> "plot" EM ',' EG .                         (rule 11)

	';'            reduce using rule 11
	"with"         shift, and enter state 87
	"endfor"       reduce using rule 11


State 52

	EG -> archivo .                                     (rule 50)

	';'            reduce using rule 50
	"with"         reduce using rule 50
	"endfor"       reduce using rule 50


State 53

	EM -> EM . '+' EM                                   (rule 18)
	EM -> EM . '-' EM                                   (rule 19)
	EM -> EM . '*' EM                                   (rule 20)
	EM -> EM . '/' EM                                   (rule 21)
	EM -> EM . '^' EM                                   (rule 22)
	EM -> EM '^' EM .                                   (rule 22)

	'+'            reduce using rule 22
	'-'            reduce using rule 22
	'*'            reduce using rule 22
	'/'            reduce using rule 22
	'^'            shift, and enter state 43
	')'            reduce using rule 22
	']'            reduce using rule 22
	','            reduce using rule 22
	"for"          reduce using rule 22
	"AND"          reduce using rule 22
	"OR"           reduce using rule 22
	'<'            reduce using rule 22
	'>'            reduce using rule 22
	">="           reduce using rule 22
	"<="           reduce using rule 22
	"=="           reduce using rule 22
	';'            reduce using rule 22
	"with"         reduce using rule 22
	"plot"         reduce using rule 22
	"endfor"       reduce using rule 22
	"step"         reduce using rule 22
	"push_back"    reduce using rule 22
	identificador  reduce using rule 22


State 54

	EM -> EM . '+' EM                                   (rule 18)
	EM -> EM . '-' EM                                   (rule 19)
	EM -> EM . '*' EM                                   (rule 20)
	EM -> EM . '/' EM                                   (rule 21)
	EM -> EM '/' EM .                                   (rule 21)
	EM -> EM . '^' EM                                   (rule 22)

	'+'            reduce using rule 21
	'-'            reduce using rule 21
	'*'            reduce using rule 21
	'/'            reduce using rule 21
	'^'            shift, and enter state 43
	')'            reduce using rule 21
	']'            reduce using rule 21
	','            reduce using rule 21
	"for"          reduce using rule 21
	"AND"          reduce using rule 21
	"OR"           reduce using rule 21
	'<'            reduce using rule 21
	'>'            reduce using rule 21
	">="           reduce using rule 21
	"<="           reduce using rule 21
	"=="           reduce using rule 21
	';'            reduce using rule 21
	"with"         reduce using rule 21
	"plot"         reduce using rule 21
	"endfor"       reduce using rule 21
	"step"         reduce using rule 21
	"push_back"    reduce using rule 21
	identificador  reduce using rule 21


State 55

	EM -> EM . '+' EM                                   (rule 18)
	EM -> EM . '-' EM                                   (rule 19)
	EM -> EM . '*' EM                                   (rule 20)
	EM -> EM '*' EM .                                   (rule 20)
	EM -> EM . '/' EM                                   (rule 21)
	EM -> EM . '^' EM                                   (rule 22)

	'+'            reduce using rule 20
	'-'            reduce using rule 20
	'*'            reduce using rule 20
	'/'            reduce using rule 20
	'^'            shift, and enter state 43
	')'            reduce using rule 20
	']'            reduce using rule 20
	','            reduce using rule 20
	"for"          reduce using rule 20
	"AND"          reduce using rule 20
	"OR"           reduce using rule 20
	'<'            reduce using rule 20
	'>'            reduce using rule 20
	">="           reduce using rule 20
	"<="           reduce using rule 20
	"=="           reduce using rule 20
	';'            reduce using rule 20
	"with"         reduce using rule 20
	"plot"         reduce using rule 20
	"endfor"       reduce using rule 20
	"step"         reduce using rule 20
	"push_back"    reduce using rule 20
	identificador  reduce using rule 20


State 56

	EM -> EM . '+' EM                                   (rule 18)
	EM -> EM . '-' EM                                   (rule 19)
	EM -> EM '-' EM .                                   (rule 19)
	EM -> EM . '*' EM                                   (rule 20)
	EM -> EM . '/' EM                                   (rule 21)
	EM -> EM . '^' EM                                   (rule 22)

	'+'            reduce using rule 19
	'-'            reduce using rule 19
	'*'            shift, and enter state 41
	'/'            shift, and enter state 42
	'^'            shift, and enter state 43
	')'            reduce using rule 19
	']'            reduce using rule 19
	','            reduce using rule 19
	"for"          reduce using rule 19
	"AND"          reduce using rule 19
	"OR"           reduce using rule 19
	'<'            reduce using rule 19
	'>'            reduce using rule 19
	">="           reduce using rule 19
	"<="           reduce using rule 19
	"=="           reduce using rule 19
	';'            reduce using rule 19
	"with"         reduce using rule 19
	"plot"         reduce using rule 19
	"endfor"       reduce using rule 19
	"step"         reduce using rule 19
	"push_back"    reduce using rule 19
	identificador  reduce using rule 19


State 57

	EM -> EM . '+' EM                                   (rule 18)
	EM -> EM '+' EM .                                   (rule 18)
	EM -> EM . '-' EM                                   (rule 19)
	EM -> EM . '*' EM                                   (rule 20)
	EM -> EM . '/' EM                                   (rule 21)
	EM -> EM . '^' EM                                   (rule 22)

	'+'            reduce using rule 18
	'-'            reduce using rule 18
	'*'            shift, and enter state 41
	'/'            shift, and enter state 42
	'^'            shift, and enter state 43
	')'            reduce using rule 18
	']'            reduce using rule 18
	','            reduce using rule 18
	"for"          reduce using rule 18
	"AND"          reduce using rule 18
	"OR"           reduce using rule 18
	'<'            reduce using rule 18
	'>'            reduce using rule 18
	">="           reduce using rule 18
	"<="           reduce using rule 18
	"=="           reduce using rule 18
	';'            reduce using rule 18
	"with"         reduce using rule 18
	"plot"         reduce using rule 18
	"endfor"       reduce using rule 18
	"step"         reduce using rule 18
	"push_back"    reduce using rule 18
	identificador  reduce using rule 18


State 58

	EM -> EM . '+' EM                                   (rule 18)
	EM -> EM . '-' EM                                   (rule 19)
	EM -> EM . '*' EM                                   (rule 20)
	EM -> EM . '/' EM                                   (rule 21)
	EM -> EM . '^' EM                                   (rule 22)
	EM -> funcion '(' EM . ')'                          (rule 28)

	'+'            shift, and enter state 39
	'-'            shift, and enter state 40
	'*'            shift, and enter state 41
	'/'            shift, and enter state 42
	'^'            shift, and enter state 43
	')'            shift, and enter state 86


State 59

	EM -> '(' EM ')' .                                  (rule 24)

	'+'            reduce using rule 24
	'-'            reduce using rule 24
	'*'            reduce using rule 24
	'/'            reduce using rule 24
	'^'            reduce using rule 24
	')'            reduce using rule 24
	']'            reduce using rule 24
	','            reduce using rule 24
	"for"          reduce using rule 24
	"AND"          reduce using rule 24
	"OR"           reduce using rule 24
	'<'            reduce using rule 24
	'>'            reduce using rule 24
	">="           reduce using rule 24
	"<="           reduce using rule 24
	"=="           reduce using rule 24
	';'            reduce using rule 24
	"with"         reduce using rule 24
	"plot"         reduce using rule 24
	"endfor"       reduce using rule 24
	"step"         reduce using rule 24
	"push_back"    reduce using rule 24
	identificador  reduce using rule 24


State 60

	EM -> '[' SECUENCIA_EM ']' .                        (rule 32)

	'+'            reduce using rule 32
	'-'            reduce using rule 32
	'*'            reduce using rule 32
	'/'            reduce using rule 32
	'^'            reduce using rule 32
	')'            reduce using rule 32
	']'            reduce using rule 32
	','            reduce using rule 32
	"for"          reduce using rule 32
	"AND"          reduce using rule 32
	"OR"           reduce using rule 32
	'<'            reduce using rule 32
	'>'            reduce using rule 32
	">="           reduce using rule 32
	"<="           reduce using rule 32
	"=="           reduce using rule 32
	';'            reduce using rule 32
	"with"         reduce using rule 32
	"plot"         reduce using rule 32
	"endfor"       reduce using rule 32
	"step"         reduce using rule 32
	"push_back"    reduce using rule 32
	identificador  reduce using rule 32


State 61

	SECUENCIA_EM -> SECUENCIA_EM ',' . EM               (rule 37)

	'-'            shift, and enter state 14
	int            shift, and enter state 15
	real           shift, and enter state 16
	constmat       shift, and enter state 17
	funcion        shift, and enter state 18
	'('            shift, and enter state 19
	'['            shift, and enter state 20
	"range"        shift, and enter state 21
	"if"           shift, and enter state 22
	identificador  shift, and enter state 23

	EM             goto state 85

State 62

	EM -> '[' EM "for" . identificador "in" EM ']'      (rule 34)

	identificador  shift, and enter state 84


State 63

	EM -> EM . '+' EM                                   (rule 18)
	EM -> EM . '-' EM                                   (rule 19)
	EM -> EM . '*' EM                                   (rule 20)
	EM -> EM . '/' EM                                   (rule 21)
	EM -> EM . '^' EM                                   (rule 22)
	EM -> "range" '(' EM . ',' EM ')'                   (rule 33)

	'+'            shift, and enter state 39
	'-'            shift, and enter state 40
	'*'            shift, and enter state 41
	'/'            shift, and enter state 42
	'^'            shift, and enter state 43
	','            shift, and enter state 83


State 64

	EM -> EM . '+' EM                                   (rule 18)
	EM -> EM . '-' EM                                   (rule 19)
	EM -> EM . '*' EM                                   (rule 20)
	EM -> EM . '/' EM                                   (rule 21)
	EM -> EM . '^' EM                                   (rule 22)
	COND -> EM .                                        (rule 40)

	'+'            shift, and enter state 39
	'-'            shift, and enter state 40
	'*'            shift, and enter state 41
	'/'            shift, and enter state 42
	'^'            shift, and enter state 43
	','            reduce using rule 40
	"AND"          reduce using rule 40
	"OR"           reduce using rule 40
	'<'            reduce using rule 40
	'>'            reduce using rule 40
	">="           reduce using rule 40
	"<="           reduce using rule 40
	"=="           reduce using rule 40


State 65

	EM -> "if" '(' COND . ',' EM ',' EM ')'             (rule 35)
	COND -> COND . "AND" COND                           (rule 41)
	COND -> COND . "OR" COND                            (rule 42)
	COND -> COND . '>' COND                             (rule 44)
	COND -> COND . '<' COND                             (rule 45)
	COND -> COND . "<=" COND                            (rule 46)
	COND -> COND . ">=" COND                            (rule 47)
	COND -> COND . "==" COND                            (rule 48)

	','            shift, and enter state 75
	"AND"          shift, and enter state 76
	"OR"           shift, and enter state 77
	'<'            shift, and enter state 78
	'>'            shift, and enter state 79
	">="           shift, and enter state 80
	"<="           shift, and enter state 81
	"=="           shift, and enter state 82


State 66

	COND -> "NOT" . COND                                (rule 43)

	'-'            shift, and enter state 14
	int            shift, and enter state 15
	real           shift, and enter state 16
	constmat       shift, and enter state 17
	funcion        shift, and enter state 18
	'('            shift, and enter state 19
	'['            shift, and enter state 20
	"range"        shift, and enter state 21
	"if"           shift, and enter state 22
	"NOT"          shift, and enter state 66
	identificador  shift, and enter state 23

	EM             goto state 64
	COND           goto state 74

State 67

	EM -> EM . '+' EM                                   (rule 18)
	EM -> EM . '-' EM                                   (rule 19)
	EM -> EM . '*' EM                                   (rule 20)
	EM -> EM . '/' EM                                   (rule 21)
	EM -> EM . '^' EM                                   (rule 22)
	EM -> identificador '(' EM . ')'                    (rule 29)

	'+'            shift, and enter state 39
	'-'            shift, and enter state 40
	'*'            shift, and enter state 41
	'/'            shift, and enter state 42
	'^'            shift, and enter state 43
	')'            shift, and enter state 73


State 68

	CICLO -> "for" identificador "in" EM . SEC_INSTR_CICLO "endfor"    (rule 13)
	CICLO -> "for" identificador "in" EM . "step" EM SEC_INSTR_CICLO "endfor"    (rule 14)
	EM -> EM . '+' EM                                   (rule 18)
	EM -> EM . '-' EM                                   (rule 19)
	EM -> EM . '*' EM                                   (rule 20)
	EM -> EM . '/' EM                                   (rule 21)
	EM -> EM . '^' EM                                   (rule 22)

	'+'            shift, and enter state 39
	'-'            shift, and enter state 40
	'*'            shift, and enter state 41
	'/'            shift, and enter state 42
	'^'            shift, and enter state 43
	"for"          shift, and enter state 5
	"plot"         shift, and enter state 6
	"step"         shift, and enter state 72
	"push_back"    shift, and enter state 7
	identificador  shift, and enter state 8

	INSTR          goto state 69
	CICLO          goto state 70
	SEC_INSTR_CICLOgoto state 71

State 69

	SEC_INSTR_CICLO -> INSTR .                          (rule 15)

	';'            reduce using rule 15
	"endfor"       reduce using rule 15


State 70

	SEC_INSTR_CICLO -> CICLO .                          (rule 16)

	';'            reduce using rule 16
	"endfor"       reduce using rule 16


State 71

	CICLO -> "for" identificador "in" EM SEC_INSTR_CICLO . "endfor"    (rule 13)
	SEC_INSTR_CICLO -> SEC_INSTR_CICLO . ';' INSTR      (rule 17)

	';'            shift, and enter state 105
	"endfor"       shift, and enter state 106


State 72

	CICLO -> "for" identificador "in" EM "step" . EM SEC_INSTR_CICLO "endfor"    (rule 14)

	'-'            shift, and enter state 14
	int            shift, and enter state 15
	real           shift, and enter state 16
	constmat       shift, and enter state 17
	funcion        shift, and enter state 18
	'('            shift, and enter state 19
	'['            shift, and enter state 20
	"range"        shift, and enter state 21
	"if"           shift, and enter state 22
	identificador  shift, and enter state 23

	EM             goto state 104

State 73

	EM -> identificador '(' EM ')' .                    (rule 29)

	'+'            reduce using rule 29
	'-'            reduce using rule 29
	'*'            reduce using rule 29
	'/'            reduce using rule 29
	'^'            reduce using rule 29
	')'            reduce using rule 29
	']'            reduce using rule 29
	','            reduce using rule 29
	"for"          reduce using rule 29
	"AND"          reduce using rule 29
	"OR"           reduce using rule 29
	'<'            reduce using rule 29
	'>'            reduce using rule 29
	">="           reduce using rule 29
	"<="           reduce using rule 29
	"=="           reduce using rule 29
	';'            reduce using rule 29
	"with"         reduce using rule 29
	"plot"         reduce using rule 29
	"endfor"       reduce using rule 29
	"step"         reduce using rule 29
	"push_back"    reduce using rule 29
	identificador  reduce using rule 29


State 74

	COND -> COND . "AND" COND                           (rule 41)
	COND -> COND . "OR" COND                            (rule 42)
	COND -> "NOT" COND .                                (rule 43)
	COND -> COND . '>' COND                             (rule 44)
	COND -> COND . '<' COND                             (rule 45)
	COND -> COND . "<=" COND                            (rule 46)
	COND -> COND . ">=" COND                            (rule 47)
	COND -> COND . "==" COND                            (rule 48)

	','            reduce using rule 43
	"AND"          reduce using rule 43
	"OR"           reduce using rule 43
	'<'            shift, and enter state 78
	'>'            shift, and enter state 79
	">="           shift, and enter state 80
	"<="           shift, and enter state 81
	"=="           shift, and enter state 82


State 75

	EM -> "if" '(' COND ',' . EM ',' EM ')'             (rule 35)

	'-'            shift, and enter state 14
	int            shift, and enter state 15
	real           shift, and enter state 16
	constmat       shift, and enter state 17
	funcion        shift, and enter state 18
	'('            shift, and enter state 19
	'['            shift, and enter state 20
	"range"        shift, and enter state 21
	"if"           shift, and enter state 22
	identificador  shift, and enter state 23

	EM             goto state 103

State 76

	COND -> COND "AND" . COND                           (rule 41)

	'-'            shift, and enter state 14
	int            shift, and enter state 15
	real           shift, and enter state 16
	constmat       shift, and enter state 17
	funcion        shift, and enter state 18
	'('            shift, and enter state 19
	'['            shift, and enter state 20
	"range"        shift, and enter state 21
	"if"           shift, and enter state 22
	"NOT"          shift, and enter state 66
	identificador  shift, and enter state 23

	EM             goto state 64
	COND           goto state 102

State 77

	COND -> COND "OR" . COND                            (rule 42)

	'-'            shift, and enter state 14
	int            shift, and enter state 15
	real           shift, and enter state 16
	constmat       shift, and enter state 17
	funcion        shift, and enter state 18
	'('            shift, and enter state 19
	'['            shift, and enter state 20
	"range"        shift, and enter state 21
	"if"           shift, and enter state 22
	"NOT"          shift, and enter state 66
	identificador  shift, and enter state 23

	EM             goto state 64
	COND           goto state 101

State 78

	COND -> COND '<' . COND                             (rule 45)

	'-'            shift, and enter state 14
	int            shift, and enter state 15
	real           shift, and enter state 16
	constmat       shift, and enter state 17
	funcion        shift, and enter state 18
	'('            shift, and enter state 19
	'['            shift, and enter state 20
	"range"        shift, and enter state 21
	"if"           shift, and enter state 22
	"NOT"          shift, and enter state 66
	identificador  shift, and enter state 23

	EM             goto state 64
	COND           goto state 100

State 79

	COND -> COND '>' . COND                             (rule 44)

	'-'            shift, and enter state 14
	int            shift, and enter state 15
	real           shift, and enter state 16
	constmat       shift, and enter state 17
	funcion        shift, and enter state 18
	'('            shift, and enter state 19
	'['            shift, and enter state 20
	"range"        shift, and enter state 21
	"if"           shift, and enter state 22
	"NOT"          shift, and enter state 66
	identificador  shift, and enter state 23

	EM             goto state 64
	COND           goto state 99

State 80

	COND -> COND ">=" . COND                            (rule 47)

	'-'            shift, and enter state 14
	int            shift, and enter state 15
	real           shift, and enter state 16
	constmat       shift, and enter state 17
	funcion        shift, and enter state 18
	'('            shift, and enter state 19
	'['            shift, and enter state 20
	"range"        shift, and enter state 21
	"if"           shift, and enter state 22
	"NOT"          shift, and enter state 66
	identificador  shift, and enter state 23

	EM             goto state 64
	COND           goto state 98

State 81

	COND -> COND "<=" . COND                            (rule 46)

	'-'            shift, and enter state 14
	int            shift, and enter state 15
	real           shift, and enter state 16
	constmat       shift, and enter state 17
	funcion        shift, and enter state 18
	'('            shift, and enter state 19
	'['            shift, and enter state 20
	"range"        shift, and enter state 21
	"if"           shift, and enter state 22
	"NOT"          shift, and enter state 66
	identificador  shift, and enter state 23

	EM             goto state 64
	COND           goto state 97

State 82

	COND -> COND "==" . COND                            (rule 48)

	'-'            shift, and enter state 14
	int            shift, and enter state 15
	real           shift, and enter state 16
	constmat       shift, and enter state 17
	funcion        shift, and enter state 18
	'('            shift, and enter state 19
	'['            shift, and enter state 20
	"range"        shift, and enter state 21
	"if"           shift, and enter state 22
	"NOT"          shift, and enter state 66
	identificador  shift, and enter state 23

	EM             goto state 64
	COND           goto state 96

State 83

	EM -> "range" '(' EM ',' . EM ')'                   (rule 33)

	'-'            shift, and enter state 14
	int            shift, and enter state 15
	real           shift, and enter state 16
	constmat       shift, and enter state 17
	funcion        shift, and enter state 18
	'('            shift, and enter state 19
	'['            shift, and enter state 20
	"range"        shift, and enter state 21
	"if"           shift, and enter state 22
	identificador  shift, and enter state 23

	EM             goto state 95

State 84

	EM -> '[' EM "for" identificador . "in" EM ']'      (rule 34)

	"in"           shift, and enter state 94


State 85

	EM -> EM . '+' EM                                   (rule 18)
	EM -> EM . '-' EM                                   (rule 19)
	EM -> EM . '*' EM                                   (rule 20)
	EM -> EM . '/' EM                                   (rule 21)
	EM -> EM . '^' EM                                   (rule 22)
	SECUENCIA_EM -> SECUENCIA_EM ',' EM .               (rule 37)

	'+'            shift, and enter state 39
	'-'            shift, and enter state 40
	'*'            shift, and enter state 41
	'/'            shift, and enter state 42
	'^'            shift, and enter state 43
	']'            reduce using rule 37
	','            reduce using rule 37


State 86

	EM -> funcion '(' EM ')' .                          (rule 28)

	'+'            reduce using rule 28
	'-'            reduce using rule 28
	'*'            reduce using rule 28
	'/'            reduce using rule 28
	'^'            reduce using rule 28
	')'            reduce using rule 28
	']'            reduce using rule 28
	','            reduce using rule 28
	"for"          reduce using rule 28
	"AND"          reduce using rule 28
	"OR"           reduce using rule 28
	'<'            reduce using rule 28
	'>'            reduce using rule 28
	">="           reduce using rule 28
	"<="           reduce using rule 28
	"=="           reduce using rule 28
	';'            reduce using rule 28
	"with"         reduce using rule 28
	"plot"         reduce using rule 28
	"endfor"       reduce using rule 28
	"step"         reduce using rule 28
	"push_back"    reduce using rule 28
	identificador  reduce using rule 28


State 87

	INSTR -> "plot" EM ',' EG "with" . '[' ']'          (rule 8)
	INSTR -> "plot" EM ',' EG "with" . '[' SECUENCIA_ESTILO ']'    (rule 9)
	INSTR -> "plot" EM ',' EG "with" . estilo           (rule 10)

	'['            shift, and enter state 92
	estilo         shift, and enter state 93


State 88

	INSTR -> "push_back" '(' identificador ',' EM . ')'    (rule 12)
	EM -> EM . '+' EM                                   (rule 18)
	EM -> EM . '-' EM                                   (rule 19)
	EM -> EM . '*' EM                                   (rule 20)
	EM -> EM . '/' EM                                   (rule 21)
	EM -> EM . '^' EM                                   (rule 22)

	'+'            shift, and enter state 39
	'-'            shift, and enter state 40
	'*'            shift, and enter state 41
	'/'            shift, and enter state 42
	'^'            shift, and enter state 43
	')'            shift, and enter state 91


State 89

	INSTR -> identificador '(' identificador ')' '=' . EM    (rule 6)

	'-'            shift, and enter state 14
	int            shift, and enter state 15
	real           shift, and enter state 16
	constmat       shift, and enter state 17
	funcion        shift, and enter state 18
	'('            shift, and enter state 19
	'['            shift, and enter state 20
	"range"        shift, and enter state 21
	"if"           shift, and enter state 22
	identificador  shift, and enter state 23

	EM             goto state 90

State 90

	INSTR -> identificador '(' identificador ')' '=' EM .    (rule 6)
	EM -> EM . '+' EM                                   (rule 18)
	EM -> EM . '-' EM                                   (rule 19)
	EM -> EM . '*' EM                                   (rule 20)
	EM -> EM . '/' EM                                   (rule 21)
	EM -> EM . '^' EM                                   (rule 22)

	'+'            shift, and enter state 39
	'-'            shift, and enter state 40
	'*'            shift, and enter state 41
	'/'            shift, and enter state 42
	'^'            shift, and enter state 43
	';'            reduce using rule 6
	"endfor"       reduce using rule 6


State 91

	INSTR -> "push_back" '(' identificador ',' EM ')' .    (rule 12)

	';'            reduce using rule 12
	"endfor"       reduce using rule 12


State 92

	INSTR -> "plot" EM ',' EG "with" '[' . ']'          (rule 8)
	INSTR -> "plot" EM ',' EG "with" '[' . SECUENCIA_ESTILO ']'    (rule 9)

	']'            shift, and enter state 113
	estilo         shift, and enter state 114

	SECUENCIA_ESTILOgoto state 112

State 93

	INSTR -> "plot" EM ',' EG "with" estilo .           (rule 10)

	';'            reduce using rule 10
	"endfor"       reduce using rule 10


State 94

	EM -> '[' EM "for" identificador "in" . EM ']'      (rule 34)

	'-'            shift, and enter state 14
	int            shift, and enter state 15
	real           shift, and enter state 16
	constmat       shift, and enter state 17
	funcion        shift, and enter state 18
	'('            shift, and enter state 19
	'['            shift, and enter state 20
	"range"        shift, and enter state 21
	"if"           shift, and enter state 22
	identificador  shift, and enter state 23

	EM             goto state 111

State 95

	EM -> EM . '+' EM                                   (rule 18)
	EM -> EM . '-' EM                                   (rule 19)
	EM -> EM . '*' EM                                   (rule 20)
	EM -> EM . '/' EM                                   (rule 21)
	EM -> EM . '^' EM                                   (rule 22)
	EM -> "range" '(' EM ',' EM . ')'                   (rule 33)

	'+'            shift, and enter state 39
	'-'            shift, and enter state 40
	'*'            shift, and enter state 41
	'/'            shift, and enter state 42
	'^'            shift, and enter state 43
	')'            shift, and enter state 110


State 96

	COND -> COND . "AND" COND                           (rule 41)
	COND -> COND . "OR" COND                            (rule 42)
	COND -> COND . '>' COND                             (rule 44)
	COND -> COND . '<' COND                             (rule 45)
	COND -> COND . "<=" COND                            (rule 46)
	COND -> COND . ">=" COND                            (rule 47)
	COND -> COND . "==" COND                            (rule 48)
	COND -> COND "==" COND .                            (rule 48)

	','            reduce using rule 48
	"AND"          reduce using rule 48
	"OR"           reduce using rule 48
	'<'            fail
	'>'            fail
	">="           fail
	"<="           fail
	"=="           fail


State 97

	COND -> COND . "AND" COND                           (rule 41)
	COND -> COND . "OR" COND                            (rule 42)
	COND -> COND . '>' COND                             (rule 44)
	COND -> COND . '<' COND                             (rule 45)
	COND -> COND . "<=" COND                            (rule 46)
	COND -> COND "<=" COND .                            (rule 46)
	COND -> COND . ">=" COND                            (rule 47)
	COND -> COND . "==" COND                            (rule 48)

	','            reduce using rule 46
	"AND"          reduce using rule 46
	"OR"           reduce using rule 46
	'<'            fail
	'>'            fail
	">="           fail
	"<="           fail
	"=="           fail


State 98

	COND -> COND . "AND" COND                           (rule 41)
	COND -> COND . "OR" COND                            (rule 42)
	COND -> COND . '>' COND                             (rule 44)
	COND -> COND . '<' COND                             (rule 45)
	COND -> COND . "<=" COND                            (rule 46)
	COND -> COND . ">=" COND                            (rule 47)
	COND -> COND ">=" COND .                            (rule 47)
	COND -> COND . "==" COND                            (rule 48)

	','            reduce using rule 47
	"AND"          reduce using rule 47
	"OR"           reduce using rule 47
	'<'            fail
	'>'            fail
	">="           fail
	"<="           fail
	"=="           fail


State 99

	COND -> COND . "AND" COND                           (rule 41)
	COND -> COND . "OR" COND                            (rule 42)
	COND -> COND . '>' COND                             (rule 44)
	COND -> COND '>' COND .                             (rule 44)
	COND -> COND . '<' COND                             (rule 45)
	COND -> COND . "<=" COND                            (rule 46)
	COND -> COND . ">=" COND                            (rule 47)
	COND -> COND . "==" COND                            (rule 48)

	','            reduce using rule 44
	"AND"          reduce using rule 44
	"OR"           reduce using rule 44
	'<'            fail
	'>'            fail
	">="           fail
	"<="           fail
	"=="           fail


State 100

	COND -> COND . "AND" COND                           (rule 41)
	COND -> COND . "OR" COND                            (rule 42)
	COND -> COND . '>' COND                             (rule 44)
	COND -> COND . '<' COND                             (rule 45)
	COND -> COND '<' COND .                             (rule 45)
	COND -> COND . "<=" COND                            (rule 46)
	COND -> COND . ">=" COND                            (rule 47)
	COND -> COND . "==" COND                            (rule 48)

	','            reduce using rule 45
	"AND"          reduce using rule 45
	"OR"           reduce using rule 45
	'<'            fail
	'>'            fail
	">="           fail
	"<="           fail
	"=="           fail


State 101

	COND -> COND . "AND" COND                           (rule 41)
	COND -> COND . "OR" COND                            (rule 42)
	COND -> COND "OR" COND .                            (rule 42)
	COND -> COND . '>' COND                             (rule 44)
	COND -> COND . '<' COND                             (rule 45)
	COND -> COND . "<=" COND                            (rule 46)
	COND -> COND . ">=" COND                            (rule 47)
	COND -> COND . "==" COND                            (rule 48)

	','            reduce using rule 42
	"AND"          shift, and enter state 76
	"OR"           reduce using rule 42
	'<'            shift, and enter state 78
	'>'            shift, and enter state 79
	">="           shift, and enter state 80
	"<="           shift, and enter state 81
	"=="           shift, and enter state 82


State 102

	COND -> COND . "AND" COND                           (rule 41)
	COND -> COND "AND" COND .                           (rule 41)
	COND -> COND . "OR" COND                            (rule 42)
	COND -> COND . '>' COND                             (rule 44)
	COND -> COND . '<' COND                             (rule 45)
	COND -> COND . "<=" COND                            (rule 46)
	COND -> COND . ">=" COND                            (rule 47)
	COND -> COND . "==" COND                            (rule 48)

	','            reduce using rule 41
	"AND"          reduce using rule 41
	"OR"           reduce using rule 41
	'<'            shift, and enter state 78
	'>'            shift, and enter state 79
	">="           shift, and enter state 80
	"<="           shift, and enter state 81
	"=="           shift, and enter state 82


State 103

	EM -> EM . '+' EM                                   (rule 18)
	EM -> EM . '-' EM                                   (rule 19)
	EM -> EM . '*' EM                                   (rule 20)
	EM -> EM . '/' EM                                   (rule 21)
	EM -> EM . '^' EM                                   (rule 22)
	EM -> "if" '(' COND ',' EM . ',' EM ')'             (rule 35)

	'+'            shift, and enter state 39
	'-'            shift, and enter state 40
	'*'            shift, and enter state 41
	'/'            shift, and enter state 42
	'^'            shift, and enter state 43
	','            shift, and enter state 109


State 104

	CICLO -> "for" identificador "in" EM "step" EM . SEC_INSTR_CICLO "endfor"    (rule 14)
	EM -> EM . '+' EM                                   (rule 18)
	EM -> EM . '-' EM                                   (rule 19)
	EM -> EM . '*' EM                                   (rule 20)
	EM -> EM . '/' EM                                   (rule 21)
	EM -> EM . '^' EM                                   (rule 22)

	'+'            shift, and enter state 39
	'-'            shift, and enter state 40
	'*'            shift, and enter state 41
	'/'            shift, and enter state 42
	'^'            shift, and enter state 43
	"for"          shift, and enter state 5
	"plot"         shift, and enter state 6
	"push_back"    shift, and enter state 7
	identificador  shift, and enter state 8

	INSTR          goto state 69
	CICLO          goto state 70
	SEC_INSTR_CICLOgoto state 108

State 105

	SEC_INSTR_CICLO -> SEC_INSTR_CICLO ';' . INSTR      (rule 17)

	"plot"         shift, and enter state 6
	"push_back"    shift, and enter state 7
	identificador  shift, and enter state 8

	INSTR          goto state 107

State 106

	CICLO -> "for" identificador "in" EM SEC_INSTR_CICLO "endfor" .    (rule 13)

	"for"          reduce using rule 13
	';'            reduce using rule 13
	"plot"         reduce using rule 13
	"endfor"       reduce using rule 13
	"push_back"    reduce using rule 13
	identificador  reduce using rule 13
	%eof           reduce using rule 13


State 107

	SEC_INSTR_CICLO -> SEC_INSTR_CICLO ';' INSTR .      (rule 17)

	';'            reduce using rule 17
	"endfor"       reduce using rule 17


State 108

	CICLO -> "for" identificador "in" EM "step" EM SEC_INSTR_CICLO . "endfor"    (rule 14)
	SEC_INSTR_CICLO -> SEC_INSTR_CICLO . ';' INSTR      (rule 17)

	';'            shift, and enter state 105
	"endfor"       shift, and enter state 119


State 109

	EM -> "if" '(' COND ',' EM ',' . EM ')'             (rule 35)

	'-'            shift, and enter state 14
	int            shift, and enter state 15
	real           shift, and enter state 16
	constmat       shift, and enter state 17
	funcion        shift, and enter state 18
	'('            shift, and enter state 19
	'['            shift, and enter state 20
	"range"        shift, and enter state 21
	"if"           shift, and enter state 22
	identificador  shift, and enter state 23

	EM             goto state 118

State 110

	EM -> "range" '(' EM ',' EM ')' .                   (rule 33)

	'+'            reduce using rule 33
	'-'            reduce using rule 33
	'*'            reduce using rule 33
	'/'            reduce using rule 33
	'^'            reduce using rule 33
	')'            reduce using rule 33
	']'            reduce using rule 33
	','            reduce using rule 33
	"for"          reduce using rule 33
	"AND"          reduce using rule 33
	"OR"           reduce using rule 33
	'<'            reduce using rule 33
	'>'            reduce using rule 33
	">="           reduce using rule 33
	"<="           reduce using rule 33
	"=="           reduce using rule 33
	';'            reduce using rule 33
	"with"         reduce using rule 33
	"plot"         reduce using rule 33
	"endfor"       reduce using rule 33
	"step"         reduce using rule 33
	"push_back"    reduce using rule 33
	identificador  reduce using rule 33


State 111

	EM -> EM . '+' EM                                   (rule 18)
	EM -> EM . '-' EM                                   (rule 19)
	EM -> EM . '*' EM                                   (rule 20)
	EM -> EM . '/' EM                                   (rule 21)
	EM -> EM . '^' EM                                   (rule 22)
	EM -> '[' EM "for" identificador "in" EM . ']'      (rule 34)

	'+'            shift, and enter state 39
	'-'            shift, and enter state 40
	'*'            shift, and enter state 41
	'/'            shift, and enter state 42
	'^'            shift, and enter state 43
	']'            shift, and enter state 117


State 112

	INSTR -> "plot" EM ',' EG "with" '[' SECUENCIA_ESTILO . ']'    (rule 9)
	SECUENCIA_ESTILO -> SECUENCIA_ESTILO . ',' estilo    (rule 39)

	']'            shift, and enter state 115
	','            shift, and enter state 116


State 113

	INSTR -> "plot" EM ',' EG "with" '[' ']' .          (rule 8)

	';'            reduce using rule 8
	"endfor"       reduce using rule 8


State 114

	SECUENCIA_ESTILO -> estilo .                        (rule 38)

	']'            reduce using rule 38
	','            reduce using rule 38


State 115

	INSTR -> "plot" EM ',' EG "with" '[' SECUENCIA_ESTILO ']' .    (rule 9)

	';'            reduce using rule 9
	"endfor"       reduce using rule 9


State 116

	SECUENCIA_ESTILO -> SECUENCIA_ESTILO ',' . estilo    (rule 39)

	estilo         shift, and enter state 121


State 117

	EM -> '[' EM "for" identificador "in" EM ']' .      (rule 34)

	'+'            reduce using rule 34
	'-'            reduce using rule 34
	'*'            reduce using rule 34
	'/'            reduce using rule 34
	'^'            reduce using rule 34
	')'            reduce using rule 34
	']'            reduce using rule 34
	','            reduce using rule 34
	"for"          reduce using rule 34
	"AND"          reduce using rule 34
	"OR"           reduce using rule 34
	'<'            reduce using rule 34
	'>'            reduce using rule 34
	">="           reduce using rule 34
	"<="           reduce using rule 34
	"=="           reduce using rule 34
	';'            reduce using rule 34
	"with"         reduce using rule 34
	"plot"         reduce using rule 34
	"endfor"       reduce using rule 34
	"step"         reduce using rule 34
	"push_back"    reduce using rule 34
	identificador  reduce using rule 34


State 118

	EM -> EM . '+' EM                                   (rule 18)
	EM -> EM . '-' EM                                   (rule 19)
	EM -> EM . '*' EM                                   (rule 20)
	EM -> EM . '/' EM                                   (rule 21)
	EM -> EM . '^' EM                                   (rule 22)
	EM -> "if" '(' COND ',' EM ',' EM . ')'             (rule 35)

	'+'            shift, and enter state 39
	'-'            shift, and enter state 40
	'*'            shift, and enter state 41
	'/'            shift, and enter state 42
	'^'            shift, and enter state 43
	')'            shift, and enter state 120


State 119

	CICLO -> "for" identificador "in" EM "step" EM SEC_INSTR_CICLO "endfor" .    (rule 14)

	"for"          reduce using rule 14
	';'            reduce using rule 14
	"plot"         reduce using rule 14
	"endfor"       reduce using rule 14
	"push_back"    reduce using rule 14
	identificador  reduce using rule 14
	%eof           reduce using rule 14


State 120

	EM -> "if" '(' COND ',' EM ',' EM ')' .             (rule 35)

	'+'            reduce using rule 35
	'-'            reduce using rule 35
	'*'            reduce using rule 35
	'/'            reduce using rule 35
	'^'            reduce using rule 35
	')'            reduce using rule 35
	']'            reduce using rule 35
	','            reduce using rule 35
	"for"          reduce using rule 35
	"AND"          reduce using rule 35
	"OR"           reduce using rule 35
	'<'            reduce using rule 35
	'>'            reduce using rule 35
	">="           reduce using rule 35
	"<="           reduce using rule 35
	"=="           reduce using rule 35
	';'            reduce using rule 35
	"with"         reduce using rule 35
	"plot"         reduce using rule 35
	"endfor"       reduce using rule 35
	"step"         reduce using rule 35
	"push_back"    reduce using rule 35
	identificador  reduce using rule 35


State 121

	SECUENCIA_ESTILO -> SECUENCIA_ESTILO ',' estilo .    (rule 39)

	']'            reduce using rule 39
	','            reduce using rule 39


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 51
Number of terminals: 36
Number of non-terminals: 11
Number of states: 122
