-----------------------------------------------------------------------------
Info file generated by Happy Version 1.18.4 from Parser.y
-----------------------------------------------------------------------------


rule 27 is unused
rule 28 is unused

terminal '\'' is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> EM                                 (0)
	EM -> EM '+' EM                                    (1)
	EM -> EM '-' EM                                    (2)
	EM -> EM '*' EM                                    (3)
	EM -> EM '/' EM                                    (4)
	EM -> EM '^' EM                                    (5)
	EM -> '-' EM                                       (6)
	EM -> '(' EM ')'                                   (7)
	EM -> int                                          (8)
	EM -> real                                         (9)
	EM -> constmat                                     (10)
	EM -> funcion '(' EM ')'                           (11)
	EM -> identificador                                (12)
	EM -> '[' ']'                                      (13)
	EM -> '[' SECUENCIA_EM ']'                         (14)
	EM -> "range" '(' EM ',' EM ')'                    (15)
	EM -> '[' EM "for" identificador "in" EM ']'       (16)
	EM -> "if" '(' COND ',' EM ',' EM ')'              (17)
	COND -> EM                                         (18)
	COND -> COND "AND" COND                            (19)
	COND -> COND "OR" COND                             (20)
	COND -> "NOT" COND                                 (21)
	COND -> COND '>' COND                              (22)
	COND -> COND '<' COND                              (23)
	COND -> COND "<=" COND                             (24)
	COND -> COND ">=" COND                             (25)
	COND -> COND "==" COND                             (26)
	EG -> EM                                           (27)
	EG -> '\'' identificador '\''                      (28)
	SECUENCIA_EM -> EM                                 (29)
	SECUENCIA_EM -> SECUENCIA_EM ',' EM                (30)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'+'            { TkMas }
	'-'            { TkMenos }
	'*'            { TkPor }
	'/'            { TkEntre }
	'^'            { TkElevado }
	int            { TkEntero $$ }
	real           { TkReal $$ }
	constmat       { TkConstanteMat $$ }
	funcion        { TkFuncion $$ }
	'('            { TkParentesisI }
	')'            { TkParentesisD }
	'['            { TkCorcheteI }
	']'            { TkCorcheteD }
	','            { TkComa }
	"range"        { TkRango }
	"for"          { TkFor }
	"in"           { TkIn }
	"if"           { TkIf }
	"AND"          { TkAnd }
	"OR"           { TkOr }
	"NOT"          { TkNot }
	'<'            { TkMenor }
	'>'            { TkMayor }
	">="           { TkMayorIg }
	"<="           { TkMenorIg }
	"=="           { TkIgual }
	'\''           { TkComilla }
	identificador  { TkIdentificador $$ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	EM              rules 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17
	COND            rules 18, 19, 20, 21, 22, 23, 24, 25, 26
	EG              rules 27, 28
	SECUENCIA_EM    rules 29, 30

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	'-'            shift, and enter state 3
	int            shift, and enter state 4
	real           shift, and enter state 5
	constmat       shift, and enter state 6
	funcion        shift, and enter state 7
	'('            shift, and enter state 8
	'['            shift, and enter state 9
	"range"        shift, and enter state 10
	"if"           shift, and enter state 11
	identificador  shift, and enter state 12

	EM             goto state 13

State 1


	'-'            shift, and enter state 3
	int            shift, and enter state 4
	real           shift, and enter state 5
	constmat       shift, and enter state 6
	funcion        shift, and enter state 7
	'('            shift, and enter state 8
	'['            shift, and enter state 9
	"range"        shift, and enter state 10
	"if"           shift, and enter state 11
	identificador  shift, and enter state 12

	EM             goto state 2

State 2

	EM -> EM . '+' EM                                   (rule 1)
	EM -> EM . '-' EM                                   (rule 2)
	EM -> EM . '*' EM                                   (rule 3)
	EM -> EM . '/' EM                                   (rule 4)
	EM -> EM . '^' EM                                   (rule 5)

	'+'            shift, and enter state 14
	'-'            shift, and enter state 15
	'*'            shift, and enter state 16
	'/'            shift, and enter state 17
	'^'            shift, and enter state 18


State 3

	EM -> '-' . EM                                      (rule 6)

	'-'            shift, and enter state 3
	int            shift, and enter state 4
	real           shift, and enter state 5
	constmat       shift, and enter state 6
	funcion        shift, and enter state 7
	'('            shift, and enter state 8
	'['            shift, and enter state 9
	"range"        shift, and enter state 10
	"if"           shift, and enter state 11
	identificador  shift, and enter state 12

	EM             goto state 26

State 4

	EM -> int .                                         (rule 8)

	'+'            reduce using rule 8
	'-'            reduce using rule 8
	'*'            reduce using rule 8
	'/'            reduce using rule 8
	'^'            reduce using rule 8
	')'            reduce using rule 8
	']'            reduce using rule 8
	','            reduce using rule 8
	"for"          reduce using rule 8
	"AND"          reduce using rule 8
	"OR"           reduce using rule 8
	'<'            reduce using rule 8
	'>'            reduce using rule 8
	">="           reduce using rule 8
	"<="           reduce using rule 8
	"=="           reduce using rule 8
	%eof           reduce using rule 8


State 5

	EM -> real .                                        (rule 9)

	'+'            reduce using rule 9
	'-'            reduce using rule 9
	'*'            reduce using rule 9
	'/'            reduce using rule 9
	'^'            reduce using rule 9
	')'            reduce using rule 9
	']'            reduce using rule 9
	','            reduce using rule 9
	"for"          reduce using rule 9
	"AND"          reduce using rule 9
	"OR"           reduce using rule 9
	'<'            reduce using rule 9
	'>'            reduce using rule 9
	">="           reduce using rule 9
	"<="           reduce using rule 9
	"=="           reduce using rule 9
	%eof           reduce using rule 9


State 6

	EM -> constmat .                                    (rule 10)

	'+'            reduce using rule 10
	'-'            reduce using rule 10
	'*'            reduce using rule 10
	'/'            reduce using rule 10
	'^'            reduce using rule 10
	')'            reduce using rule 10
	']'            reduce using rule 10
	','            reduce using rule 10
	"for"          reduce using rule 10
	"AND"          reduce using rule 10
	"OR"           reduce using rule 10
	'<'            reduce using rule 10
	'>'            reduce using rule 10
	">="           reduce using rule 10
	"<="           reduce using rule 10
	"=="           reduce using rule 10
	%eof           reduce using rule 10


State 7

	EM -> funcion . '(' EM ')'                          (rule 11)

	'('            shift, and enter state 25


State 8

	EM -> '(' . EM ')'                                  (rule 7)

	'-'            shift, and enter state 3
	int            shift, and enter state 4
	real           shift, and enter state 5
	constmat       shift, and enter state 6
	funcion        shift, and enter state 7
	'('            shift, and enter state 8
	'['            shift, and enter state 9
	"range"        shift, and enter state 10
	"if"           shift, and enter state 11
	identificador  shift, and enter state 12

	EM             goto state 24

State 9

	EM -> '[' . ']'                                     (rule 13)
	EM -> '[' . SECUENCIA_EM ']'                        (rule 14)
	EM -> '[' . EM "for" identificador "in" EM ']'      (rule 16)

	'-'            shift, and enter state 3
	int            shift, and enter state 4
	real           shift, and enter state 5
	constmat       shift, and enter state 6
	funcion        shift, and enter state 7
	'('            shift, and enter state 8
	'['            shift, and enter state 9
	']'            shift, and enter state 23
	"range"        shift, and enter state 10
	"if"           shift, and enter state 11
	identificador  shift, and enter state 12

	EM             goto state 21
	SECUENCIA_EM   goto state 22

State 10

	EM -> "range" . '(' EM ',' EM ')'                   (rule 15)

	'('            shift, and enter state 20


State 11

	EM -> "if" . '(' COND ',' EM ',' EM ')'             (rule 17)

	'('            shift, and enter state 19


State 12

	EM -> identificador .                               (rule 12)

	'+'            reduce using rule 12
	'-'            reduce using rule 12
	'*'            reduce using rule 12
	'/'            reduce using rule 12
	'^'            reduce using rule 12
	')'            reduce using rule 12
	']'            reduce using rule 12
	','            reduce using rule 12
	"for"          reduce using rule 12
	"AND"          reduce using rule 12
	"OR"           reduce using rule 12
	'<'            reduce using rule 12
	'>'            reduce using rule 12
	">="           reduce using rule 12
	"<="           reduce using rule 12
	"=="           reduce using rule 12
	%eof           reduce using rule 12


State 13

	%start_parse -> EM .                                (rule 0)
	EM -> EM . '+' EM                                   (rule 1)
	EM -> EM . '-' EM                                   (rule 2)
	EM -> EM . '*' EM                                   (rule 3)
	EM -> EM . '/' EM                                   (rule 4)
	EM -> EM . '^' EM                                   (rule 5)

	'+'            shift, and enter state 14
	'-'            shift, and enter state 15
	'*'            shift, and enter state 16
	'/'            shift, and enter state 17
	'^'            shift, and enter state 18
	%eof           accept


State 14

	EM -> EM '+' . EM                                   (rule 1)

	'-'            shift, and enter state 3
	int            shift, and enter state 4
	real           shift, and enter state 5
	constmat       shift, and enter state 6
	funcion        shift, and enter state 7
	'('            shift, and enter state 8
	'['            shift, and enter state 9
	"range"        shift, and enter state 10
	"if"           shift, and enter state 11
	identificador  shift, and enter state 12

	EM             goto state 40

State 15

	EM -> EM '-' . EM                                   (rule 2)

	'-'            shift, and enter state 3
	int            shift, and enter state 4
	real           shift, and enter state 5
	constmat       shift, and enter state 6
	funcion        shift, and enter state 7
	'('            shift, and enter state 8
	'['            shift, and enter state 9
	"range"        shift, and enter state 10
	"if"           shift, and enter state 11
	identificador  shift, and enter state 12

	EM             goto state 39

State 16

	EM -> EM '*' . EM                                   (rule 3)

	'-'            shift, and enter state 3
	int            shift, and enter state 4
	real           shift, and enter state 5
	constmat       shift, and enter state 6
	funcion        shift, and enter state 7
	'('            shift, and enter state 8
	'['            shift, and enter state 9
	"range"        shift, and enter state 10
	"if"           shift, and enter state 11
	identificador  shift, and enter state 12

	EM             goto state 38

State 17

	EM -> EM '/' . EM                                   (rule 4)

	'-'            shift, and enter state 3
	int            shift, and enter state 4
	real           shift, and enter state 5
	constmat       shift, and enter state 6
	funcion        shift, and enter state 7
	'('            shift, and enter state 8
	'['            shift, and enter state 9
	"range"        shift, and enter state 10
	"if"           shift, and enter state 11
	identificador  shift, and enter state 12

	EM             goto state 37

State 18

	EM -> EM '^' . EM                                   (rule 5)

	'-'            shift, and enter state 3
	int            shift, and enter state 4
	real           shift, and enter state 5
	constmat       shift, and enter state 6
	funcion        shift, and enter state 7
	'('            shift, and enter state 8
	'['            shift, and enter state 9
	"range"        shift, and enter state 10
	"if"           shift, and enter state 11
	identificador  shift, and enter state 12

	EM             goto state 36

State 19

	EM -> "if" '(' . COND ',' EM ',' EM ')'             (rule 17)

	'-'            shift, and enter state 3
	int            shift, and enter state 4
	real           shift, and enter state 5
	constmat       shift, and enter state 6
	funcion        shift, and enter state 7
	'('            shift, and enter state 8
	'['            shift, and enter state 9
	"range"        shift, and enter state 10
	"if"           shift, and enter state 11
	"NOT"          shift, and enter state 35
	identificador  shift, and enter state 12

	EM             goto state 33
	COND           goto state 34

State 20

	EM -> "range" '(' . EM ',' EM ')'                   (rule 15)

	'-'            shift, and enter state 3
	int            shift, and enter state 4
	real           shift, and enter state 5
	constmat       shift, and enter state 6
	funcion        shift, and enter state 7
	'('            shift, and enter state 8
	'['            shift, and enter state 9
	"range"        shift, and enter state 10
	"if"           shift, and enter state 11
	identificador  shift, and enter state 12

	EM             goto state 32

State 21

	EM -> EM . '+' EM                                   (rule 1)
	EM -> EM . '-' EM                                   (rule 2)
	EM -> EM . '*' EM                                   (rule 3)
	EM -> EM . '/' EM                                   (rule 4)
	EM -> EM . '^' EM                                   (rule 5)
	EM -> '[' EM . "for" identificador "in" EM ']'      (rule 16)
	SECUENCIA_EM -> EM .                                (rule 29)

	'+'            shift, and enter state 14
	'-'            shift, and enter state 15
	'*'            shift, and enter state 16
	'/'            shift, and enter state 17
	'^'            shift, and enter state 18
	']'            reduce using rule 29
	','            reduce using rule 29
	"for"          shift, and enter state 31


State 22

	EM -> '[' SECUENCIA_EM . ']'                        (rule 14)
	SECUENCIA_EM -> SECUENCIA_EM . ',' EM               (rule 30)

	']'            shift, and enter state 29
	','            shift, and enter state 30


State 23

	EM -> '[' ']' .                                     (rule 13)

	'+'            reduce using rule 13
	'-'            reduce using rule 13
	'*'            reduce using rule 13
	'/'            reduce using rule 13
	'^'            reduce using rule 13
	')'            reduce using rule 13
	']'            reduce using rule 13
	','            reduce using rule 13
	"for"          reduce using rule 13
	"AND"          reduce using rule 13
	"OR"           reduce using rule 13
	'<'            reduce using rule 13
	'>'            reduce using rule 13
	">="           reduce using rule 13
	"<="           reduce using rule 13
	"=="           reduce using rule 13
	%eof           reduce using rule 13


State 24

	EM -> EM . '+' EM                                   (rule 1)
	EM -> EM . '-' EM                                   (rule 2)
	EM -> EM . '*' EM                                   (rule 3)
	EM -> EM . '/' EM                                   (rule 4)
	EM -> EM . '^' EM                                   (rule 5)
	EM -> '(' EM . ')'                                  (rule 7)

	'+'            shift, and enter state 14
	'-'            shift, and enter state 15
	'*'            shift, and enter state 16
	'/'            shift, and enter state 17
	'^'            shift, and enter state 18
	')'            shift, and enter state 28


State 25

	EM -> funcion '(' . EM ')'                          (rule 11)

	'-'            shift, and enter state 3
	int            shift, and enter state 4
	real           shift, and enter state 5
	constmat       shift, and enter state 6
	funcion        shift, and enter state 7
	'('            shift, and enter state 8
	'['            shift, and enter state 9
	"range"        shift, and enter state 10
	"if"           shift, and enter state 11
	identificador  shift, and enter state 12

	EM             goto state 27

State 26

	EM -> EM . '+' EM                                   (rule 1)
	EM -> EM . '-' EM                                   (rule 2)
	EM -> EM . '*' EM                                   (rule 3)
	EM -> EM . '/' EM                                   (rule 4)
	EM -> EM . '^' EM                                   (rule 5)
	EM -> '-' EM .                                      (rule 6)

	'+'            reduce using rule 6
	'-'            reduce using rule 6
	'*'            shift, and enter state 16
	'/'            shift, and enter state 17
	'^'            shift, and enter state 18
	')'            reduce using rule 6
	']'            reduce using rule 6
	','            reduce using rule 6
	"for"          reduce using rule 6
	"AND"          reduce using rule 6
	"OR"           reduce using rule 6
	'<'            reduce using rule 6
	'>'            reduce using rule 6
	">="           reduce using rule 6
	"<="           reduce using rule 6
	"=="           reduce using rule 6
	%eof           reduce using rule 6


State 27

	EM -> EM . '+' EM                                   (rule 1)
	EM -> EM . '-' EM                                   (rule 2)
	EM -> EM . '*' EM                                   (rule 3)
	EM -> EM . '/' EM                                   (rule 4)
	EM -> EM . '^' EM                                   (rule 5)
	EM -> funcion '(' EM . ')'                          (rule 11)

	'+'            shift, and enter state 14
	'-'            shift, and enter state 15
	'*'            shift, and enter state 16
	'/'            shift, and enter state 17
	'^'            shift, and enter state 18
	')'            shift, and enter state 53


State 28

	EM -> '(' EM ')' .                                  (rule 7)

	'+'            reduce using rule 7
	'-'            reduce using rule 7
	'*'            reduce using rule 7
	'/'            reduce using rule 7
	'^'            reduce using rule 7
	')'            reduce using rule 7
	']'            reduce using rule 7
	','            reduce using rule 7
	"for"          reduce using rule 7
	"AND"          reduce using rule 7
	"OR"           reduce using rule 7
	'<'            reduce using rule 7
	'>'            reduce using rule 7
	">="           reduce using rule 7
	"<="           reduce using rule 7
	"=="           reduce using rule 7
	%eof           reduce using rule 7


State 29

	EM -> '[' SECUENCIA_EM ']' .                        (rule 14)

	'+'            reduce using rule 14
	'-'            reduce using rule 14
	'*'            reduce using rule 14
	'/'            reduce using rule 14
	'^'            reduce using rule 14
	')'            reduce using rule 14
	']'            reduce using rule 14
	','            reduce using rule 14
	"for"          reduce using rule 14
	"AND"          reduce using rule 14
	"OR"           reduce using rule 14
	'<'            reduce using rule 14
	'>'            reduce using rule 14
	">="           reduce using rule 14
	"<="           reduce using rule 14
	"=="           reduce using rule 14
	%eof           reduce using rule 14


State 30

	SECUENCIA_EM -> SECUENCIA_EM ',' . EM               (rule 30)

	'-'            shift, and enter state 3
	int            shift, and enter state 4
	real           shift, and enter state 5
	constmat       shift, and enter state 6
	funcion        shift, and enter state 7
	'('            shift, and enter state 8
	'['            shift, and enter state 9
	"range"        shift, and enter state 10
	"if"           shift, and enter state 11
	identificador  shift, and enter state 12

	EM             goto state 52

State 31

	EM -> '[' EM "for" . identificador "in" EM ']'      (rule 16)

	identificador  shift, and enter state 51


State 32

	EM -> EM . '+' EM                                   (rule 1)
	EM -> EM . '-' EM                                   (rule 2)
	EM -> EM . '*' EM                                   (rule 3)
	EM -> EM . '/' EM                                   (rule 4)
	EM -> EM . '^' EM                                   (rule 5)
	EM -> "range" '(' EM . ',' EM ')'                   (rule 15)

	'+'            shift, and enter state 14
	'-'            shift, and enter state 15
	'*'            shift, and enter state 16
	'/'            shift, and enter state 17
	'^'            shift, and enter state 18
	','            shift, and enter state 50


State 33

	EM -> EM . '+' EM                                   (rule 1)
	EM -> EM . '-' EM                                   (rule 2)
	EM -> EM . '*' EM                                   (rule 3)
	EM -> EM . '/' EM                                   (rule 4)
	EM -> EM . '^' EM                                   (rule 5)
	COND -> EM .                                        (rule 18)

	'+'            shift, and enter state 14
	'-'            shift, and enter state 15
	'*'            shift, and enter state 16
	'/'            shift, and enter state 17
	'^'            shift, and enter state 18
	','            reduce using rule 18
	"AND"          reduce using rule 18
	"OR"           reduce using rule 18
	'<'            reduce using rule 18
	'>'            reduce using rule 18
	">="           reduce using rule 18
	"<="           reduce using rule 18
	"=="           reduce using rule 18


State 34

	EM -> "if" '(' COND . ',' EM ',' EM ')'             (rule 17)
	COND -> COND . "AND" COND                           (rule 19)
	COND -> COND . "OR" COND                            (rule 20)
	COND -> COND . '>' COND                             (rule 22)
	COND -> COND . '<' COND                             (rule 23)
	COND -> COND . "<=" COND                            (rule 24)
	COND -> COND . ">=" COND                            (rule 25)
	COND -> COND . "==" COND                            (rule 26)

	','            shift, and enter state 42
	"AND"          shift, and enter state 43
	"OR"           shift, and enter state 44
	'<'            shift, and enter state 45
	'>'            shift, and enter state 46
	">="           shift, and enter state 47
	"<="           shift, and enter state 48
	"=="           shift, and enter state 49


State 35

	COND -> "NOT" . COND                                (rule 21)

	'-'            shift, and enter state 3
	int            shift, and enter state 4
	real           shift, and enter state 5
	constmat       shift, and enter state 6
	funcion        shift, and enter state 7
	'('            shift, and enter state 8
	'['            shift, and enter state 9
	"range"        shift, and enter state 10
	"if"           shift, and enter state 11
	"NOT"          shift, and enter state 35
	identificador  shift, and enter state 12

	EM             goto state 33
	COND           goto state 41

State 36

	EM -> EM . '+' EM                                   (rule 1)
	EM -> EM . '-' EM                                   (rule 2)
	EM -> EM . '*' EM                                   (rule 3)
	EM -> EM . '/' EM                                   (rule 4)
	EM -> EM . '^' EM                                   (rule 5)
	EM -> EM '^' EM .                                   (rule 5)

	'+'            reduce using rule 5
	'-'            reduce using rule 5
	'*'            reduce using rule 5
	'/'            reduce using rule 5
	'^'            shift, and enter state 18
	')'            reduce using rule 5
	']'            reduce using rule 5
	','            reduce using rule 5
	"for"          reduce using rule 5
	"AND"          reduce using rule 5
	"OR"           reduce using rule 5
	'<'            reduce using rule 5
	'>'            reduce using rule 5
	">="           reduce using rule 5
	"<="           reduce using rule 5
	"=="           reduce using rule 5
	%eof           reduce using rule 5


State 37

	EM -> EM . '+' EM                                   (rule 1)
	EM -> EM . '-' EM                                   (rule 2)
	EM -> EM . '*' EM                                   (rule 3)
	EM -> EM . '/' EM                                   (rule 4)
	EM -> EM '/' EM .                                   (rule 4)
	EM -> EM . '^' EM                                   (rule 5)

	'+'            reduce using rule 4
	'-'            reduce using rule 4
	'*'            reduce using rule 4
	'/'            reduce using rule 4
	'^'            shift, and enter state 18
	')'            reduce using rule 4
	']'            reduce using rule 4
	','            reduce using rule 4
	"for"          reduce using rule 4
	"AND"          reduce using rule 4
	"OR"           reduce using rule 4
	'<'            reduce using rule 4
	'>'            reduce using rule 4
	">="           reduce using rule 4
	"<="           reduce using rule 4
	"=="           reduce using rule 4
	%eof           reduce using rule 4


State 38

	EM -> EM . '+' EM                                   (rule 1)
	EM -> EM . '-' EM                                   (rule 2)
	EM -> EM . '*' EM                                   (rule 3)
	EM -> EM '*' EM .                                   (rule 3)
	EM -> EM . '/' EM                                   (rule 4)
	EM -> EM . '^' EM                                   (rule 5)

	'+'            reduce using rule 3
	'-'            reduce using rule 3
	'*'            reduce using rule 3
	'/'            reduce using rule 3
	'^'            shift, and enter state 18
	')'            reduce using rule 3
	']'            reduce using rule 3
	','            reduce using rule 3
	"for"          reduce using rule 3
	"AND"          reduce using rule 3
	"OR"           reduce using rule 3
	'<'            reduce using rule 3
	'>'            reduce using rule 3
	">="           reduce using rule 3
	"<="           reduce using rule 3
	"=="           reduce using rule 3
	%eof           reduce using rule 3


State 39

	EM -> EM . '+' EM                                   (rule 1)
	EM -> EM . '-' EM                                   (rule 2)
	EM -> EM '-' EM .                                   (rule 2)
	EM -> EM . '*' EM                                   (rule 3)
	EM -> EM . '/' EM                                   (rule 4)
	EM -> EM . '^' EM                                   (rule 5)

	'+'            reduce using rule 2
	'-'            reduce using rule 2
	'*'            shift, and enter state 16
	'/'            shift, and enter state 17
	'^'            shift, and enter state 18
	')'            reduce using rule 2
	']'            reduce using rule 2
	','            reduce using rule 2
	"for"          reduce using rule 2
	"AND"          reduce using rule 2
	"OR"           reduce using rule 2
	'<'            reduce using rule 2
	'>'            reduce using rule 2
	">="           reduce using rule 2
	"<="           reduce using rule 2
	"=="           reduce using rule 2
	%eof           reduce using rule 2


State 40

	EM -> EM . '+' EM                                   (rule 1)
	EM -> EM '+' EM .                                   (rule 1)
	EM -> EM . '-' EM                                   (rule 2)
	EM -> EM . '*' EM                                   (rule 3)
	EM -> EM . '/' EM                                   (rule 4)
	EM -> EM . '^' EM                                   (rule 5)

	'+'            reduce using rule 1
	'-'            reduce using rule 1
	'*'            shift, and enter state 16
	'/'            shift, and enter state 17
	'^'            shift, and enter state 18
	')'            reduce using rule 1
	']'            reduce using rule 1
	','            reduce using rule 1
	"for"          reduce using rule 1
	"AND"          reduce using rule 1
	"OR"           reduce using rule 1
	'<'            reduce using rule 1
	'>'            reduce using rule 1
	">="           reduce using rule 1
	"<="           reduce using rule 1
	"=="           reduce using rule 1
	%eof           reduce using rule 1


State 41

	COND -> COND . "AND" COND                           (rule 19)
	COND -> COND . "OR" COND                            (rule 20)
	COND -> "NOT" COND .                                (rule 21)
	COND -> COND . '>' COND                             (rule 22)
	COND -> COND . '<' COND                             (rule 23)
	COND -> COND . "<=" COND                            (rule 24)
	COND -> COND . ">=" COND                            (rule 25)
	COND -> COND . "==" COND                            (rule 26)

	','            reduce using rule 21
	"AND"          reduce using rule 21
	"OR"           reduce using rule 21
	'<'            shift, and enter state 45
	'>'            shift, and enter state 46
	">="           shift, and enter state 47
	"<="           shift, and enter state 48
	"=="           shift, and enter state 49


State 42

	EM -> "if" '(' COND ',' . EM ',' EM ')'             (rule 17)

	'-'            shift, and enter state 3
	int            shift, and enter state 4
	real           shift, and enter state 5
	constmat       shift, and enter state 6
	funcion        shift, and enter state 7
	'('            shift, and enter state 8
	'['            shift, and enter state 9
	"range"        shift, and enter state 10
	"if"           shift, and enter state 11
	identificador  shift, and enter state 12

	EM             goto state 63

State 43

	COND -> COND "AND" . COND                           (rule 19)

	'-'            shift, and enter state 3
	int            shift, and enter state 4
	real           shift, and enter state 5
	constmat       shift, and enter state 6
	funcion        shift, and enter state 7
	'('            shift, and enter state 8
	'['            shift, and enter state 9
	"range"        shift, and enter state 10
	"if"           shift, and enter state 11
	"NOT"          shift, and enter state 35
	identificador  shift, and enter state 12

	EM             goto state 33
	COND           goto state 62

State 44

	COND -> COND "OR" . COND                            (rule 20)

	'-'            shift, and enter state 3
	int            shift, and enter state 4
	real           shift, and enter state 5
	constmat       shift, and enter state 6
	funcion        shift, and enter state 7
	'('            shift, and enter state 8
	'['            shift, and enter state 9
	"range"        shift, and enter state 10
	"if"           shift, and enter state 11
	"NOT"          shift, and enter state 35
	identificador  shift, and enter state 12

	EM             goto state 33
	COND           goto state 61

State 45

	COND -> COND '<' . COND                             (rule 23)

	'-'            shift, and enter state 3
	int            shift, and enter state 4
	real           shift, and enter state 5
	constmat       shift, and enter state 6
	funcion        shift, and enter state 7
	'('            shift, and enter state 8
	'['            shift, and enter state 9
	"range"        shift, and enter state 10
	"if"           shift, and enter state 11
	"NOT"          shift, and enter state 35
	identificador  shift, and enter state 12

	EM             goto state 33
	COND           goto state 60

State 46

	COND -> COND '>' . COND                             (rule 22)

	'-'            shift, and enter state 3
	int            shift, and enter state 4
	real           shift, and enter state 5
	constmat       shift, and enter state 6
	funcion        shift, and enter state 7
	'('            shift, and enter state 8
	'['            shift, and enter state 9
	"range"        shift, and enter state 10
	"if"           shift, and enter state 11
	"NOT"          shift, and enter state 35
	identificador  shift, and enter state 12

	EM             goto state 33
	COND           goto state 59

State 47

	COND -> COND ">=" . COND                            (rule 25)

	'-'            shift, and enter state 3
	int            shift, and enter state 4
	real           shift, and enter state 5
	constmat       shift, and enter state 6
	funcion        shift, and enter state 7
	'('            shift, and enter state 8
	'['            shift, and enter state 9
	"range"        shift, and enter state 10
	"if"           shift, and enter state 11
	"NOT"          shift, and enter state 35
	identificador  shift, and enter state 12

	EM             goto state 33
	COND           goto state 58

State 48

	COND -> COND "<=" . COND                            (rule 24)

	'-'            shift, and enter state 3
	int            shift, and enter state 4
	real           shift, and enter state 5
	constmat       shift, and enter state 6
	funcion        shift, and enter state 7
	'('            shift, and enter state 8
	'['            shift, and enter state 9
	"range"        shift, and enter state 10
	"if"           shift, and enter state 11
	"NOT"          shift, and enter state 35
	identificador  shift, and enter state 12

	EM             goto state 33
	COND           goto state 57

State 49

	COND -> COND "==" . COND                            (rule 26)

	'-'            shift, and enter state 3
	int            shift, and enter state 4
	real           shift, and enter state 5
	constmat       shift, and enter state 6
	funcion        shift, and enter state 7
	'('            shift, and enter state 8
	'['            shift, and enter state 9
	"range"        shift, and enter state 10
	"if"           shift, and enter state 11
	"NOT"          shift, and enter state 35
	identificador  shift, and enter state 12

	EM             goto state 33
	COND           goto state 56

State 50

	EM -> "range" '(' EM ',' . EM ')'                   (rule 15)

	'-'            shift, and enter state 3
	int            shift, and enter state 4
	real           shift, and enter state 5
	constmat       shift, and enter state 6
	funcion        shift, and enter state 7
	'('            shift, and enter state 8
	'['            shift, and enter state 9
	"range"        shift, and enter state 10
	"if"           shift, and enter state 11
	identificador  shift, and enter state 12

	EM             goto state 55

State 51

	EM -> '[' EM "for" identificador . "in" EM ']'      (rule 16)

	"in"           shift, and enter state 54


State 52

	EM -> EM . '+' EM                                   (rule 1)
	EM -> EM . '-' EM                                   (rule 2)
	EM -> EM . '*' EM                                   (rule 3)
	EM -> EM . '/' EM                                   (rule 4)
	EM -> EM . '^' EM                                   (rule 5)
	SECUENCIA_EM -> SECUENCIA_EM ',' EM .               (rule 30)

	'+'            shift, and enter state 14
	'-'            shift, and enter state 15
	'*'            shift, and enter state 16
	'/'            shift, and enter state 17
	'^'            shift, and enter state 18
	']'            reduce using rule 30
	','            reduce using rule 30


State 53

	EM -> funcion '(' EM ')' .                          (rule 11)

	'+'            reduce using rule 11
	'-'            reduce using rule 11
	'*'            reduce using rule 11
	'/'            reduce using rule 11
	'^'            reduce using rule 11
	')'            reduce using rule 11
	']'            reduce using rule 11
	','            reduce using rule 11
	"for"          reduce using rule 11
	"AND"          reduce using rule 11
	"OR"           reduce using rule 11
	'<'            reduce using rule 11
	'>'            reduce using rule 11
	">="           reduce using rule 11
	"<="           reduce using rule 11
	"=="           reduce using rule 11
	%eof           reduce using rule 11


State 54

	EM -> '[' EM "for" identificador "in" . EM ']'      (rule 16)

	'-'            shift, and enter state 3
	int            shift, and enter state 4
	real           shift, and enter state 5
	constmat       shift, and enter state 6
	funcion        shift, and enter state 7
	'('            shift, and enter state 8
	'['            shift, and enter state 9
	"range"        shift, and enter state 10
	"if"           shift, and enter state 11
	identificador  shift, and enter state 12

	EM             goto state 66

State 55

	EM -> EM . '+' EM                                   (rule 1)
	EM -> EM . '-' EM                                   (rule 2)
	EM -> EM . '*' EM                                   (rule 3)
	EM -> EM . '/' EM                                   (rule 4)
	EM -> EM . '^' EM                                   (rule 5)
	EM -> "range" '(' EM ',' EM . ')'                   (rule 15)

	'+'            shift, and enter state 14
	'-'            shift, and enter state 15
	'*'            shift, and enter state 16
	'/'            shift, and enter state 17
	'^'            shift, and enter state 18
	')'            shift, and enter state 65


State 56

	COND -> COND . "AND" COND                           (rule 19)
	COND -> COND . "OR" COND                            (rule 20)
	COND -> COND . '>' COND                             (rule 22)
	COND -> COND . '<' COND                             (rule 23)
	COND -> COND . "<=" COND                            (rule 24)
	COND -> COND . ">=" COND                            (rule 25)
	COND -> COND . "==" COND                            (rule 26)
	COND -> COND "==" COND .                            (rule 26)

	','            reduce using rule 26
	"AND"          reduce using rule 26
	"OR"           reduce using rule 26
	'<'            shift, and enter state 45
	'>'            shift, and enter state 46
	">="           shift, and enter state 47
	"<="           shift, and enter state 48
	"=="           reduce using rule 26


State 57

	COND -> COND . "AND" COND                           (rule 19)
	COND -> COND . "OR" COND                            (rule 20)
	COND -> COND . '>' COND                             (rule 22)
	COND -> COND . '<' COND                             (rule 23)
	COND -> COND . "<=" COND                            (rule 24)
	COND -> COND "<=" COND .                            (rule 24)
	COND -> COND . ">=" COND                            (rule 25)
	COND -> COND . "==" COND                            (rule 26)

	','            reduce using rule 24
	"AND"          reduce using rule 24
	"OR"           reduce using rule 24
	'<'            reduce using rule 24
	'>'            reduce using rule 24
	">="           reduce using rule 24
	"<="           reduce using rule 24
	"=="           reduce using rule 24


State 58

	COND -> COND . "AND" COND                           (rule 19)
	COND -> COND . "OR" COND                            (rule 20)
	COND -> COND . '>' COND                             (rule 22)
	COND -> COND . '<' COND                             (rule 23)
	COND -> COND . "<=" COND                            (rule 24)
	COND -> COND . ">=" COND                            (rule 25)
	COND -> COND ">=" COND .                            (rule 25)
	COND -> COND . "==" COND                            (rule 26)

	','            reduce using rule 25
	"AND"          reduce using rule 25
	"OR"           reduce using rule 25
	'<'            reduce using rule 25
	'>'            reduce using rule 25
	">="           reduce using rule 25
	"<="           reduce using rule 25
	"=="           reduce using rule 25


State 59

	COND -> COND . "AND" COND                           (rule 19)
	COND -> COND . "OR" COND                            (rule 20)
	COND -> COND . '>' COND                             (rule 22)
	COND -> COND '>' COND .                             (rule 22)
	COND -> COND . '<' COND                             (rule 23)
	COND -> COND . "<=" COND                            (rule 24)
	COND -> COND . ">=" COND                            (rule 25)
	COND -> COND . "==" COND                            (rule 26)

	','            reduce using rule 22
	"AND"          reduce using rule 22
	"OR"           reduce using rule 22
	'<'            reduce using rule 22
	'>'            reduce using rule 22
	">="           reduce using rule 22
	"<="           reduce using rule 22
	"=="           reduce using rule 22


State 60

	COND -> COND . "AND" COND                           (rule 19)
	COND -> COND . "OR" COND                            (rule 20)
	COND -> COND . '>' COND                             (rule 22)
	COND -> COND . '<' COND                             (rule 23)
	COND -> COND '<' COND .                             (rule 23)
	COND -> COND . "<=" COND                            (rule 24)
	COND -> COND . ">=" COND                            (rule 25)
	COND -> COND . "==" COND                            (rule 26)

	','            reduce using rule 23
	"AND"          reduce using rule 23
	"OR"           reduce using rule 23
	'<'            reduce using rule 23
	'>'            reduce using rule 23
	">="           reduce using rule 23
	"<="           reduce using rule 23
	"=="           reduce using rule 23


State 61

	COND -> COND . "AND" COND                           (rule 19)
	COND -> COND . "OR" COND                            (rule 20)
	COND -> COND "OR" COND .                            (rule 20)
	COND -> COND . '>' COND                             (rule 22)
	COND -> COND . '<' COND                             (rule 23)
	COND -> COND . "<=" COND                            (rule 24)
	COND -> COND . ">=" COND                            (rule 25)
	COND -> COND . "==" COND                            (rule 26)

	','            reduce using rule 20
	"AND"          reduce using rule 20
	"OR"           reduce using rule 20
	'<'            shift, and enter state 45
	'>'            shift, and enter state 46
	">="           shift, and enter state 47
	"<="           shift, and enter state 48
	"=="           shift, and enter state 49


State 62

	COND -> COND . "AND" COND                           (rule 19)
	COND -> COND "AND" COND .                           (rule 19)
	COND -> COND . "OR" COND                            (rule 20)
	COND -> COND . '>' COND                             (rule 22)
	COND -> COND . '<' COND                             (rule 23)
	COND -> COND . "<=" COND                            (rule 24)
	COND -> COND . ">=" COND                            (rule 25)
	COND -> COND . "==" COND                            (rule 26)

	','            reduce using rule 19
	"AND"          reduce using rule 19
	"OR"           reduce using rule 19
	'<'            shift, and enter state 45
	'>'            shift, and enter state 46
	">="           shift, and enter state 47
	"<="           shift, and enter state 48
	"=="           shift, and enter state 49


State 63

	EM -> EM . '+' EM                                   (rule 1)
	EM -> EM . '-' EM                                   (rule 2)
	EM -> EM . '*' EM                                   (rule 3)
	EM -> EM . '/' EM                                   (rule 4)
	EM -> EM . '^' EM                                   (rule 5)
	EM -> "if" '(' COND ',' EM . ',' EM ')'             (rule 17)

	'+'            shift, and enter state 14
	'-'            shift, and enter state 15
	'*'            shift, and enter state 16
	'/'            shift, and enter state 17
	'^'            shift, and enter state 18
	','            shift, and enter state 64


State 64

	EM -> "if" '(' COND ',' EM ',' . EM ')'             (rule 17)

	'-'            shift, and enter state 3
	int            shift, and enter state 4
	real           shift, and enter state 5
	constmat       shift, and enter state 6
	funcion        shift, and enter state 7
	'('            shift, and enter state 8
	'['            shift, and enter state 9
	"range"        shift, and enter state 10
	"if"           shift, and enter state 11
	identificador  shift, and enter state 12

	EM             goto state 68

State 65

	EM -> "range" '(' EM ',' EM ')' .                   (rule 15)

	'+'            reduce using rule 15
	'-'            reduce using rule 15
	'*'            reduce using rule 15
	'/'            reduce using rule 15
	'^'            reduce using rule 15
	')'            reduce using rule 15
	']'            reduce using rule 15
	','            reduce using rule 15
	"for"          reduce using rule 15
	"AND"          reduce using rule 15
	"OR"           reduce using rule 15
	'<'            reduce using rule 15
	'>'            reduce using rule 15
	">="           reduce using rule 15
	"<="           reduce using rule 15
	"=="           reduce using rule 15
	%eof           reduce using rule 15


State 66

	EM -> EM . '+' EM                                   (rule 1)
	EM -> EM . '-' EM                                   (rule 2)
	EM -> EM . '*' EM                                   (rule 3)
	EM -> EM . '/' EM                                   (rule 4)
	EM -> EM . '^' EM                                   (rule 5)
	EM -> '[' EM "for" identificador "in" EM . ']'      (rule 16)

	'+'            shift, and enter state 14
	'-'            shift, and enter state 15
	'*'            shift, and enter state 16
	'/'            shift, and enter state 17
	'^'            shift, and enter state 18
	']'            shift, and enter state 67


State 67

	EM -> '[' EM "for" identificador "in" EM ']' .      (rule 16)

	'+'            reduce using rule 16
	'-'            reduce using rule 16
	'*'            reduce using rule 16
	'/'            reduce using rule 16
	'^'            reduce using rule 16
	')'            reduce using rule 16
	']'            reduce using rule 16
	','            reduce using rule 16
	"for"          reduce using rule 16
	"AND"          reduce using rule 16
	"OR"           reduce using rule 16
	'<'            reduce using rule 16
	'>'            reduce using rule 16
	">="           reduce using rule 16
	"<="           reduce using rule 16
	"=="           reduce using rule 16
	%eof           reduce using rule 16


State 68

	EM -> EM . '+' EM                                   (rule 1)
	EM -> EM . '-' EM                                   (rule 2)
	EM -> EM . '*' EM                                   (rule 3)
	EM -> EM . '/' EM                                   (rule 4)
	EM -> EM . '^' EM                                   (rule 5)
	EM -> "if" '(' COND ',' EM ',' EM . ')'             (rule 17)

	'+'            shift, and enter state 14
	'-'            shift, and enter state 15
	'*'            shift, and enter state 16
	'/'            shift, and enter state 17
	'^'            shift, and enter state 18
	')'            shift, and enter state 69


State 69

	EM -> "if" '(' COND ',' EM ',' EM ')' .             (rule 17)

	'+'            reduce using rule 17
	'-'            reduce using rule 17
	'*'            reduce using rule 17
	'/'            reduce using rule 17
	'^'            reduce using rule 17
	')'            reduce using rule 17
	']'            reduce using rule 17
	','            reduce using rule 17
	"for"          reduce using rule 17
	"AND"          reduce using rule 17
	"OR"           reduce using rule 17
	'<'            reduce using rule 17
	'>'            reduce using rule 17
	">="           reduce using rule 17
	"<="           reduce using rule 17
	"=="           reduce using rule 17
	%eof           reduce using rule 17


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 31
Number of terminals: 28
Number of non-terminals: 5
Number of states: 70
