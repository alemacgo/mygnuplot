-----------------------------------------------------------------------------
Info file generated by Happy Version 1.18.4 from Parser.y
-----------------------------------------------------------------------------


rule 30 is unused
rule 31 is unused

terminal '\'' is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> INSTR                              (0)
	INSTR -> identificador '(' identificador ')' '=' EM ';'   (1)
	EM -> EM '+' EM                                    (2)
	EM -> EM '-' EM                                    (3)
	EM -> EM '*' EM                                    (4)
	EM -> EM '/' EM                                    (5)
	EM -> EM '^' EM                                    (6)
	EM -> '-' EM                                       (7)
	EM -> '(' EM ')'                                   (8)
	EM -> int                                          (9)
	EM -> real                                         (10)
	EM -> constmat                                     (11)
	EM -> funcion '(' EM ')'                           (12)
	EM -> identificador                                (13)
	EM -> '[' ']'                                      (14)
	EM -> '[' SECUENCIA_EM ']'                         (15)
	EM -> "range" '(' EM ',' EM ')'                    (16)
	EM -> '[' EM "for" identificador "in" EM ']'       (17)
	EM -> "if" '(' COND ',' EM ',' EM ')'              (18)
	SECUENCIA_EM -> EM                                 (19)
	SECUENCIA_EM -> SECUENCIA_EM ',' EM                (20)
	COND -> EM                                         (21)
	COND -> COND "AND" COND                            (22)
	COND -> COND "OR" COND                             (23)
	COND -> "NOT" COND                                 (24)
	COND -> COND '>' COND                              (25)
	COND -> COND '<' COND                              (26)
	COND -> COND "<=" COND                             (27)
	COND -> COND ">=" COND                             (28)
	COND -> COND "==" COND                             (29)
	EG -> EM                                           (30)
	EG -> '\'' identificador '\''                      (31)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'+'            { TkMas }
	'-'            { TkMenos }
	'*'            { TkPor }
	'/'            { TkEntre }
	'^'            { TkElevado }
	int            { TkEntero $$ }
	real           { TkReal $$ }
	constmat       { TkConstanteMat $$ }
	funcion        { TkFuncion $$ }
	'('            { TkParentesisI }
	')'            { TkParentesisD }
	'['            { TkCorcheteI }
	']'            { TkCorcheteD }
	','            { TkComa }
	"range"        { TkRango }
	"for"          { TkFor }
	"in"           { TkIn }
	"if"           { TkIf }
	"AND"          { TkAnd }
	"OR"           { TkOr }
	"NOT"          { TkNot }
	'<'            { TkMenor }
	'>'            { TkMayor }
	">="           { TkMayorIg }
	"<="           { TkMenorIg }
	"=="           { TkIgual }
	'\''           { TkComilla }
	';'            { TkPuntoYComa }
	'='            { TkAsignacion }
	identificador  { TkIdentificador $$ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	INSTR           rule  1
	EM              rules 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18
	SECUENCIA_EM    rules 19, 20
	COND            rules 21, 22, 23, 24, 25, 26, 27, 28, 29
	EG              rules 30, 31

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	identificador  shift, and enter state 2

	INSTR          goto state 3

State 1


	identificador  shift, and enter state 2


State 2

	INSTR -> identificador . '(' identificador ')' '=' EM ';'    (rule 1)

	'('            shift, and enter state 4


State 3

	%start_parse -> INSTR .                             (rule 0)

	%eof           accept


State 4

	INSTR -> identificador '(' . identificador ')' '=' EM ';'    (rule 1)

	identificador  shift, and enter state 5


State 5

	INSTR -> identificador '(' identificador . ')' '=' EM ';'    (rule 1)

	')'            shift, and enter state 6


State 6

	INSTR -> identificador '(' identificador ')' . '=' EM ';'    (rule 1)

	'='            shift, and enter state 7


State 7

	INSTR -> identificador '(' identificador ')' '=' . EM ';'    (rule 1)

	'-'            shift, and enter state 9
	int            shift, and enter state 10
	real           shift, and enter state 11
	constmat       shift, and enter state 12
	funcion        shift, and enter state 13
	'('            shift, and enter state 14
	'['            shift, and enter state 15
	"range"        shift, and enter state 16
	"if"           shift, and enter state 17
	identificador  shift, and enter state 18

	EM             goto state 8

State 8

	INSTR -> identificador '(' identificador ')' '=' EM . ';'    (rule 1)
	EM -> EM . '+' EM                                   (rule 2)
	EM -> EM . '-' EM                                   (rule 3)
	EM -> EM . '*' EM                                   (rule 4)
	EM -> EM . '/' EM                                   (rule 5)
	EM -> EM . '^' EM                                   (rule 6)

	'+'            shift, and enter state 27
	'-'            shift, and enter state 28
	'*'            shift, and enter state 29
	'/'            shift, and enter state 30
	'^'            shift, and enter state 31
	';'            shift, and enter state 32


State 9

	EM -> '-' . EM                                      (rule 7)

	'-'            shift, and enter state 9
	int            shift, and enter state 10
	real           shift, and enter state 11
	constmat       shift, and enter state 12
	funcion        shift, and enter state 13
	'('            shift, and enter state 14
	'['            shift, and enter state 15
	"range"        shift, and enter state 16
	"if"           shift, and enter state 17
	identificador  shift, and enter state 18

	EM             goto state 26

State 10

	EM -> int .                                         (rule 9)

	'+'            reduce using rule 9
	'-'            reduce using rule 9
	'*'            reduce using rule 9
	'/'            reduce using rule 9
	'^'            reduce using rule 9
	')'            reduce using rule 9
	']'            reduce using rule 9
	','            reduce using rule 9
	"for"          reduce using rule 9
	"AND"          reduce using rule 9
	"OR"           reduce using rule 9
	'<'            reduce using rule 9
	'>'            reduce using rule 9
	">="           reduce using rule 9
	"<="           reduce using rule 9
	"=="           reduce using rule 9
	';'            reduce using rule 9


State 11

	EM -> real .                                        (rule 10)

	'+'            reduce using rule 10
	'-'            reduce using rule 10
	'*'            reduce using rule 10
	'/'            reduce using rule 10
	'^'            reduce using rule 10
	')'            reduce using rule 10
	']'            reduce using rule 10
	','            reduce using rule 10
	"for"          reduce using rule 10
	"AND"          reduce using rule 10
	"OR"           reduce using rule 10
	'<'            reduce using rule 10
	'>'            reduce using rule 10
	">="           reduce using rule 10
	"<="           reduce using rule 10
	"=="           reduce using rule 10
	';'            reduce using rule 10


State 12

	EM -> constmat .                                    (rule 11)

	'+'            reduce using rule 11
	'-'            reduce using rule 11
	'*'            reduce using rule 11
	'/'            reduce using rule 11
	'^'            reduce using rule 11
	')'            reduce using rule 11
	']'            reduce using rule 11
	','            reduce using rule 11
	"for"          reduce using rule 11
	"AND"          reduce using rule 11
	"OR"           reduce using rule 11
	'<'            reduce using rule 11
	'>'            reduce using rule 11
	">="           reduce using rule 11
	"<="           reduce using rule 11
	"=="           reduce using rule 11
	';'            reduce using rule 11


State 13

	EM -> funcion . '(' EM ')'                          (rule 12)

	'('            shift, and enter state 25


State 14

	EM -> '(' . EM ')'                                  (rule 8)

	'-'            shift, and enter state 9
	int            shift, and enter state 10
	real           shift, and enter state 11
	constmat       shift, and enter state 12
	funcion        shift, and enter state 13
	'('            shift, and enter state 14
	'['            shift, and enter state 15
	"range"        shift, and enter state 16
	"if"           shift, and enter state 17
	identificador  shift, and enter state 18

	EM             goto state 24

State 15

	EM -> '[' . ']'                                     (rule 14)
	EM -> '[' . SECUENCIA_EM ']'                        (rule 15)
	EM -> '[' . EM "for" identificador "in" EM ']'      (rule 17)

	'-'            shift, and enter state 9
	int            shift, and enter state 10
	real           shift, and enter state 11
	constmat       shift, and enter state 12
	funcion        shift, and enter state 13
	'('            shift, and enter state 14
	'['            shift, and enter state 15
	']'            shift, and enter state 23
	"range"        shift, and enter state 16
	"if"           shift, and enter state 17
	identificador  shift, and enter state 18

	EM             goto state 21
	SECUENCIA_EM   goto state 22

State 16

	EM -> "range" . '(' EM ',' EM ')'                   (rule 16)

	'('            shift, and enter state 20


State 17

	EM -> "if" . '(' COND ',' EM ',' EM ')'             (rule 18)

	'('            shift, and enter state 19


State 18

	EM -> identificador .                               (rule 13)

	'+'            reduce using rule 13
	'-'            reduce using rule 13
	'*'            reduce using rule 13
	'/'            reduce using rule 13
	'^'            reduce using rule 13
	')'            reduce using rule 13
	']'            reduce using rule 13
	','            reduce using rule 13
	"for"          reduce using rule 13
	"AND"          reduce using rule 13
	"OR"           reduce using rule 13
	'<'            reduce using rule 13
	'>'            reduce using rule 13
	">="           reduce using rule 13
	"<="           reduce using rule 13
	"=="           reduce using rule 13
	';'            reduce using rule 13


State 19

	EM -> "if" '(' . COND ',' EM ',' EM ')'             (rule 18)

	'-'            shift, and enter state 9
	int            shift, and enter state 10
	real           shift, and enter state 11
	constmat       shift, and enter state 12
	funcion        shift, and enter state 13
	'('            shift, and enter state 14
	'['            shift, and enter state 15
	"range"        shift, and enter state 16
	"if"           shift, and enter state 17
	"NOT"          shift, and enter state 46
	identificador  shift, and enter state 18

	EM             goto state 44
	COND           goto state 45

State 20

	EM -> "range" '(' . EM ',' EM ')'                   (rule 16)

	'-'            shift, and enter state 9
	int            shift, and enter state 10
	real           shift, and enter state 11
	constmat       shift, and enter state 12
	funcion        shift, and enter state 13
	'('            shift, and enter state 14
	'['            shift, and enter state 15
	"range"        shift, and enter state 16
	"if"           shift, and enter state 17
	identificador  shift, and enter state 18

	EM             goto state 43

State 21

	EM -> EM . '+' EM                                   (rule 2)
	EM -> EM . '-' EM                                   (rule 3)
	EM -> EM . '*' EM                                   (rule 4)
	EM -> EM . '/' EM                                   (rule 5)
	EM -> EM . '^' EM                                   (rule 6)
	EM -> '[' EM . "for" identificador "in" EM ']'      (rule 17)
	SECUENCIA_EM -> EM .                                (rule 19)

	'+'            shift, and enter state 27
	'-'            shift, and enter state 28
	'*'            shift, and enter state 29
	'/'            shift, and enter state 30
	'^'            shift, and enter state 31
	']'            reduce using rule 19
	','            reduce using rule 19
	"for"          shift, and enter state 42


State 22

	EM -> '[' SECUENCIA_EM . ']'                        (rule 15)
	SECUENCIA_EM -> SECUENCIA_EM . ',' EM               (rule 20)

	']'            shift, and enter state 40
	','            shift, and enter state 41


State 23

	EM -> '[' ']' .                                     (rule 14)

	'+'            reduce using rule 14
	'-'            reduce using rule 14
	'*'            reduce using rule 14
	'/'            reduce using rule 14
	'^'            reduce using rule 14
	')'            reduce using rule 14
	']'            reduce using rule 14
	','            reduce using rule 14
	"for"          reduce using rule 14
	"AND"          reduce using rule 14
	"OR"           reduce using rule 14
	'<'            reduce using rule 14
	'>'            reduce using rule 14
	">="           reduce using rule 14
	"<="           reduce using rule 14
	"=="           reduce using rule 14
	';'            reduce using rule 14


State 24

	EM -> EM . '+' EM                                   (rule 2)
	EM -> EM . '-' EM                                   (rule 3)
	EM -> EM . '*' EM                                   (rule 4)
	EM -> EM . '/' EM                                   (rule 5)
	EM -> EM . '^' EM                                   (rule 6)
	EM -> '(' EM . ')'                                  (rule 8)

	'+'            shift, and enter state 27
	'-'            shift, and enter state 28
	'*'            shift, and enter state 29
	'/'            shift, and enter state 30
	'^'            shift, and enter state 31
	')'            shift, and enter state 39


State 25

	EM -> funcion '(' . EM ')'                          (rule 12)

	'-'            shift, and enter state 9
	int            shift, and enter state 10
	real           shift, and enter state 11
	constmat       shift, and enter state 12
	funcion        shift, and enter state 13
	'('            shift, and enter state 14
	'['            shift, and enter state 15
	"range"        shift, and enter state 16
	"if"           shift, and enter state 17
	identificador  shift, and enter state 18

	EM             goto state 38

State 26

	EM -> EM . '+' EM                                   (rule 2)
	EM -> EM . '-' EM                                   (rule 3)
	EM -> EM . '*' EM                                   (rule 4)
	EM -> EM . '/' EM                                   (rule 5)
	EM -> EM . '^' EM                                   (rule 6)
	EM -> '-' EM .                                      (rule 7)

	'+'            reduce using rule 7
	'-'            reduce using rule 7
	'*'            shift, and enter state 29
	'/'            shift, and enter state 30
	'^'            shift, and enter state 31
	')'            reduce using rule 7
	']'            reduce using rule 7
	','            reduce using rule 7
	"for"          reduce using rule 7
	"AND"          reduce using rule 7
	"OR"           reduce using rule 7
	'<'            reduce using rule 7
	'>'            reduce using rule 7
	">="           reduce using rule 7
	"<="           reduce using rule 7
	"=="           reduce using rule 7
	';'            reduce using rule 7


State 27

	EM -> EM '+' . EM                                   (rule 2)

	'-'            shift, and enter state 9
	int            shift, and enter state 10
	real           shift, and enter state 11
	constmat       shift, and enter state 12
	funcion        shift, and enter state 13
	'('            shift, and enter state 14
	'['            shift, and enter state 15
	"range"        shift, and enter state 16
	"if"           shift, and enter state 17
	identificador  shift, and enter state 18

	EM             goto state 37

State 28

	EM -> EM '-' . EM                                   (rule 3)

	'-'            shift, and enter state 9
	int            shift, and enter state 10
	real           shift, and enter state 11
	constmat       shift, and enter state 12
	funcion        shift, and enter state 13
	'('            shift, and enter state 14
	'['            shift, and enter state 15
	"range"        shift, and enter state 16
	"if"           shift, and enter state 17
	identificador  shift, and enter state 18

	EM             goto state 36

State 29

	EM -> EM '*' . EM                                   (rule 4)

	'-'            shift, and enter state 9
	int            shift, and enter state 10
	real           shift, and enter state 11
	constmat       shift, and enter state 12
	funcion        shift, and enter state 13
	'('            shift, and enter state 14
	'['            shift, and enter state 15
	"range"        shift, and enter state 16
	"if"           shift, and enter state 17
	identificador  shift, and enter state 18

	EM             goto state 35

State 30

	EM -> EM '/' . EM                                   (rule 5)

	'-'            shift, and enter state 9
	int            shift, and enter state 10
	real           shift, and enter state 11
	constmat       shift, and enter state 12
	funcion        shift, and enter state 13
	'('            shift, and enter state 14
	'['            shift, and enter state 15
	"range"        shift, and enter state 16
	"if"           shift, and enter state 17
	identificador  shift, and enter state 18

	EM             goto state 34

State 31

	EM -> EM '^' . EM                                   (rule 6)

	'-'            shift, and enter state 9
	int            shift, and enter state 10
	real           shift, and enter state 11
	constmat       shift, and enter state 12
	funcion        shift, and enter state 13
	'('            shift, and enter state 14
	'['            shift, and enter state 15
	"range"        shift, and enter state 16
	"if"           shift, and enter state 17
	identificador  shift, and enter state 18

	EM             goto state 33

State 32

	INSTR -> identificador '(' identificador ')' '=' EM ';' .    (rule 1)

	%eof           reduce using rule 1


State 33

	EM -> EM . '+' EM                                   (rule 2)
	EM -> EM . '-' EM                                   (rule 3)
	EM -> EM . '*' EM                                   (rule 4)
	EM -> EM . '/' EM                                   (rule 5)
	EM -> EM . '^' EM                                   (rule 6)
	EM -> EM '^' EM .                                   (rule 6)

	'+'            reduce using rule 6
	'-'            reduce using rule 6
	'*'            reduce using rule 6
	'/'            reduce using rule 6
	'^'            shift, and enter state 31
	')'            reduce using rule 6
	']'            reduce using rule 6
	','            reduce using rule 6
	"for"          reduce using rule 6
	"AND"          reduce using rule 6
	"OR"           reduce using rule 6
	'<'            reduce using rule 6
	'>'            reduce using rule 6
	">="           reduce using rule 6
	"<="           reduce using rule 6
	"=="           reduce using rule 6
	';'            reduce using rule 6


State 34

	EM -> EM . '+' EM                                   (rule 2)
	EM -> EM . '-' EM                                   (rule 3)
	EM -> EM . '*' EM                                   (rule 4)
	EM -> EM . '/' EM                                   (rule 5)
	EM -> EM '/' EM .                                   (rule 5)
	EM -> EM . '^' EM                                   (rule 6)

	'+'            reduce using rule 5
	'-'            reduce using rule 5
	'*'            reduce using rule 5
	'/'            reduce using rule 5
	'^'            shift, and enter state 31
	')'            reduce using rule 5
	']'            reduce using rule 5
	','            reduce using rule 5
	"for"          reduce using rule 5
	"AND"          reduce using rule 5
	"OR"           reduce using rule 5
	'<'            reduce using rule 5
	'>'            reduce using rule 5
	">="           reduce using rule 5
	"<="           reduce using rule 5
	"=="           reduce using rule 5
	';'            reduce using rule 5


State 35

	EM -> EM . '+' EM                                   (rule 2)
	EM -> EM . '-' EM                                   (rule 3)
	EM -> EM . '*' EM                                   (rule 4)
	EM -> EM '*' EM .                                   (rule 4)
	EM -> EM . '/' EM                                   (rule 5)
	EM -> EM . '^' EM                                   (rule 6)

	'+'            reduce using rule 4
	'-'            reduce using rule 4
	'*'            reduce using rule 4
	'/'            reduce using rule 4
	'^'            shift, and enter state 31
	')'            reduce using rule 4
	']'            reduce using rule 4
	','            reduce using rule 4
	"for"          reduce using rule 4
	"AND"          reduce using rule 4
	"OR"           reduce using rule 4
	'<'            reduce using rule 4
	'>'            reduce using rule 4
	">="           reduce using rule 4
	"<="           reduce using rule 4
	"=="           reduce using rule 4
	';'            reduce using rule 4


State 36

	EM -> EM . '+' EM                                   (rule 2)
	EM -> EM . '-' EM                                   (rule 3)
	EM -> EM '-' EM .                                   (rule 3)
	EM -> EM . '*' EM                                   (rule 4)
	EM -> EM . '/' EM                                   (rule 5)
	EM -> EM . '^' EM                                   (rule 6)

	'+'            reduce using rule 3
	'-'            reduce using rule 3
	'*'            shift, and enter state 29
	'/'            shift, and enter state 30
	'^'            shift, and enter state 31
	')'            reduce using rule 3
	']'            reduce using rule 3
	','            reduce using rule 3
	"for"          reduce using rule 3
	"AND"          reduce using rule 3
	"OR"           reduce using rule 3
	'<'            reduce using rule 3
	'>'            reduce using rule 3
	">="           reduce using rule 3
	"<="           reduce using rule 3
	"=="           reduce using rule 3
	';'            reduce using rule 3


State 37

	EM -> EM . '+' EM                                   (rule 2)
	EM -> EM '+' EM .                                   (rule 2)
	EM -> EM . '-' EM                                   (rule 3)
	EM -> EM . '*' EM                                   (rule 4)
	EM -> EM . '/' EM                                   (rule 5)
	EM -> EM . '^' EM                                   (rule 6)

	'+'            reduce using rule 2
	'-'            reduce using rule 2
	'*'            shift, and enter state 29
	'/'            shift, and enter state 30
	'^'            shift, and enter state 31
	')'            reduce using rule 2
	']'            reduce using rule 2
	','            reduce using rule 2
	"for"          reduce using rule 2
	"AND"          reduce using rule 2
	"OR"           reduce using rule 2
	'<'            reduce using rule 2
	'>'            reduce using rule 2
	">="           reduce using rule 2
	"<="           reduce using rule 2
	"=="           reduce using rule 2
	';'            reduce using rule 2


State 38

	EM -> EM . '+' EM                                   (rule 2)
	EM -> EM . '-' EM                                   (rule 3)
	EM -> EM . '*' EM                                   (rule 4)
	EM -> EM . '/' EM                                   (rule 5)
	EM -> EM . '^' EM                                   (rule 6)
	EM -> funcion '(' EM . ')'                          (rule 12)

	'+'            shift, and enter state 27
	'-'            shift, and enter state 28
	'*'            shift, and enter state 29
	'/'            shift, and enter state 30
	'^'            shift, and enter state 31
	')'            shift, and enter state 59


State 39

	EM -> '(' EM ')' .                                  (rule 8)

	'+'            reduce using rule 8
	'-'            reduce using rule 8
	'*'            reduce using rule 8
	'/'            reduce using rule 8
	'^'            reduce using rule 8
	')'            reduce using rule 8
	']'            reduce using rule 8
	','            reduce using rule 8
	"for"          reduce using rule 8
	"AND"          reduce using rule 8
	"OR"           reduce using rule 8
	'<'            reduce using rule 8
	'>'            reduce using rule 8
	">="           reduce using rule 8
	"<="           reduce using rule 8
	"=="           reduce using rule 8
	';'            reduce using rule 8


State 40

	EM -> '[' SECUENCIA_EM ']' .                        (rule 15)

	'+'            reduce using rule 15
	'-'            reduce using rule 15
	'*'            reduce using rule 15
	'/'            reduce using rule 15
	'^'            reduce using rule 15
	')'            reduce using rule 15
	']'            reduce using rule 15
	','            reduce using rule 15
	"for"          reduce using rule 15
	"AND"          reduce using rule 15
	"OR"           reduce using rule 15
	'<'            reduce using rule 15
	'>'            reduce using rule 15
	">="           reduce using rule 15
	"<="           reduce using rule 15
	"=="           reduce using rule 15
	';'            reduce using rule 15


State 41

	SECUENCIA_EM -> SECUENCIA_EM ',' . EM               (rule 20)

	'-'            shift, and enter state 9
	int            shift, and enter state 10
	real           shift, and enter state 11
	constmat       shift, and enter state 12
	funcion        shift, and enter state 13
	'('            shift, and enter state 14
	'['            shift, and enter state 15
	"range"        shift, and enter state 16
	"if"           shift, and enter state 17
	identificador  shift, and enter state 18

	EM             goto state 58

State 42

	EM -> '[' EM "for" . identificador "in" EM ']'      (rule 17)

	identificador  shift, and enter state 57


State 43

	EM -> EM . '+' EM                                   (rule 2)
	EM -> EM . '-' EM                                   (rule 3)
	EM -> EM . '*' EM                                   (rule 4)
	EM -> EM . '/' EM                                   (rule 5)
	EM -> EM . '^' EM                                   (rule 6)
	EM -> "range" '(' EM . ',' EM ')'                   (rule 16)

	'+'            shift, and enter state 27
	'-'            shift, and enter state 28
	'*'            shift, and enter state 29
	'/'            shift, and enter state 30
	'^'            shift, and enter state 31
	','            shift, and enter state 56


State 44

	EM -> EM . '+' EM                                   (rule 2)
	EM -> EM . '-' EM                                   (rule 3)
	EM -> EM . '*' EM                                   (rule 4)
	EM -> EM . '/' EM                                   (rule 5)
	EM -> EM . '^' EM                                   (rule 6)
	COND -> EM .                                        (rule 21)

	'+'            shift, and enter state 27
	'-'            shift, and enter state 28
	'*'            shift, and enter state 29
	'/'            shift, and enter state 30
	'^'            shift, and enter state 31
	','            reduce using rule 21
	"AND"          reduce using rule 21
	"OR"           reduce using rule 21
	'<'            reduce using rule 21
	'>'            reduce using rule 21
	">="           reduce using rule 21
	"<="           reduce using rule 21
	"=="           reduce using rule 21


State 45

	EM -> "if" '(' COND . ',' EM ',' EM ')'             (rule 18)
	COND -> COND . "AND" COND                           (rule 22)
	COND -> COND . "OR" COND                            (rule 23)
	COND -> COND . '>' COND                             (rule 25)
	COND -> COND . '<' COND                             (rule 26)
	COND -> COND . "<=" COND                            (rule 27)
	COND -> COND . ">=" COND                            (rule 28)
	COND -> COND . "==" COND                            (rule 29)

	','            shift, and enter state 48
	"AND"          shift, and enter state 49
	"OR"           shift, and enter state 50
	'<'            shift, and enter state 51
	'>'            shift, and enter state 52
	">="           shift, and enter state 53
	"<="           shift, and enter state 54
	"=="           shift, and enter state 55


State 46

	COND -> "NOT" . COND                                (rule 24)

	'-'            shift, and enter state 9
	int            shift, and enter state 10
	real           shift, and enter state 11
	constmat       shift, and enter state 12
	funcion        shift, and enter state 13
	'('            shift, and enter state 14
	'['            shift, and enter state 15
	"range"        shift, and enter state 16
	"if"           shift, and enter state 17
	"NOT"          shift, and enter state 46
	identificador  shift, and enter state 18

	EM             goto state 44
	COND           goto state 47

State 47

	COND -> COND . "AND" COND                           (rule 22)
	COND -> COND . "OR" COND                            (rule 23)
	COND -> "NOT" COND .                                (rule 24)
	COND -> COND . '>' COND                             (rule 25)
	COND -> COND . '<' COND                             (rule 26)
	COND -> COND . "<=" COND                            (rule 27)
	COND -> COND . ">=" COND                            (rule 28)
	COND -> COND . "==" COND                            (rule 29)

	','            reduce using rule 24
	"AND"          reduce using rule 24
	"OR"           reduce using rule 24
	'<'            shift, and enter state 51
	'>'            shift, and enter state 52
	">="           shift, and enter state 53
	"<="           shift, and enter state 54
	"=="           shift, and enter state 55


State 48

	EM -> "if" '(' COND ',' . EM ',' EM ')'             (rule 18)

	'-'            shift, and enter state 9
	int            shift, and enter state 10
	real           shift, and enter state 11
	constmat       shift, and enter state 12
	funcion        shift, and enter state 13
	'('            shift, and enter state 14
	'['            shift, and enter state 15
	"range"        shift, and enter state 16
	"if"           shift, and enter state 17
	identificador  shift, and enter state 18

	EM             goto state 69

State 49

	COND -> COND "AND" . COND                           (rule 22)

	'-'            shift, and enter state 9
	int            shift, and enter state 10
	real           shift, and enter state 11
	constmat       shift, and enter state 12
	funcion        shift, and enter state 13
	'('            shift, and enter state 14
	'['            shift, and enter state 15
	"range"        shift, and enter state 16
	"if"           shift, and enter state 17
	"NOT"          shift, and enter state 46
	identificador  shift, and enter state 18

	EM             goto state 44
	COND           goto state 68

State 50

	COND -> COND "OR" . COND                            (rule 23)

	'-'            shift, and enter state 9
	int            shift, and enter state 10
	real           shift, and enter state 11
	constmat       shift, and enter state 12
	funcion        shift, and enter state 13
	'('            shift, and enter state 14
	'['            shift, and enter state 15
	"range"        shift, and enter state 16
	"if"           shift, and enter state 17
	"NOT"          shift, and enter state 46
	identificador  shift, and enter state 18

	EM             goto state 44
	COND           goto state 67

State 51

	COND -> COND '<' . COND                             (rule 26)

	'-'            shift, and enter state 9
	int            shift, and enter state 10
	real           shift, and enter state 11
	constmat       shift, and enter state 12
	funcion        shift, and enter state 13
	'('            shift, and enter state 14
	'['            shift, and enter state 15
	"range"        shift, and enter state 16
	"if"           shift, and enter state 17
	"NOT"          shift, and enter state 46
	identificador  shift, and enter state 18

	EM             goto state 44
	COND           goto state 66

State 52

	COND -> COND '>' . COND                             (rule 25)

	'-'            shift, and enter state 9
	int            shift, and enter state 10
	real           shift, and enter state 11
	constmat       shift, and enter state 12
	funcion        shift, and enter state 13
	'('            shift, and enter state 14
	'['            shift, and enter state 15
	"range"        shift, and enter state 16
	"if"           shift, and enter state 17
	"NOT"          shift, and enter state 46
	identificador  shift, and enter state 18

	EM             goto state 44
	COND           goto state 65

State 53

	COND -> COND ">=" . COND                            (rule 28)

	'-'            shift, and enter state 9
	int            shift, and enter state 10
	real           shift, and enter state 11
	constmat       shift, and enter state 12
	funcion        shift, and enter state 13
	'('            shift, and enter state 14
	'['            shift, and enter state 15
	"range"        shift, and enter state 16
	"if"           shift, and enter state 17
	"NOT"          shift, and enter state 46
	identificador  shift, and enter state 18

	EM             goto state 44
	COND           goto state 64

State 54

	COND -> COND "<=" . COND                            (rule 27)

	'-'            shift, and enter state 9
	int            shift, and enter state 10
	real           shift, and enter state 11
	constmat       shift, and enter state 12
	funcion        shift, and enter state 13
	'('            shift, and enter state 14
	'['            shift, and enter state 15
	"range"        shift, and enter state 16
	"if"           shift, and enter state 17
	"NOT"          shift, and enter state 46
	identificador  shift, and enter state 18

	EM             goto state 44
	COND           goto state 63

State 55

	COND -> COND "==" . COND                            (rule 29)

	'-'            shift, and enter state 9
	int            shift, and enter state 10
	real           shift, and enter state 11
	constmat       shift, and enter state 12
	funcion        shift, and enter state 13
	'('            shift, and enter state 14
	'['            shift, and enter state 15
	"range"        shift, and enter state 16
	"if"           shift, and enter state 17
	"NOT"          shift, and enter state 46
	identificador  shift, and enter state 18

	EM             goto state 44
	COND           goto state 62

State 56

	EM -> "range" '(' EM ',' . EM ')'                   (rule 16)

	'-'            shift, and enter state 9
	int            shift, and enter state 10
	real           shift, and enter state 11
	constmat       shift, and enter state 12
	funcion        shift, and enter state 13
	'('            shift, and enter state 14
	'['            shift, and enter state 15
	"range"        shift, and enter state 16
	"if"           shift, and enter state 17
	identificador  shift, and enter state 18

	EM             goto state 61

State 57

	EM -> '[' EM "for" identificador . "in" EM ']'      (rule 17)

	"in"           shift, and enter state 60


State 58

	EM -> EM . '+' EM                                   (rule 2)
	EM -> EM . '-' EM                                   (rule 3)
	EM -> EM . '*' EM                                   (rule 4)
	EM -> EM . '/' EM                                   (rule 5)
	EM -> EM . '^' EM                                   (rule 6)
	SECUENCIA_EM -> SECUENCIA_EM ',' EM .               (rule 20)

	'+'            shift, and enter state 27
	'-'            shift, and enter state 28
	'*'            shift, and enter state 29
	'/'            shift, and enter state 30
	'^'            shift, and enter state 31
	']'            reduce using rule 20
	','            reduce using rule 20


State 59

	EM -> funcion '(' EM ')' .                          (rule 12)

	'+'            reduce using rule 12
	'-'            reduce using rule 12
	'*'            reduce using rule 12
	'/'            reduce using rule 12
	'^'            reduce using rule 12
	')'            reduce using rule 12
	']'            reduce using rule 12
	','            reduce using rule 12
	"for"          reduce using rule 12
	"AND"          reduce using rule 12
	"OR"           reduce using rule 12
	'<'            reduce using rule 12
	'>'            reduce using rule 12
	">="           reduce using rule 12
	"<="           reduce using rule 12
	"=="           reduce using rule 12
	';'            reduce using rule 12


State 60

	EM -> '[' EM "for" identificador "in" . EM ']'      (rule 17)

	'-'            shift, and enter state 9
	int            shift, and enter state 10
	real           shift, and enter state 11
	constmat       shift, and enter state 12
	funcion        shift, and enter state 13
	'('            shift, and enter state 14
	'['            shift, and enter state 15
	"range"        shift, and enter state 16
	"if"           shift, and enter state 17
	identificador  shift, and enter state 18

	EM             goto state 72

State 61

	EM -> EM . '+' EM                                   (rule 2)
	EM -> EM . '-' EM                                   (rule 3)
	EM -> EM . '*' EM                                   (rule 4)
	EM -> EM . '/' EM                                   (rule 5)
	EM -> EM . '^' EM                                   (rule 6)
	EM -> "range" '(' EM ',' EM . ')'                   (rule 16)

	'+'            shift, and enter state 27
	'-'            shift, and enter state 28
	'*'            shift, and enter state 29
	'/'            shift, and enter state 30
	'^'            shift, and enter state 31
	')'            shift, and enter state 71


State 62

	COND -> COND . "AND" COND                           (rule 22)
	COND -> COND . "OR" COND                            (rule 23)
	COND -> COND . '>' COND                             (rule 25)
	COND -> COND . '<' COND                             (rule 26)
	COND -> COND . "<=" COND                            (rule 27)
	COND -> COND . ">=" COND                            (rule 28)
	COND -> COND . "==" COND                            (rule 29)
	COND -> COND "==" COND .                            (rule 29)

	','            reduce using rule 29
	"AND"          reduce using rule 29
	"OR"           reduce using rule 29
	'<'            shift, and enter state 51
	'>'            shift, and enter state 52
	">="           shift, and enter state 53
	"<="           shift, and enter state 54
	"=="           reduce using rule 29


State 63

	COND -> COND . "AND" COND                           (rule 22)
	COND -> COND . "OR" COND                            (rule 23)
	COND -> COND . '>' COND                             (rule 25)
	COND -> COND . '<' COND                             (rule 26)
	COND -> COND . "<=" COND                            (rule 27)
	COND -> COND "<=" COND .                            (rule 27)
	COND -> COND . ">=" COND                            (rule 28)
	COND -> COND . "==" COND                            (rule 29)

	','            reduce using rule 27
	"AND"          reduce using rule 27
	"OR"           reduce using rule 27
	'<'            reduce using rule 27
	'>'            reduce using rule 27
	">="           reduce using rule 27
	"<="           reduce using rule 27
	"=="           reduce using rule 27


State 64

	COND -> COND . "AND" COND                           (rule 22)
	COND -> COND . "OR" COND                            (rule 23)
	COND -> COND . '>' COND                             (rule 25)
	COND -> COND . '<' COND                             (rule 26)
	COND -> COND . "<=" COND                            (rule 27)
	COND -> COND . ">=" COND                            (rule 28)
	COND -> COND ">=" COND .                            (rule 28)
	COND -> COND . "==" COND                            (rule 29)

	','            reduce using rule 28
	"AND"          reduce using rule 28
	"OR"           reduce using rule 28
	'<'            reduce using rule 28
	'>'            reduce using rule 28
	">="           reduce using rule 28
	"<="           reduce using rule 28
	"=="           reduce using rule 28


State 65

	COND -> COND . "AND" COND                           (rule 22)
	COND -> COND . "OR" COND                            (rule 23)
	COND -> COND . '>' COND                             (rule 25)
	COND -> COND '>' COND .                             (rule 25)
	COND -> COND . '<' COND                             (rule 26)
	COND -> COND . "<=" COND                            (rule 27)
	COND -> COND . ">=" COND                            (rule 28)
	COND -> COND . "==" COND                            (rule 29)

	','            reduce using rule 25
	"AND"          reduce using rule 25
	"OR"           reduce using rule 25
	'<'            reduce using rule 25
	'>'            reduce using rule 25
	">="           reduce using rule 25
	"<="           reduce using rule 25
	"=="           reduce using rule 25


State 66

	COND -> COND . "AND" COND                           (rule 22)
	COND -> COND . "OR" COND                            (rule 23)
	COND -> COND . '>' COND                             (rule 25)
	COND -> COND . '<' COND                             (rule 26)
	COND -> COND '<' COND .                             (rule 26)
	COND -> COND . "<=" COND                            (rule 27)
	COND -> COND . ">=" COND                            (rule 28)
	COND -> COND . "==" COND                            (rule 29)

	','            reduce using rule 26
	"AND"          reduce using rule 26
	"OR"           reduce using rule 26
	'<'            reduce using rule 26
	'>'            reduce using rule 26
	">="           reduce using rule 26
	"<="           reduce using rule 26
	"=="           reduce using rule 26


State 67

	COND -> COND . "AND" COND                           (rule 22)
	COND -> COND . "OR" COND                            (rule 23)
	COND -> COND "OR" COND .                            (rule 23)
	COND -> COND . '>' COND                             (rule 25)
	COND -> COND . '<' COND                             (rule 26)
	COND -> COND . "<=" COND                            (rule 27)
	COND -> COND . ">=" COND                            (rule 28)
	COND -> COND . "==" COND                            (rule 29)

	','            reduce using rule 23
	"AND"          reduce using rule 23
	"OR"           reduce using rule 23
	'<'            shift, and enter state 51
	'>'            shift, and enter state 52
	">="           shift, and enter state 53
	"<="           shift, and enter state 54
	"=="           shift, and enter state 55


State 68

	COND -> COND . "AND" COND                           (rule 22)
	COND -> COND "AND" COND .                           (rule 22)
	COND -> COND . "OR" COND                            (rule 23)
	COND -> COND . '>' COND                             (rule 25)
	COND -> COND . '<' COND                             (rule 26)
	COND -> COND . "<=" COND                            (rule 27)
	COND -> COND . ">=" COND                            (rule 28)
	COND -> COND . "==" COND                            (rule 29)

	','            reduce using rule 22
	"AND"          reduce using rule 22
	"OR"           reduce using rule 22
	'<'            shift, and enter state 51
	'>'            shift, and enter state 52
	">="           shift, and enter state 53
	"<="           shift, and enter state 54
	"=="           shift, and enter state 55


State 69

	EM -> EM . '+' EM                                   (rule 2)
	EM -> EM . '-' EM                                   (rule 3)
	EM -> EM . '*' EM                                   (rule 4)
	EM -> EM . '/' EM                                   (rule 5)
	EM -> EM . '^' EM                                   (rule 6)
	EM -> "if" '(' COND ',' EM . ',' EM ')'             (rule 18)

	'+'            shift, and enter state 27
	'-'            shift, and enter state 28
	'*'            shift, and enter state 29
	'/'            shift, and enter state 30
	'^'            shift, and enter state 31
	','            shift, and enter state 70


State 70

	EM -> "if" '(' COND ',' EM ',' . EM ')'             (rule 18)

	'-'            shift, and enter state 9
	int            shift, and enter state 10
	real           shift, and enter state 11
	constmat       shift, and enter state 12
	funcion        shift, and enter state 13
	'('            shift, and enter state 14
	'['            shift, and enter state 15
	"range"        shift, and enter state 16
	"if"           shift, and enter state 17
	identificador  shift, and enter state 18

	EM             goto state 74

State 71

	EM -> "range" '(' EM ',' EM ')' .                   (rule 16)

	'+'            reduce using rule 16
	'-'            reduce using rule 16
	'*'            reduce using rule 16
	'/'            reduce using rule 16
	'^'            reduce using rule 16
	')'            reduce using rule 16
	']'            reduce using rule 16
	','            reduce using rule 16
	"for"          reduce using rule 16
	"AND"          reduce using rule 16
	"OR"           reduce using rule 16
	'<'            reduce using rule 16
	'>'            reduce using rule 16
	">="           reduce using rule 16
	"<="           reduce using rule 16
	"=="           reduce using rule 16
	';'            reduce using rule 16


State 72

	EM -> EM . '+' EM                                   (rule 2)
	EM -> EM . '-' EM                                   (rule 3)
	EM -> EM . '*' EM                                   (rule 4)
	EM -> EM . '/' EM                                   (rule 5)
	EM -> EM . '^' EM                                   (rule 6)
	EM -> '[' EM "for" identificador "in" EM . ']'      (rule 17)

	'+'            shift, and enter state 27
	'-'            shift, and enter state 28
	'*'            shift, and enter state 29
	'/'            shift, and enter state 30
	'^'            shift, and enter state 31
	']'            shift, and enter state 73


State 73

	EM -> '[' EM "for" identificador "in" EM ']' .      (rule 17)

	'+'            reduce using rule 17
	'-'            reduce using rule 17
	'*'            reduce using rule 17
	'/'            reduce using rule 17
	'^'            reduce using rule 17
	')'            reduce using rule 17
	']'            reduce using rule 17
	','            reduce using rule 17
	"for"          reduce using rule 17
	"AND"          reduce using rule 17
	"OR"           reduce using rule 17
	'<'            reduce using rule 17
	'>'            reduce using rule 17
	">="           reduce using rule 17
	"<="           reduce using rule 17
	"=="           reduce using rule 17
	';'            reduce using rule 17


State 74

	EM -> EM . '+' EM                                   (rule 2)
	EM -> EM . '-' EM                                   (rule 3)
	EM -> EM . '*' EM                                   (rule 4)
	EM -> EM . '/' EM                                   (rule 5)
	EM -> EM . '^' EM                                   (rule 6)
	EM -> "if" '(' COND ',' EM ',' EM . ')'             (rule 18)

	'+'            shift, and enter state 27
	'-'            shift, and enter state 28
	'*'            shift, and enter state 29
	'/'            shift, and enter state 30
	'^'            shift, and enter state 31
	')'            shift, and enter state 75


State 75

	EM -> "if" '(' COND ',' EM ',' EM ')' .             (rule 18)

	'+'            reduce using rule 18
	'-'            reduce using rule 18
	'*'            reduce using rule 18
	'/'            reduce using rule 18
	'^'            reduce using rule 18
	')'            reduce using rule 18
	']'            reduce using rule 18
	','            reduce using rule 18
	"for"          reduce using rule 18
	"AND"          reduce using rule 18
	"OR"           reduce using rule 18
	'<'            reduce using rule 18
	'>'            reduce using rule 18
	">="           reduce using rule 18
	"<="           reduce using rule 18
	"=="           reduce using rule 18
	';'            reduce using rule 18


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 32
Number of terminals: 30
Number of non-terminals: 6
Number of states: 76
