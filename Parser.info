-----------------------------------------------------------------------------
Info file generated by Happy Version 1.18.4 from Parser.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> SEC_INSTR                          (0)
	SEC_INSTR -> INSTR ';'                             (1)
	SEC_INSTR -> CICLO                                 (2)
	SEC_INSTR -> SEC_INSTR INSTR ';'                   (3)
	INSTR -> identificador '(' identificador ')' '=' EM   (4)
	INSTR -> identificador '=' EM                      (5)
	INSTR -> "plot" ARREGLO EG "with" '[' ']'          (6)
	INSTR -> "plot" ARREGLO EG "with" '[' SECUENCIA_ESTILO ']'   (7)
	INSTR -> "plot" ARREGLO EG "with" estilo           (8)
	INSTR -> "plot" ARREGLO EG                         (9)
	INSTR -> "push_back" '(' identificador ',' EM ')'   (10)
	CICLO -> "for" identificador "in" ARREGLO SEC_INSTR_CICLO "endfor"   (11)
	CICLO -> "for" identificador "in" ARREGLO "step" int SEC_INSTR_CICLO "endfor"   (12)
	SEC_INSTR_CICLO -> INSTR                           (13)
	SEC_INSTR_CICLO -> CICLO                           (14)
	SEC_INSTR_CICLO -> SEC_INSTR_CICLO ';' INSTR       (15)
	SECUENCIA_ESTILO -> SECUENCIA_ESTILO ',' estilo    (16)
	SECUENCIA_ESTILO -> estilo                         (17)
	EM -> EM '+' EM                                    (18)
	EM -> EM '-' EM                                    (19)
	EM -> EM '*' EM                                    (20)
	EM -> EM '/' EM                                    (21)
	EM -> EM '^' EM                                    (22)
	EM -> '-' EM                                       (23)
	EM -> '(' EM ')'                                   (24)
	EM -> int                                          (25)
	EM -> real                                         (26)
	EM -> constmat                                     (27)
	EM -> funcion '(' EM ')'                           (28)
	EM -> identificador '(' EM ')'                     (29)
	EM -> identificador                                (30)
	EM -> ARREGLO                                      (31)
	EM -> "if" '(' COND ',' EM ',' EM ')'              (32)
	ARREGLO -> '[' ']'                                 (33)
	ARREGLO -> '[' SECUENCIA_EM ']'                    (34)
	ARREGLO -> "range" '(' int ',' int ')'             (35)
	ARREGLO -> '[' EM "for" identificador "in" ARREGLO ']'   (36)
	SECUENCIA_EM -> EM                                 (37)
	SECUENCIA_EM -> SECUENCIA_EM ',' EM                (38)
	COND -> EM                                         (39)
	COND -> COND "AND" COND                            (40)
	COND -> COND "OR" COND                             (41)
	COND -> "NOT" COND                                 (42)
	COND -> COND '>' COND                              (43)
	COND -> COND '<' COND                              (44)
	COND -> COND "<=" COND                             (45)
	COND -> COND ">=" COND                             (46)
	COND -> COND "==" COND                             (47)
	EG -> EM                                           (48)
	EG -> archivo                                      (49)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'+'            { TkMas }
	'-'            { TkMenos }
	'*'            { TkPor }
	'/'            { TkEntre }
	'^'            { TkElevado }
	int            { TkEntero $$ }
	real           { TkReal $$ }
	constmat       { TkConstanteMat $$ }
	funcion        { TkFuncion $$ }
	'('            { TkParentesisI }
	')'            { TkParentesisD }
	'['            { TkCorcheteI }
	']'            { TkCorcheteD }
	','            { TkComa }
	"range"        { TkRango }
	"for"          { TkFor }
	"in"           { TkIn }
	"if"           { TkIf }
	"AND"          { TkAnd }
	"OR"           { TkOr }
	"NOT"          { TkNot }
	'<'            { TkMenor }
	'>'            { TkMayor }
	">="           { TkMayorIg }
	"<="           { TkMenorIg }
	"=="           { TkIgual }
	';'            { TkPuntoYComa }
	'='            { TkAsignacion }
	"with"         { TkWith }
	"plot"         { TkPlot }
	"endfor"       { TkEndFor }
	"step"         { TkStep }
	"push_back"    { TkPushBack }
	estilo         { TkEstilo $$ }
	identificador  { TkIdentificador $$ }
	archivo        { TkArchivo $$ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	SEC_INSTR       rules 1, 2, 3
	INSTR           rules 4, 5, 6, 7, 8, 9, 10
	CICLO           rules 11, 12
	SEC_INSTR_CICLO rules 13, 14, 15
	SECUENCIA_ESTILO rules 16, 17
	EM              rules 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32
	ARREGLO         rules 33, 34, 35, 36
	SECUENCIA_EM    rules 37, 38
	COND            rules 39, 40, 41, 42, 43, 44, 45, 46, 47
	EG              rules 48, 49

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	"for"          shift, and enter state 8
	"plot"         shift, and enter state 3
	"push_back"    shift, and enter state 4
	identificador  shift, and enter state 5

	SEC_INSTR      goto state 6
	INSTR          goto state 2
	CICLO          goto state 7

State 1


	"plot"         shift, and enter state 3
	"push_back"    shift, and enter state 4
	identificador  shift, and enter state 5

	INSTR          goto state 2

State 2

	SEC_INSTR -> INSTR . ';'                            (rule 1)

	';'            shift, and enter state 17


State 3

	INSTR -> "plot" . ARREGLO EG "with" '[' ']'         (rule 6)
	INSTR -> "plot" . ARREGLO EG "with" '[' SECUENCIA_ESTILO ']'    (rule 7)
	INSTR -> "plot" . ARREGLO EG "with" estilo          (rule 8)
	INSTR -> "plot" . ARREGLO EG                        (rule 9)

	'['            shift, and enter state 15
	"range"        shift, and enter state 16

	ARREGLO        goto state 14

State 4

	INSTR -> "push_back" . '(' identificador ',' EM ')'    (rule 10)

	'('            shift, and enter state 13


State 5

	INSTR -> identificador . '(' identificador ')' '=' EM    (rule 4)
	INSTR -> identificador . '=' EM                     (rule 5)

	'('            shift, and enter state 11
	'='            shift, and enter state 12


State 6

	%start_parse -> SEC_INSTR .                         (rule 0)
	SEC_INSTR -> SEC_INSTR . INSTR ';'                  (rule 3)

	"plot"         shift, and enter state 3
	"push_back"    shift, and enter state 4
	identificador  shift, and enter state 5
	%eof           accept

	INSTR          goto state 10

State 7

	SEC_INSTR -> CICLO .                                (rule 2)

	"plot"         reduce using rule 2
	"push_back"    reduce using rule 2
	identificador  reduce using rule 2
	%eof           reduce using rule 2


State 8

	CICLO -> "for" . identificador "in" ARREGLO SEC_INSTR_CICLO "endfor"    (rule 11)
	CICLO -> "for" . identificador "in" ARREGLO "step" int SEC_INSTR_CICLO "endfor"    (rule 12)

	identificador  shift, and enter state 9


State 9

	CICLO -> "for" identificador . "in" ARREGLO SEC_INSTR_CICLO "endfor"    (rule 11)
	CICLO -> "for" identificador . "in" ARREGLO "step" int SEC_INSTR_CICLO "endfor"    (rule 12)

	"in"           shift, and enter state 38


State 10

	SEC_INSTR -> SEC_INSTR INSTR . ';'                  (rule 3)

	';'            shift, and enter state 37


State 11

	INSTR -> identificador '(' . identificador ')' '=' EM    (rule 4)

	identificador  shift, and enter state 36


State 12

	INSTR -> identificador '=' . EM                     (rule 5)

	'-'            shift, and enter state 22
	int            shift, and enter state 23
	real           shift, and enter state 24
	constmat       shift, and enter state 25
	funcion        shift, and enter state 26
	'('            shift, and enter state 27
	'['            shift, and enter state 15
	"range"        shift, and enter state 16
	"if"           shift, and enter state 29
	identificador  shift, and enter state 30

	EM             goto state 35
	ARREGLO        goto state 20

State 13

	INSTR -> "push_back" '(' . identificador ',' EM ')'    (rule 10)

	identificador  shift, and enter state 34


State 14

	INSTR -> "plot" ARREGLO . EG "with" '[' ']'         (rule 6)
	INSTR -> "plot" ARREGLO . EG "with" '[' SECUENCIA_ESTILO ']'    (rule 7)
	INSTR -> "plot" ARREGLO . EG "with" estilo          (rule 8)
	INSTR -> "plot" ARREGLO . EG                        (rule 9)

	'-'            shift, and enter state 22
	int            shift, and enter state 23
	real           shift, and enter state 24
	constmat       shift, and enter state 25
	funcion        shift, and enter state 26
	'('            shift, and enter state 27
	'['            shift, and enter state 15
	"range"        shift, and enter state 16
	"if"           shift, and enter state 29
	identificador  shift, and enter state 30
	archivo        shift, and enter state 33

	EM             goto state 31
	ARREGLO        goto state 20
	EG             goto state 32

State 15

	ARREGLO -> '[' . ']'                                (rule 33)
	ARREGLO -> '[' . SECUENCIA_EM ']'                   (rule 34)
	ARREGLO -> '[' . EM "for" identificador "in" ARREGLO ']'    (rule 36)

	'-'            shift, and enter state 22
	int            shift, and enter state 23
	real           shift, and enter state 24
	constmat       shift, and enter state 25
	funcion        shift, and enter state 26
	'('            shift, and enter state 27
	'['            shift, and enter state 15
	']'            shift, and enter state 28
	"range"        shift, and enter state 16
	"if"           shift, and enter state 29
	identificador  shift, and enter state 30

	EM             goto state 19
	ARREGLO        goto state 20
	SECUENCIA_EM   goto state 21

State 16

	ARREGLO -> "range" . '(' int ',' int ')'            (rule 35)

	'('            shift, and enter state 18


State 17

	SEC_INSTR -> INSTR ';' .                            (rule 1)

	"plot"         reduce using rule 1
	"push_back"    reduce using rule 1
	identificador  reduce using rule 1
	%eof           reduce using rule 1


State 18

	ARREGLO -> "range" '(' . int ',' int ')'            (rule 35)

	int            shift, and enter state 56


State 19

	EM -> EM . '+' EM                                   (rule 18)
	EM -> EM . '-' EM                                   (rule 19)
	EM -> EM . '*' EM                                   (rule 20)
	EM -> EM . '/' EM                                   (rule 21)
	EM -> EM . '^' EM                                   (rule 22)
	ARREGLO -> '[' EM . "for" identificador "in" ARREGLO ']'    (rule 36)
	SECUENCIA_EM -> EM .                                (rule 37)

	'+'            shift, and enter state 41
	'-'            shift, and enter state 42
	'*'            shift, and enter state 43
	'/'            shift, and enter state 44
	'^'            shift, and enter state 45
	']'            reduce using rule 37
	','            reduce using rule 37
	"for"          shift, and enter state 55


State 20

	EM -> ARREGLO .                                     (rule 31)

	'+'            reduce using rule 31
	'-'            reduce using rule 31
	'*'            reduce using rule 31
	'/'            reduce using rule 31
	'^'            reduce using rule 31
	')'            reduce using rule 31
	']'            reduce using rule 31
	','            reduce using rule 31
	"for"          reduce using rule 31
	"AND"          reduce using rule 31
	"OR"           reduce using rule 31
	'<'            reduce using rule 31
	'>'            reduce using rule 31
	">="           reduce using rule 31
	"<="           reduce using rule 31
	"=="           reduce using rule 31
	';'            reduce using rule 31
	"with"         reduce using rule 31
	"endfor"       reduce using rule 31


State 21

	ARREGLO -> '[' SECUENCIA_EM . ']'                   (rule 34)
	SECUENCIA_EM -> SECUENCIA_EM . ',' EM               (rule 38)

	']'            shift, and enter state 53
	','            shift, and enter state 54


State 22

	EM -> '-' . EM                                      (rule 23)

	'-'            shift, and enter state 22
	int            shift, and enter state 23
	real           shift, and enter state 24
	constmat       shift, and enter state 25
	funcion        shift, and enter state 26
	'('            shift, and enter state 27
	'['            shift, and enter state 15
	"range"        shift, and enter state 16
	"if"           shift, and enter state 29
	identificador  shift, and enter state 30

	EM             goto state 52
	ARREGLO        goto state 20

State 23

	EM -> int .                                         (rule 25)

	'+'            reduce using rule 25
	'-'            reduce using rule 25
	'*'            reduce using rule 25
	'/'            reduce using rule 25
	'^'            reduce using rule 25
	')'            reduce using rule 25
	']'            reduce using rule 25
	','            reduce using rule 25
	"for"          reduce using rule 25
	"AND"          reduce using rule 25
	"OR"           reduce using rule 25
	'<'            reduce using rule 25
	'>'            reduce using rule 25
	">="           reduce using rule 25
	"<="           reduce using rule 25
	"=="           reduce using rule 25
	';'            reduce using rule 25
	"with"         reduce using rule 25
	"endfor"       reduce using rule 25


State 24

	EM -> real .                                        (rule 26)

	'+'            reduce using rule 26
	'-'            reduce using rule 26
	'*'            reduce using rule 26
	'/'            reduce using rule 26
	'^'            reduce using rule 26
	')'            reduce using rule 26
	']'            reduce using rule 26
	','            reduce using rule 26
	"for"          reduce using rule 26
	"AND"          reduce using rule 26
	"OR"           reduce using rule 26
	'<'            reduce using rule 26
	'>'            reduce using rule 26
	">="           reduce using rule 26
	"<="           reduce using rule 26
	"=="           reduce using rule 26
	';'            reduce using rule 26
	"with"         reduce using rule 26
	"endfor"       reduce using rule 26


State 25

	EM -> constmat .                                    (rule 27)

	'+'            reduce using rule 27
	'-'            reduce using rule 27
	'*'            reduce using rule 27
	'/'            reduce using rule 27
	'^'            reduce using rule 27
	')'            reduce using rule 27
	']'            reduce using rule 27
	','            reduce using rule 27
	"for"          reduce using rule 27
	"AND"          reduce using rule 27
	"OR"           reduce using rule 27
	'<'            reduce using rule 27
	'>'            reduce using rule 27
	">="           reduce using rule 27
	"<="           reduce using rule 27
	"=="           reduce using rule 27
	';'            reduce using rule 27
	"with"         reduce using rule 27
	"endfor"       reduce using rule 27


State 26

	EM -> funcion . '(' EM ')'                          (rule 28)

	'('            shift, and enter state 51


State 27

	EM -> '(' . EM ')'                                  (rule 24)

	'-'            shift, and enter state 22
	int            shift, and enter state 23
	real           shift, and enter state 24
	constmat       shift, and enter state 25
	funcion        shift, and enter state 26
	'('            shift, and enter state 27
	'['            shift, and enter state 15
	"range"        shift, and enter state 16
	"if"           shift, and enter state 29
	identificador  shift, and enter state 30

	EM             goto state 50
	ARREGLO        goto state 20

State 28

	ARREGLO -> '[' ']' .                                (rule 33)

	'+'            reduce using rule 33
	'-'            reduce using rule 33
	'*'            reduce using rule 33
	'/'            reduce using rule 33
	'^'            reduce using rule 33
	int            reduce using rule 33
	real           reduce using rule 33
	constmat       reduce using rule 33
	funcion        reduce using rule 33
	'('            reduce using rule 33
	')'            reduce using rule 33
	'['            reduce using rule 33
	']'            reduce using rule 33
	','            reduce using rule 33
	"range"        reduce using rule 33
	"for"          reduce using rule 33
	"if"           reduce using rule 33
	"AND"          reduce using rule 33
	"OR"           reduce using rule 33
	'<'            reduce using rule 33
	'>'            reduce using rule 33
	">="           reduce using rule 33
	"<="           reduce using rule 33
	"=="           reduce using rule 33
	';'            reduce using rule 33
	"with"         reduce using rule 33
	"plot"         reduce using rule 33
	"endfor"       reduce using rule 33
	"step"         reduce using rule 33
	"push_back"    reduce using rule 33
	identificador  reduce using rule 33
	archivo        reduce using rule 33


State 29

	EM -> "if" . '(' COND ',' EM ',' EM ')'             (rule 32)

	'('            shift, and enter state 49


State 30

	EM -> identificador . '(' EM ')'                    (rule 29)
	EM -> identificador .                               (rule 30)

	'+'            reduce using rule 30
	'-'            reduce using rule 30
	'*'            reduce using rule 30
	'/'            reduce using rule 30
	'^'            reduce using rule 30
	'('            shift, and enter state 48
	')'            reduce using rule 30
	']'            reduce using rule 30
	','            reduce using rule 30
	"for"          reduce using rule 30
	"AND"          reduce using rule 30
	"OR"           reduce using rule 30
	'<'            reduce using rule 30
	'>'            reduce using rule 30
	">="           reduce using rule 30
	"<="           reduce using rule 30
	"=="           reduce using rule 30
	';'            reduce using rule 30
	"with"         reduce using rule 30
	"endfor"       reduce using rule 30


State 31

	EM -> EM . '+' EM                                   (rule 18)
	EM -> EM . '-' EM                                   (rule 19)
	EM -> EM . '*' EM                                   (rule 20)
	EM -> EM . '/' EM                                   (rule 21)
	EM -> EM . '^' EM                                   (rule 22)
	EG -> EM .                                          (rule 48)

	'+'            shift, and enter state 41
	'-'            shift, and enter state 42
	'*'            shift, and enter state 43
	'/'            shift, and enter state 44
	'^'            shift, and enter state 45
	';'            reduce using rule 48
	"with"         reduce using rule 48
	"endfor"       reduce using rule 48


State 32

	INSTR -> "plot" ARREGLO EG . "with" '[' ']'         (rule 6)
	INSTR -> "plot" ARREGLO EG . "with" '[' SECUENCIA_ESTILO ']'    (rule 7)
	INSTR -> "plot" ARREGLO EG . "with" estilo          (rule 8)
	INSTR -> "plot" ARREGLO EG .                        (rule 9)

	';'            reduce using rule 9
	"with"         shift, and enter state 47
	"endfor"       reduce using rule 9


State 33

	EG -> archivo .                                     (rule 49)

	';'            reduce using rule 49
	"with"         reduce using rule 49
	"endfor"       reduce using rule 49


State 34

	INSTR -> "push_back" '(' identificador . ',' EM ')'    (rule 10)

	','            shift, and enter state 46


State 35

	INSTR -> identificador '=' EM .                     (rule 5)
	EM -> EM . '+' EM                                   (rule 18)
	EM -> EM . '-' EM                                   (rule 19)
	EM -> EM . '*' EM                                   (rule 20)
	EM -> EM . '/' EM                                   (rule 21)
	EM -> EM . '^' EM                                   (rule 22)

	'+'            shift, and enter state 41
	'-'            shift, and enter state 42
	'*'            shift, and enter state 43
	'/'            shift, and enter state 44
	'^'            shift, and enter state 45
	';'            reduce using rule 5
	"endfor"       reduce using rule 5


State 36

	INSTR -> identificador '(' identificador . ')' '=' EM    (rule 4)

	')'            shift, and enter state 40


State 37

	SEC_INSTR -> SEC_INSTR INSTR ';' .                  (rule 3)

	"plot"         reduce using rule 3
	"push_back"    reduce using rule 3
	identificador  reduce using rule 3
	%eof           reduce using rule 3


State 38

	CICLO -> "for" identificador "in" . ARREGLO SEC_INSTR_CICLO "endfor"    (rule 11)
	CICLO -> "for" identificador "in" . ARREGLO "step" int SEC_INSTR_CICLO "endfor"    (rule 12)

	'['            shift, and enter state 15
	"range"        shift, and enter state 16

	ARREGLO        goto state 39

State 39

	CICLO -> "for" identificador "in" ARREGLO . SEC_INSTR_CICLO "endfor"    (rule 11)
	CICLO -> "for" identificador "in" ARREGLO . "step" int SEC_INSTR_CICLO "endfor"    (rule 12)

	"for"          shift, and enter state 8
	"plot"         shift, and enter state 3
	"step"         shift, and enter state 78
	"push_back"    shift, and enter state 4
	identificador  shift, and enter state 5

	INSTR          goto state 75
	CICLO          goto state 76
	SEC_INSTR_CICLOgoto state 77

State 40

	INSTR -> identificador '(' identificador ')' . '=' EM    (rule 4)

	'='            shift, and enter state 74


State 41

	EM -> EM '+' . EM                                   (rule 18)

	'-'            shift, and enter state 22
	int            shift, and enter state 23
	real           shift, and enter state 24
	constmat       shift, and enter state 25
	funcion        shift, and enter state 26
	'('            shift, and enter state 27
	'['            shift, and enter state 15
	"range"        shift, and enter state 16
	"if"           shift, and enter state 29
	identificador  shift, and enter state 30

	EM             goto state 73
	ARREGLO        goto state 20

State 42

	EM -> EM '-' . EM                                   (rule 19)

	'-'            shift, and enter state 22
	int            shift, and enter state 23
	real           shift, and enter state 24
	constmat       shift, and enter state 25
	funcion        shift, and enter state 26
	'('            shift, and enter state 27
	'['            shift, and enter state 15
	"range"        shift, and enter state 16
	"if"           shift, and enter state 29
	identificador  shift, and enter state 30

	EM             goto state 72
	ARREGLO        goto state 20

State 43

	EM -> EM '*' . EM                                   (rule 20)

	'-'            shift, and enter state 22
	int            shift, and enter state 23
	real           shift, and enter state 24
	constmat       shift, and enter state 25
	funcion        shift, and enter state 26
	'('            shift, and enter state 27
	'['            shift, and enter state 15
	"range"        shift, and enter state 16
	"if"           shift, and enter state 29
	identificador  shift, and enter state 30

	EM             goto state 71
	ARREGLO        goto state 20

State 44

	EM -> EM '/' . EM                                   (rule 21)

	'-'            shift, and enter state 22
	int            shift, and enter state 23
	real           shift, and enter state 24
	constmat       shift, and enter state 25
	funcion        shift, and enter state 26
	'('            shift, and enter state 27
	'['            shift, and enter state 15
	"range"        shift, and enter state 16
	"if"           shift, and enter state 29
	identificador  shift, and enter state 30

	EM             goto state 70
	ARREGLO        goto state 20

State 45

	EM -> EM '^' . EM                                   (rule 22)

	'-'            shift, and enter state 22
	int            shift, and enter state 23
	real           shift, and enter state 24
	constmat       shift, and enter state 25
	funcion        shift, and enter state 26
	'('            shift, and enter state 27
	'['            shift, and enter state 15
	"range"        shift, and enter state 16
	"if"           shift, and enter state 29
	identificador  shift, and enter state 30

	EM             goto state 69
	ARREGLO        goto state 20

State 46

	INSTR -> "push_back" '(' identificador ',' . EM ')'    (rule 10)

	'-'            shift, and enter state 22
	int            shift, and enter state 23
	real           shift, and enter state 24
	constmat       shift, and enter state 25
	funcion        shift, and enter state 26
	'('            shift, and enter state 27
	'['            shift, and enter state 15
	"range"        shift, and enter state 16
	"if"           shift, and enter state 29
	identificador  shift, and enter state 30

	EM             goto state 68
	ARREGLO        goto state 20

State 47

	INSTR -> "plot" ARREGLO EG "with" . '[' ']'         (rule 6)
	INSTR -> "plot" ARREGLO EG "with" . '[' SECUENCIA_ESTILO ']'    (rule 7)
	INSTR -> "plot" ARREGLO EG "with" . estilo          (rule 8)

	'['            shift, and enter state 66
	estilo         shift, and enter state 67


State 48

	EM -> identificador '(' . EM ')'                    (rule 29)

	'-'            shift, and enter state 22
	int            shift, and enter state 23
	real           shift, and enter state 24
	constmat       shift, and enter state 25
	funcion        shift, and enter state 26
	'('            shift, and enter state 27
	'['            shift, and enter state 15
	"range"        shift, and enter state 16
	"if"           shift, and enter state 29
	identificador  shift, and enter state 30

	EM             goto state 65
	ARREGLO        goto state 20

State 49

	EM -> "if" '(' . COND ',' EM ',' EM ')'             (rule 32)

	'-'            shift, and enter state 22
	int            shift, and enter state 23
	real           shift, and enter state 24
	constmat       shift, and enter state 25
	funcion        shift, and enter state 26
	'('            shift, and enter state 27
	'['            shift, and enter state 15
	"range"        shift, and enter state 16
	"if"           shift, and enter state 29
	"NOT"          shift, and enter state 64
	identificador  shift, and enter state 30

	EM             goto state 62
	ARREGLO        goto state 20
	COND           goto state 63

State 50

	EM -> EM . '+' EM                                   (rule 18)
	EM -> EM . '-' EM                                   (rule 19)
	EM -> EM . '*' EM                                   (rule 20)
	EM -> EM . '/' EM                                   (rule 21)
	EM -> EM . '^' EM                                   (rule 22)
	EM -> '(' EM . ')'                                  (rule 24)

	'+'            shift, and enter state 41
	'-'            shift, and enter state 42
	'*'            shift, and enter state 43
	'/'            shift, and enter state 44
	'^'            shift, and enter state 45
	')'            shift, and enter state 61


State 51

	EM -> funcion '(' . EM ')'                          (rule 28)

	'-'            shift, and enter state 22
	int            shift, and enter state 23
	real           shift, and enter state 24
	constmat       shift, and enter state 25
	funcion        shift, and enter state 26
	'('            shift, and enter state 27
	'['            shift, and enter state 15
	"range"        shift, and enter state 16
	"if"           shift, and enter state 29
	identificador  shift, and enter state 30

	EM             goto state 60
	ARREGLO        goto state 20

State 52

	EM -> EM . '+' EM                                   (rule 18)
	EM -> EM . '-' EM                                   (rule 19)
	EM -> EM . '*' EM                                   (rule 20)
	EM -> EM . '/' EM                                   (rule 21)
	EM -> EM . '^' EM                                   (rule 22)
	EM -> '-' EM .                                      (rule 23)

	'+'            reduce using rule 23
	'-'            reduce using rule 23
	'*'            shift, and enter state 43
	'/'            shift, and enter state 44
	'^'            shift, and enter state 45
	')'            reduce using rule 23
	']'            reduce using rule 23
	','            reduce using rule 23
	"for"          reduce using rule 23
	"AND"          reduce using rule 23
	"OR"           reduce using rule 23
	'<'            reduce using rule 23
	'>'            reduce using rule 23
	">="           reduce using rule 23
	"<="           reduce using rule 23
	"=="           reduce using rule 23
	';'            reduce using rule 23
	"with"         reduce using rule 23
	"endfor"       reduce using rule 23


State 53

	ARREGLO -> '[' SECUENCIA_EM ']' .                   (rule 34)

	'+'            reduce using rule 34
	'-'            reduce using rule 34
	'*'            reduce using rule 34
	'/'            reduce using rule 34
	'^'            reduce using rule 34
	int            reduce using rule 34
	real           reduce using rule 34
	constmat       reduce using rule 34
	funcion        reduce using rule 34
	'('            reduce using rule 34
	')'            reduce using rule 34
	'['            reduce using rule 34
	']'            reduce using rule 34
	','            reduce using rule 34
	"range"        reduce using rule 34
	"for"          reduce using rule 34
	"if"           reduce using rule 34
	"AND"          reduce using rule 34
	"OR"           reduce using rule 34
	'<'            reduce using rule 34
	'>'            reduce using rule 34
	">="           reduce using rule 34
	"<="           reduce using rule 34
	"=="           reduce using rule 34
	';'            reduce using rule 34
	"with"         reduce using rule 34
	"plot"         reduce using rule 34
	"endfor"       reduce using rule 34
	"step"         reduce using rule 34
	"push_back"    reduce using rule 34
	identificador  reduce using rule 34
	archivo        reduce using rule 34


State 54

	SECUENCIA_EM -> SECUENCIA_EM ',' . EM               (rule 38)

	'-'            shift, and enter state 22
	int            shift, and enter state 23
	real           shift, and enter state 24
	constmat       shift, and enter state 25
	funcion        shift, and enter state 26
	'('            shift, and enter state 27
	'['            shift, and enter state 15
	"range"        shift, and enter state 16
	"if"           shift, and enter state 29
	identificador  shift, and enter state 30

	EM             goto state 59
	ARREGLO        goto state 20

State 55

	ARREGLO -> '[' EM "for" . identificador "in" ARREGLO ']'    (rule 36)

	identificador  shift, and enter state 58


State 56

	ARREGLO -> "range" '(' int . ',' int ')'            (rule 35)

	','            shift, and enter state 57


State 57

	ARREGLO -> "range" '(' int ',' . int ')'            (rule 35)

	int            shift, and enter state 99


State 58

	ARREGLO -> '[' EM "for" identificador . "in" ARREGLO ']'    (rule 36)

	"in"           shift, and enter state 98


State 59

	EM -> EM . '+' EM                                   (rule 18)
	EM -> EM . '-' EM                                   (rule 19)
	EM -> EM . '*' EM                                   (rule 20)
	EM -> EM . '/' EM                                   (rule 21)
	EM -> EM . '^' EM                                   (rule 22)
	SECUENCIA_EM -> SECUENCIA_EM ',' EM .               (rule 38)

	'+'            shift, and enter state 41
	'-'            shift, and enter state 42
	'*'            shift, and enter state 43
	'/'            shift, and enter state 44
	'^'            shift, and enter state 45
	']'            reduce using rule 38
	','            reduce using rule 38


State 60

	EM -> EM . '+' EM                                   (rule 18)
	EM -> EM . '-' EM                                   (rule 19)
	EM -> EM . '*' EM                                   (rule 20)
	EM -> EM . '/' EM                                   (rule 21)
	EM -> EM . '^' EM                                   (rule 22)
	EM -> funcion '(' EM . ')'                          (rule 28)

	'+'            shift, and enter state 41
	'-'            shift, and enter state 42
	'*'            shift, and enter state 43
	'/'            shift, and enter state 44
	'^'            shift, and enter state 45
	')'            shift, and enter state 97


State 61

	EM -> '(' EM ')' .                                  (rule 24)

	'+'            reduce using rule 24
	'-'            reduce using rule 24
	'*'            reduce using rule 24
	'/'            reduce using rule 24
	'^'            reduce using rule 24
	')'            reduce using rule 24
	']'            reduce using rule 24
	','            reduce using rule 24
	"for"          reduce using rule 24
	"AND"          reduce using rule 24
	"OR"           reduce using rule 24
	'<'            reduce using rule 24
	'>'            reduce using rule 24
	">="           reduce using rule 24
	"<="           reduce using rule 24
	"=="           reduce using rule 24
	';'            reduce using rule 24
	"with"         reduce using rule 24
	"endfor"       reduce using rule 24


State 62

	EM -> EM . '+' EM                                   (rule 18)
	EM -> EM . '-' EM                                   (rule 19)
	EM -> EM . '*' EM                                   (rule 20)
	EM -> EM . '/' EM                                   (rule 21)
	EM -> EM . '^' EM                                   (rule 22)
	COND -> EM .                                        (rule 39)

	'+'            shift, and enter state 41
	'-'            shift, and enter state 42
	'*'            shift, and enter state 43
	'/'            shift, and enter state 44
	'^'            shift, and enter state 45
	','            reduce using rule 39
	"AND"          reduce using rule 39
	"OR"           reduce using rule 39
	'<'            reduce using rule 39
	'>'            reduce using rule 39
	">="           reduce using rule 39
	"<="           reduce using rule 39
	"=="           reduce using rule 39


State 63

	EM -> "if" '(' COND . ',' EM ',' EM ')'             (rule 32)
	COND -> COND . "AND" COND                           (rule 40)
	COND -> COND . "OR" COND                            (rule 41)
	COND -> COND . '>' COND                             (rule 43)
	COND -> COND . '<' COND                             (rule 44)
	COND -> COND . "<=" COND                            (rule 45)
	COND -> COND . ">=" COND                            (rule 46)
	COND -> COND . "==" COND                            (rule 47)

	','            shift, and enter state 89
	"AND"          shift, and enter state 90
	"OR"           shift, and enter state 91
	'<'            shift, and enter state 92
	'>'            shift, and enter state 93
	">="           shift, and enter state 94
	"<="           shift, and enter state 95
	"=="           shift, and enter state 96


State 64

	COND -> "NOT" . COND                                (rule 42)

	'-'            shift, and enter state 22
	int            shift, and enter state 23
	real           shift, and enter state 24
	constmat       shift, and enter state 25
	funcion        shift, and enter state 26
	'('            shift, and enter state 27
	'['            shift, and enter state 15
	"range"        shift, and enter state 16
	"if"           shift, and enter state 29
	"NOT"          shift, and enter state 64
	identificador  shift, and enter state 30

	EM             goto state 62
	ARREGLO        goto state 20
	COND           goto state 88

State 65

	EM -> EM . '+' EM                                   (rule 18)
	EM -> EM . '-' EM                                   (rule 19)
	EM -> EM . '*' EM                                   (rule 20)
	EM -> EM . '/' EM                                   (rule 21)
	EM -> EM . '^' EM                                   (rule 22)
	EM -> identificador '(' EM . ')'                    (rule 29)

	'+'            shift, and enter state 41
	'-'            shift, and enter state 42
	'*'            shift, and enter state 43
	'/'            shift, and enter state 44
	'^'            shift, and enter state 45
	')'            shift, and enter state 87


State 66

	INSTR -> "plot" ARREGLO EG "with" '[' . ']'         (rule 6)
	INSTR -> "plot" ARREGLO EG "with" '[' . SECUENCIA_ESTILO ']'    (rule 7)

	']'            shift, and enter state 85
	estilo         shift, and enter state 86

	SECUENCIA_ESTILOgoto state 84

State 67

	INSTR -> "plot" ARREGLO EG "with" estilo .          (rule 8)

	';'            reduce using rule 8
	"endfor"       reduce using rule 8


State 68

	INSTR -> "push_back" '(' identificador ',' EM . ')'    (rule 10)
	EM -> EM . '+' EM                                   (rule 18)
	EM -> EM . '-' EM                                   (rule 19)
	EM -> EM . '*' EM                                   (rule 20)
	EM -> EM . '/' EM                                   (rule 21)
	EM -> EM . '^' EM                                   (rule 22)

	'+'            shift, and enter state 41
	'-'            shift, and enter state 42
	'*'            shift, and enter state 43
	'/'            shift, and enter state 44
	'^'            shift, and enter state 45
	')'            shift, and enter state 83


State 69

	EM -> EM . '+' EM                                   (rule 18)
	EM -> EM . '-' EM                                   (rule 19)
	EM -> EM . '*' EM                                   (rule 20)
	EM -> EM . '/' EM                                   (rule 21)
	EM -> EM . '^' EM                                   (rule 22)
	EM -> EM '^' EM .                                   (rule 22)

	'+'            reduce using rule 22
	'-'            reduce using rule 22
	'*'            reduce using rule 22
	'/'            reduce using rule 22
	'^'            shift, and enter state 45
	')'            reduce using rule 22
	']'            reduce using rule 22
	','            reduce using rule 22
	"for"          reduce using rule 22
	"AND"          reduce using rule 22
	"OR"           reduce using rule 22
	'<'            reduce using rule 22
	'>'            reduce using rule 22
	">="           reduce using rule 22
	"<="           reduce using rule 22
	"=="           reduce using rule 22
	';'            reduce using rule 22
	"with"         reduce using rule 22
	"endfor"       reduce using rule 22


State 70

	EM -> EM . '+' EM                                   (rule 18)
	EM -> EM . '-' EM                                   (rule 19)
	EM -> EM . '*' EM                                   (rule 20)
	EM -> EM . '/' EM                                   (rule 21)
	EM -> EM '/' EM .                                   (rule 21)
	EM -> EM . '^' EM                                   (rule 22)

	'+'            reduce using rule 21
	'-'            reduce using rule 21
	'*'            reduce using rule 21
	'/'            reduce using rule 21
	'^'            shift, and enter state 45
	')'            reduce using rule 21
	']'            reduce using rule 21
	','            reduce using rule 21
	"for"          reduce using rule 21
	"AND"          reduce using rule 21
	"OR"           reduce using rule 21
	'<'            reduce using rule 21
	'>'            reduce using rule 21
	">="           reduce using rule 21
	"<="           reduce using rule 21
	"=="           reduce using rule 21
	';'            reduce using rule 21
	"with"         reduce using rule 21
	"endfor"       reduce using rule 21


State 71

	EM -> EM . '+' EM                                   (rule 18)
	EM -> EM . '-' EM                                   (rule 19)
	EM -> EM . '*' EM                                   (rule 20)
	EM -> EM '*' EM .                                   (rule 20)
	EM -> EM . '/' EM                                   (rule 21)
	EM -> EM . '^' EM                                   (rule 22)

	'+'            reduce using rule 20
	'-'            reduce using rule 20
	'*'            reduce using rule 20
	'/'            reduce using rule 20
	'^'            shift, and enter state 45
	')'            reduce using rule 20
	']'            reduce using rule 20
	','            reduce using rule 20
	"for"          reduce using rule 20
	"AND"          reduce using rule 20
	"OR"           reduce using rule 20
	'<'            reduce using rule 20
	'>'            reduce using rule 20
	">="           reduce using rule 20
	"<="           reduce using rule 20
	"=="           reduce using rule 20
	';'            reduce using rule 20
	"with"         reduce using rule 20
	"endfor"       reduce using rule 20


State 72

	EM -> EM . '+' EM                                   (rule 18)
	EM -> EM . '-' EM                                   (rule 19)
	EM -> EM '-' EM .                                   (rule 19)
	EM -> EM . '*' EM                                   (rule 20)
	EM -> EM . '/' EM                                   (rule 21)
	EM -> EM . '^' EM                                   (rule 22)

	'+'            reduce using rule 19
	'-'            reduce using rule 19
	'*'            shift, and enter state 43
	'/'            shift, and enter state 44
	'^'            shift, and enter state 45
	')'            reduce using rule 19
	']'            reduce using rule 19
	','            reduce using rule 19
	"for"          reduce using rule 19
	"AND"          reduce using rule 19
	"OR"           reduce using rule 19
	'<'            reduce using rule 19
	'>'            reduce using rule 19
	">="           reduce using rule 19
	"<="           reduce using rule 19
	"=="           reduce using rule 19
	';'            reduce using rule 19
	"with"         reduce using rule 19
	"endfor"       reduce using rule 19


State 73

	EM -> EM . '+' EM                                   (rule 18)
	EM -> EM '+' EM .                                   (rule 18)
	EM -> EM . '-' EM                                   (rule 19)
	EM -> EM . '*' EM                                   (rule 20)
	EM -> EM . '/' EM                                   (rule 21)
	EM -> EM . '^' EM                                   (rule 22)

	'+'            reduce using rule 18
	'-'            reduce using rule 18
	'*'            shift, and enter state 43
	'/'            shift, and enter state 44
	'^'            shift, and enter state 45
	')'            reduce using rule 18
	']'            reduce using rule 18
	','            reduce using rule 18
	"for"          reduce using rule 18
	"AND"          reduce using rule 18
	"OR"           reduce using rule 18
	'<'            reduce using rule 18
	'>'            reduce using rule 18
	">="           reduce using rule 18
	"<="           reduce using rule 18
	"=="           reduce using rule 18
	';'            reduce using rule 18
	"with"         reduce using rule 18
	"endfor"       reduce using rule 18


State 74

	INSTR -> identificador '(' identificador ')' '=' . EM    (rule 4)

	'-'            shift, and enter state 22
	int            shift, and enter state 23
	real           shift, and enter state 24
	constmat       shift, and enter state 25
	funcion        shift, and enter state 26
	'('            shift, and enter state 27
	'['            shift, and enter state 15
	"range"        shift, and enter state 16
	"if"           shift, and enter state 29
	identificador  shift, and enter state 30

	EM             goto state 82
	ARREGLO        goto state 20

State 75

	SEC_INSTR_CICLO -> INSTR .                          (rule 13)

	';'            reduce using rule 13
	"endfor"       reduce using rule 13


State 76

	SEC_INSTR_CICLO -> CICLO .                          (rule 14)

	';'            reduce using rule 14
	"endfor"       reduce using rule 14


State 77

	CICLO -> "for" identificador "in" ARREGLO SEC_INSTR_CICLO . "endfor"    (rule 11)
	SEC_INSTR_CICLO -> SEC_INSTR_CICLO . ';' INSTR      (rule 15)

	';'            shift, and enter state 80
	"endfor"       shift, and enter state 81


State 78

	CICLO -> "for" identificador "in" ARREGLO "step" . int SEC_INSTR_CICLO "endfor"    (rule 12)

	int            shift, and enter state 79


State 79

	CICLO -> "for" identificador "in" ARREGLO "step" int . SEC_INSTR_CICLO "endfor"    (rule 12)

	"for"          shift, and enter state 8
	"plot"         shift, and enter state 3
	"push_back"    shift, and enter state 4
	identificador  shift, and enter state 5

	INSTR          goto state 75
	CICLO          goto state 76
	SEC_INSTR_CICLOgoto state 113

State 80

	SEC_INSTR_CICLO -> SEC_INSTR_CICLO ';' . INSTR      (rule 15)

	"plot"         shift, and enter state 3
	"push_back"    shift, and enter state 4
	identificador  shift, and enter state 5

	INSTR          goto state 112

State 81

	CICLO -> "for" identificador "in" ARREGLO SEC_INSTR_CICLO "endfor" .    (rule 11)

	';'            reduce using rule 11
	"plot"         reduce using rule 11
	"endfor"       reduce using rule 11
	"push_back"    reduce using rule 11
	identificador  reduce using rule 11
	%eof           reduce using rule 11


State 82

	INSTR -> identificador '(' identificador ')' '=' EM .    (rule 4)
	EM -> EM . '+' EM                                   (rule 18)
	EM -> EM . '-' EM                                   (rule 19)
	EM -> EM . '*' EM                                   (rule 20)
	EM -> EM . '/' EM                                   (rule 21)
	EM -> EM . '^' EM                                   (rule 22)

	'+'            shift, and enter state 41
	'-'            shift, and enter state 42
	'*'            shift, and enter state 43
	'/'            shift, and enter state 44
	'^'            shift, and enter state 45
	';'            reduce using rule 4
	"endfor"       reduce using rule 4


State 83

	INSTR -> "push_back" '(' identificador ',' EM ')' .    (rule 10)

	';'            reduce using rule 10
	"endfor"       reduce using rule 10


State 84

	INSTR -> "plot" ARREGLO EG "with" '[' SECUENCIA_ESTILO . ']'    (rule 7)
	SECUENCIA_ESTILO -> SECUENCIA_ESTILO . ',' estilo    (rule 16)

	']'            shift, and enter state 110
	','            shift, and enter state 111


State 85

	INSTR -> "plot" ARREGLO EG "with" '[' ']' .         (rule 6)

	';'            reduce using rule 6
	"endfor"       reduce using rule 6


State 86

	SECUENCIA_ESTILO -> estilo .                        (rule 17)

	']'            reduce using rule 17
	','            reduce using rule 17


State 87

	EM -> identificador '(' EM ')' .                    (rule 29)

	'+'            reduce using rule 29
	'-'            reduce using rule 29
	'*'            reduce using rule 29
	'/'            reduce using rule 29
	'^'            reduce using rule 29
	')'            reduce using rule 29
	']'            reduce using rule 29
	','            reduce using rule 29
	"for"          reduce using rule 29
	"AND"          reduce using rule 29
	"OR"           reduce using rule 29
	'<'            reduce using rule 29
	'>'            reduce using rule 29
	">="           reduce using rule 29
	"<="           reduce using rule 29
	"=="           reduce using rule 29
	';'            reduce using rule 29
	"with"         reduce using rule 29
	"endfor"       reduce using rule 29


State 88

	COND -> COND . "AND" COND                           (rule 40)
	COND -> COND . "OR" COND                            (rule 41)
	COND -> "NOT" COND .                                (rule 42)
	COND -> COND . '>' COND                             (rule 43)
	COND -> COND . '<' COND                             (rule 44)
	COND -> COND . "<=" COND                            (rule 45)
	COND -> COND . ">=" COND                            (rule 46)
	COND -> COND . "==" COND                            (rule 47)

	','            reduce using rule 42
	"AND"          reduce using rule 42
	"OR"           reduce using rule 42
	'<'            shift, and enter state 92
	'>'            shift, and enter state 93
	">="           shift, and enter state 94
	"<="           shift, and enter state 95
	"=="           shift, and enter state 96


State 89

	EM -> "if" '(' COND ',' . EM ',' EM ')'             (rule 32)

	'-'            shift, and enter state 22
	int            shift, and enter state 23
	real           shift, and enter state 24
	constmat       shift, and enter state 25
	funcion        shift, and enter state 26
	'('            shift, and enter state 27
	'['            shift, and enter state 15
	"range"        shift, and enter state 16
	"if"           shift, and enter state 29
	identificador  shift, and enter state 30

	EM             goto state 109
	ARREGLO        goto state 20

State 90

	COND -> COND "AND" . COND                           (rule 40)

	'-'            shift, and enter state 22
	int            shift, and enter state 23
	real           shift, and enter state 24
	constmat       shift, and enter state 25
	funcion        shift, and enter state 26
	'('            shift, and enter state 27
	'['            shift, and enter state 15
	"range"        shift, and enter state 16
	"if"           shift, and enter state 29
	"NOT"          shift, and enter state 64
	identificador  shift, and enter state 30

	EM             goto state 62
	ARREGLO        goto state 20
	COND           goto state 108

State 91

	COND -> COND "OR" . COND                            (rule 41)

	'-'            shift, and enter state 22
	int            shift, and enter state 23
	real           shift, and enter state 24
	constmat       shift, and enter state 25
	funcion        shift, and enter state 26
	'('            shift, and enter state 27
	'['            shift, and enter state 15
	"range"        shift, and enter state 16
	"if"           shift, and enter state 29
	"NOT"          shift, and enter state 64
	identificador  shift, and enter state 30

	EM             goto state 62
	ARREGLO        goto state 20
	COND           goto state 107

State 92

	COND -> COND '<' . COND                             (rule 44)

	'-'            shift, and enter state 22
	int            shift, and enter state 23
	real           shift, and enter state 24
	constmat       shift, and enter state 25
	funcion        shift, and enter state 26
	'('            shift, and enter state 27
	'['            shift, and enter state 15
	"range"        shift, and enter state 16
	"if"           shift, and enter state 29
	"NOT"          shift, and enter state 64
	identificador  shift, and enter state 30

	EM             goto state 62
	ARREGLO        goto state 20
	COND           goto state 106

State 93

	COND -> COND '>' . COND                             (rule 43)

	'-'            shift, and enter state 22
	int            shift, and enter state 23
	real           shift, and enter state 24
	constmat       shift, and enter state 25
	funcion        shift, and enter state 26
	'('            shift, and enter state 27
	'['            shift, and enter state 15
	"range"        shift, and enter state 16
	"if"           shift, and enter state 29
	"NOT"          shift, and enter state 64
	identificador  shift, and enter state 30

	EM             goto state 62
	ARREGLO        goto state 20
	COND           goto state 105

State 94

	COND -> COND ">=" . COND                            (rule 46)

	'-'            shift, and enter state 22
	int            shift, and enter state 23
	real           shift, and enter state 24
	constmat       shift, and enter state 25
	funcion        shift, and enter state 26
	'('            shift, and enter state 27
	'['            shift, and enter state 15
	"range"        shift, and enter state 16
	"if"           shift, and enter state 29
	"NOT"          shift, and enter state 64
	identificador  shift, and enter state 30

	EM             goto state 62
	ARREGLO        goto state 20
	COND           goto state 104

State 95

	COND -> COND "<=" . COND                            (rule 45)

	'-'            shift, and enter state 22
	int            shift, and enter state 23
	real           shift, and enter state 24
	constmat       shift, and enter state 25
	funcion        shift, and enter state 26
	'('            shift, and enter state 27
	'['            shift, and enter state 15
	"range"        shift, and enter state 16
	"if"           shift, and enter state 29
	"NOT"          shift, and enter state 64
	identificador  shift, and enter state 30

	EM             goto state 62
	ARREGLO        goto state 20
	COND           goto state 103

State 96

	COND -> COND "==" . COND                            (rule 47)

	'-'            shift, and enter state 22
	int            shift, and enter state 23
	real           shift, and enter state 24
	constmat       shift, and enter state 25
	funcion        shift, and enter state 26
	'('            shift, and enter state 27
	'['            shift, and enter state 15
	"range"        shift, and enter state 16
	"if"           shift, and enter state 29
	"NOT"          shift, and enter state 64
	identificador  shift, and enter state 30

	EM             goto state 62
	ARREGLO        goto state 20
	COND           goto state 102

State 97

	EM -> funcion '(' EM ')' .                          (rule 28)

	'+'            reduce using rule 28
	'-'            reduce using rule 28
	'*'            reduce using rule 28
	'/'            reduce using rule 28
	'^'            reduce using rule 28
	')'            reduce using rule 28
	']'            reduce using rule 28
	','            reduce using rule 28
	"for"          reduce using rule 28
	"AND"          reduce using rule 28
	"OR"           reduce using rule 28
	'<'            reduce using rule 28
	'>'            reduce using rule 28
	">="           reduce using rule 28
	"<="           reduce using rule 28
	"=="           reduce using rule 28
	';'            reduce using rule 28
	"with"         reduce using rule 28
	"endfor"       reduce using rule 28


State 98

	ARREGLO -> '[' EM "for" identificador "in" . ARREGLO ']'    (rule 36)

	'['            shift, and enter state 15
	"range"        shift, and enter state 16

	ARREGLO        goto state 101

State 99

	ARREGLO -> "range" '(' int ',' int . ')'            (rule 35)

	')'            shift, and enter state 100


State 100

	ARREGLO -> "range" '(' int ',' int ')' .            (rule 35)

	'+'            reduce using rule 35
	'-'            reduce using rule 35
	'*'            reduce using rule 35
	'/'            reduce using rule 35
	'^'            reduce using rule 35
	int            reduce using rule 35
	real           reduce using rule 35
	constmat       reduce using rule 35
	funcion        reduce using rule 35
	'('            reduce using rule 35
	')'            reduce using rule 35
	'['            reduce using rule 35
	']'            reduce using rule 35
	','            reduce using rule 35
	"range"        reduce using rule 35
	"for"          reduce using rule 35
	"if"           reduce using rule 35
	"AND"          reduce using rule 35
	"OR"           reduce using rule 35
	'<'            reduce using rule 35
	'>'            reduce using rule 35
	">="           reduce using rule 35
	"<="           reduce using rule 35
	"=="           reduce using rule 35
	';'            reduce using rule 35
	"with"         reduce using rule 35
	"plot"         reduce using rule 35
	"endfor"       reduce using rule 35
	"step"         reduce using rule 35
	"push_back"    reduce using rule 35
	identificador  reduce using rule 35
	archivo        reduce using rule 35


State 101

	ARREGLO -> '[' EM "for" identificador "in" ARREGLO . ']'    (rule 36)

	']'            shift, and enter state 117


State 102

	COND -> COND . "AND" COND                           (rule 40)
	COND -> COND . "OR" COND                            (rule 41)
	COND -> COND . '>' COND                             (rule 43)
	COND -> COND . '<' COND                             (rule 44)
	COND -> COND . "<=" COND                            (rule 45)
	COND -> COND . ">=" COND                            (rule 46)
	COND -> COND . "==" COND                            (rule 47)
	COND -> COND "==" COND .                            (rule 47)

	','            reduce using rule 47
	"AND"          reduce using rule 47
	"OR"           reduce using rule 47
	'<'            shift, and enter state 92
	'>'            shift, and enter state 93
	">="           shift, and enter state 94
	"<="           shift, and enter state 95
	"=="           reduce using rule 47


State 103

	COND -> COND . "AND" COND                           (rule 40)
	COND -> COND . "OR" COND                            (rule 41)
	COND -> COND . '>' COND                             (rule 43)
	COND -> COND . '<' COND                             (rule 44)
	COND -> COND . "<=" COND                            (rule 45)
	COND -> COND "<=" COND .                            (rule 45)
	COND -> COND . ">=" COND                            (rule 46)
	COND -> COND . "==" COND                            (rule 47)

	','            reduce using rule 45
	"AND"          reduce using rule 45
	"OR"           reduce using rule 45
	'<'            fail
	'>'            fail
	">="           fail
	"<="           fail
	"=="           reduce using rule 45


State 104

	COND -> COND . "AND" COND                           (rule 40)
	COND -> COND . "OR" COND                            (rule 41)
	COND -> COND . '>' COND                             (rule 43)
	COND -> COND . '<' COND                             (rule 44)
	COND -> COND . "<=" COND                            (rule 45)
	COND -> COND . ">=" COND                            (rule 46)
	COND -> COND ">=" COND .                            (rule 46)
	COND -> COND . "==" COND                            (rule 47)

	','            reduce using rule 46
	"AND"          reduce using rule 46
	"OR"           reduce using rule 46
	'<'            fail
	'>'            fail
	">="           fail
	"<="           fail
	"=="           reduce using rule 46


State 105

	COND -> COND . "AND" COND                           (rule 40)
	COND -> COND . "OR" COND                            (rule 41)
	COND -> COND . '>' COND                             (rule 43)
	COND -> COND '>' COND .                             (rule 43)
	COND -> COND . '<' COND                             (rule 44)
	COND -> COND . "<=" COND                            (rule 45)
	COND -> COND . ">=" COND                            (rule 46)
	COND -> COND . "==" COND                            (rule 47)

	','            reduce using rule 43
	"AND"          reduce using rule 43
	"OR"           reduce using rule 43
	'<'            fail
	'>'            fail
	">="           fail
	"<="           fail
	"=="           reduce using rule 43


State 106

	COND -> COND . "AND" COND                           (rule 40)
	COND -> COND . "OR" COND                            (rule 41)
	COND -> COND . '>' COND                             (rule 43)
	COND -> COND . '<' COND                             (rule 44)
	COND -> COND '<' COND .                             (rule 44)
	COND -> COND . "<=" COND                            (rule 45)
	COND -> COND . ">=" COND                            (rule 46)
	COND -> COND . "==" COND                            (rule 47)

	','            reduce using rule 44
	"AND"          reduce using rule 44
	"OR"           reduce using rule 44
	'<'            fail
	'>'            fail
	">="           fail
	"<="           fail
	"=="           reduce using rule 44


State 107

	COND -> COND . "AND" COND                           (rule 40)
	COND -> COND . "OR" COND                            (rule 41)
	COND -> COND "OR" COND .                            (rule 41)
	COND -> COND . '>' COND                             (rule 43)
	COND -> COND . '<' COND                             (rule 44)
	COND -> COND . "<=" COND                            (rule 45)
	COND -> COND . ">=" COND                            (rule 46)
	COND -> COND . "==" COND                            (rule 47)

	','            reduce using rule 41
	"AND"          reduce using rule 41
	"OR"           reduce using rule 41
	'<'            shift, and enter state 92
	'>'            shift, and enter state 93
	">="           shift, and enter state 94
	"<="           shift, and enter state 95
	"=="           shift, and enter state 96


State 108

	COND -> COND . "AND" COND                           (rule 40)
	COND -> COND "AND" COND .                           (rule 40)
	COND -> COND . "OR" COND                            (rule 41)
	COND -> COND . '>' COND                             (rule 43)
	COND -> COND . '<' COND                             (rule 44)
	COND -> COND . "<=" COND                            (rule 45)
	COND -> COND . ">=" COND                            (rule 46)
	COND -> COND . "==" COND                            (rule 47)

	','            reduce using rule 40
	"AND"          reduce using rule 40
	"OR"           reduce using rule 40
	'<'            shift, and enter state 92
	'>'            shift, and enter state 93
	">="           shift, and enter state 94
	"<="           shift, and enter state 95
	"=="           shift, and enter state 96


State 109

	EM -> EM . '+' EM                                   (rule 18)
	EM -> EM . '-' EM                                   (rule 19)
	EM -> EM . '*' EM                                   (rule 20)
	EM -> EM . '/' EM                                   (rule 21)
	EM -> EM . '^' EM                                   (rule 22)
	EM -> "if" '(' COND ',' EM . ',' EM ')'             (rule 32)

	'+'            shift, and enter state 41
	'-'            shift, and enter state 42
	'*'            shift, and enter state 43
	'/'            shift, and enter state 44
	'^'            shift, and enter state 45
	','            shift, and enter state 116


State 110

	INSTR -> "plot" ARREGLO EG "with" '[' SECUENCIA_ESTILO ']' .    (rule 7)

	';'            reduce using rule 7
	"endfor"       reduce using rule 7


State 111

	SECUENCIA_ESTILO -> SECUENCIA_ESTILO ',' . estilo    (rule 16)

	estilo         shift, and enter state 115


State 112

	SEC_INSTR_CICLO -> SEC_INSTR_CICLO ';' INSTR .      (rule 15)

	';'            reduce using rule 15
	"endfor"       reduce using rule 15


State 113

	CICLO -> "for" identificador "in" ARREGLO "step" int SEC_INSTR_CICLO . "endfor"    (rule 12)
	SEC_INSTR_CICLO -> SEC_INSTR_CICLO . ';' INSTR      (rule 15)

	';'            shift, and enter state 80
	"endfor"       shift, and enter state 114


State 114

	CICLO -> "for" identificador "in" ARREGLO "step" int SEC_INSTR_CICLO "endfor" .    (rule 12)

	';'            reduce using rule 12
	"plot"         reduce using rule 12
	"endfor"       reduce using rule 12
	"push_back"    reduce using rule 12
	identificador  reduce using rule 12
	%eof           reduce using rule 12


State 115

	SECUENCIA_ESTILO -> SECUENCIA_ESTILO ',' estilo .    (rule 16)

	']'            reduce using rule 16
	','            reduce using rule 16


State 116

	EM -> "if" '(' COND ',' EM ',' . EM ')'             (rule 32)

	'-'            shift, and enter state 22
	int            shift, and enter state 23
	real           shift, and enter state 24
	constmat       shift, and enter state 25
	funcion        shift, and enter state 26
	'('            shift, and enter state 27
	'['            shift, and enter state 15
	"range"        shift, and enter state 16
	"if"           shift, and enter state 29
	identificador  shift, and enter state 30

	EM             goto state 118
	ARREGLO        goto state 20

State 117

	ARREGLO -> '[' EM "for" identificador "in" ARREGLO ']' .    (rule 36)

	'+'            reduce using rule 36
	'-'            reduce using rule 36
	'*'            reduce using rule 36
	'/'            reduce using rule 36
	'^'            reduce using rule 36
	int            reduce using rule 36
	real           reduce using rule 36
	constmat       reduce using rule 36
	funcion        reduce using rule 36
	'('            reduce using rule 36
	')'            reduce using rule 36
	'['            reduce using rule 36
	']'            reduce using rule 36
	','            reduce using rule 36
	"range"        reduce using rule 36
	"for"          reduce using rule 36
	"if"           reduce using rule 36
	"AND"          reduce using rule 36
	"OR"           reduce using rule 36
	'<'            reduce using rule 36
	'>'            reduce using rule 36
	">="           reduce using rule 36
	"<="           reduce using rule 36
	"=="           reduce using rule 36
	';'            reduce using rule 36
	"with"         reduce using rule 36
	"plot"         reduce using rule 36
	"endfor"       reduce using rule 36
	"step"         reduce using rule 36
	"push_back"    reduce using rule 36
	identificador  reduce using rule 36
	archivo        reduce using rule 36


State 118

	EM -> EM . '+' EM                                   (rule 18)
	EM -> EM . '-' EM                                   (rule 19)
	EM -> EM . '*' EM                                   (rule 20)
	EM -> EM . '/' EM                                   (rule 21)
	EM -> EM . '^' EM                                   (rule 22)
	EM -> "if" '(' COND ',' EM ',' EM . ')'             (rule 32)

	'+'            shift, and enter state 41
	'-'            shift, and enter state 42
	'*'            shift, and enter state 43
	'/'            shift, and enter state 44
	'^'            shift, and enter state 45
	')'            shift, and enter state 119


State 119

	EM -> "if" '(' COND ',' EM ',' EM ')' .             (rule 32)

	'+'            reduce using rule 32
	'-'            reduce using rule 32
	'*'            reduce using rule 32
	'/'            reduce using rule 32
	'^'            reduce using rule 32
	')'            reduce using rule 32
	']'            reduce using rule 32
	','            reduce using rule 32
	"for"          reduce using rule 32
	"AND"          reduce using rule 32
	"OR"           reduce using rule 32
	'<'            reduce using rule 32
	'>'            reduce using rule 32
	">="           reduce using rule 32
	"<="           reduce using rule 32
	"=="           reduce using rule 32
	';'            reduce using rule 32
	"with"         reduce using rule 32
	"endfor"       reduce using rule 32


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 50
Number of terminals: 36
Number of non-terminals: 11
Number of states: 120
