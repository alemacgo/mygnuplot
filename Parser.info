-----------------------------------------------------------------------------
Info file generated by Happy Version 1.17 from Parser.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> SECUENCIA_1                        (0)
	SECUENCIA_1 -> INSTR                               (1)
	SECUENCIA_1 -> CICLO                               (2)
	SECUENCIA_1 -> SECUENCIA_2 INSTR                   (3)
	SECUENCIA_1 -> SECUENCIA_2 CICLO                   (4)
	SECUENCIA_2 -> INSTR ';'                           (5)
	SECUENCIA_2 -> CICLO                               (6)
	SECUENCIA_2 -> SECUENCIA_2 INSTR ';'               (7)
	SECUENCIA_2 -> SECUENCIA_2 CICLO                   (8)
	INSTR -> identificador '(' identificador ')' '=' EM   (9)
	INSTR -> identificador '=' EM                      (10)
	INSTR -> "plot" EM ',' EG "with" '[' ']'           (11)
	INSTR -> "plot" EM ',' EG "with" '[' SECUENCIA_ESTILO ']'   (12)
	INSTR -> "plot" EM ',' EG "with" estilo            (13)
	INSTR -> "plot" EM ',' EG                          (14)
	INSTR -> "push_back" '(' identificador ',' EM ')'   (15)
	CICLO -> "for" identificador "in" EM SECUENCIA_1 "endfor"   (16)
	CICLO -> "for" identificador "in" EM "step" EM SECUENCIA_1 "endfor"   (17)
	EM -> EM '+' EM                                    (18)
	EM -> EM '-' EM                                    (19)
	EM -> EM '*' EM                                    (20)
	EM -> EM '/' EM                                    (21)
	EM -> EM '^' EM                                    (22)
	EM -> '-' EM                                       (23)
	EM -> '(' EM ')'                                   (24)
	EM -> int                                          (25)
	EM -> real                                         (26)
	EM -> constmat                                     (27)
	EM -> funcion '(' EM ')'                           (28)
	EM -> identificador '(' EM ')'                     (29)
	EM -> identificador                                (30)
	EM -> '[' ']'                                      (31)
	EM -> '[' SECUENCIA_EM ']'                         (32)
	EM -> "range" '(' EM ',' EM ')'                    (33)
	EM -> '[' EM "for" identificador "in" EM ']'       (34)
	EM -> "if" '(' COND ',' EM ',' EM ')'              (35)
	SECUENCIA_EM -> EM                                 (36)
	SECUENCIA_EM -> SECUENCIA_EM ',' EM                (37)
	SECUENCIA_COND -> COND                             (38)
	SECUENCIA_COND -> SECUENCIA_COND ',' COND          (39)
	SECUENCIA_ESTILO -> estilo                         (40)
	SECUENCIA_ESTILO -> SECUENCIA_ESTILO ',' estilo    (41)
	COND -> COND '+' COND                              (42)
	COND -> COND '-' COND                              (43)
	COND -> COND '*' COND                              (44)
	COND -> COND '/' COND                              (45)
	COND -> COND '^' COND                              (46)
	COND -> '-' COND                                   (47)
	COND -> '(' COND ')'                               (48)
	COND -> int                                        (49)
	COND -> real                                       (50)
	COND -> constmat                                   (51)
	COND -> funcion '(' COND ')'                       (52)
	COND -> identificador '(' COND ')'                 (53)
	COND -> identificador                              (54)
	COND -> '[' ']'                                    (55)
	COND -> '[' SECUENCIA_COND ']'                     (56)
	COND -> "range" '(' COND ',' COND ')'              (57)
	COND -> '[' COND "for" identificador "in" COND ']'   (58)
	COND -> "if" '(' COND ',' COND ',' COND ')'        (59)
	COND -> COND "AND" COND                            (60)
	COND -> COND "OR" COND                             (61)
	COND -> "NOT" COND                                 (62)
	COND -> COND '>' COND                              (63)
	COND -> COND '<' COND                              (64)
	COND -> COND "<=" COND                             (65)
	COND -> COND ">=" COND                             (66)
	COND -> COND "==" COND                             (67)
	EG -> EM                                           (68)
	EG -> archivo                                      (69)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'+'            { ParserStatus TkMas _ _ }
	'-'            { ParserStatus TkMenos _ _ }
	'*'            { ParserStatus TkPor _ _ }
	'/'            { ParserStatus TkEntre  _ _ }
	'^'            { ParserStatus TkElevado _ _ }
	int            { ParserStatus (TkEntero $$) _ _ }
	real           { ParserStatus (TkReal $$) _ _ }
	constmat       { ParserStatus (TkConstanteMat $$) _ _ }
	funcion        { ParserStatus (TkFuncion $$) _ _ }
	'('            { ParserStatus TkParentesisI _ _ }
	')'            { ParserStatus TkParentesisD _ _ }
	'['            { ParserStatus TkCorcheteI _ _ }
	']'            { ParserStatus TkCorcheteD _ _ }
	','            { ParserStatus TkComa _ _ }
	"range"        { ParserStatus TkRango _ _ }
	"for"          { ParserStatus TkFor _ _ }
	"in"           { ParserStatus TkIn _ _ }
	"if"           { ParserStatus TkIf _ _ }
	"AND"          { ParserStatus TkAnd _ _ }
	"OR"           { ParserStatus TkOr _ _ }
	"NOT"          { ParserStatus TkNot _ _ }
	'<'            { ParserStatus TkMenor _ _ }
	'>'            { ParserStatus TkMayor _ _ }
	">="           { ParserStatus TkMayorIg _ _ }
	"<="           { ParserStatus TkMenorIg _ _ }
	"=="           { ParserStatus TkIgual _ _ }
	';'            { ParserStatus TkPuntoYComa _ _ }
	'='            { ParserStatus TkAsignacion _ _ }
	"with"         { ParserStatus TkWith _ _ }
	"plot"         { ParserStatus TkPlot _ _ }
	"endfor"       { ParserStatus TkEndFor _ _ }
	"step"         { ParserStatus TkStep _ _ }
	"push_back"    { ParserStatus TkPushBack _ _ }
	estilo         { ParserStatus (TkEstilo $$) _ _ }
	identificador  { ParserStatus (TkIdentificador $$) _ _ }
	archivo        { ParserStatus (TkArchivo $$) _ _ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	SECUENCIA_1     rules 1, 2, 3, 4
	SECUENCIA_2     rules 5, 6, 7, 8
	INSTR           rules 9, 10, 11, 12, 13, 14, 15
	CICLO           rules 16, 17
	EM              rules 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35
	SECUENCIA_EM    rules 36, 37
	SECUENCIA_COND  rules 38, 39
	SECUENCIA_ESTILO rules 40, 41
	COND            rules 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67
	EG              rules 68, 69

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	"for"          shift, and enter state 10
	"plot"         shift, and enter state 3
	"push_back"    shift, and enter state 4
	identificador  shift, and enter state 5

	SECUENCIA_1    goto state 6
	SECUENCIA_2    goto state 7
	INSTR          goto state 8
	CICLO          goto state 9

State 1


	"plot"         shift, and enter state 3
	"push_back"    shift, and enter state 4
	identificador  shift, and enter state 5

	INSTR          goto state 2

State 2

	SECUENCIA_1 -> INSTR .                              (rule 1)



State 3

	INSTR -> "plot" . EM ',' EG "with" '[' ']'          (rule 11)
	INSTR -> "plot" . EM ',' EG "with" '[' SECUENCIA_ESTILO ']'    (rule 12)
	INSTR -> "plot" . EM ',' EG "with" estilo           (rule 13)
	INSTR -> "plot" . EM ',' EG                         (rule 14)

	'-'            shift, and enter state 19
	int            shift, and enter state 20
	real           shift, and enter state 21
	constmat       shift, and enter state 22
	funcion        shift, and enter state 23
	'('            shift, and enter state 24
	'['            shift, and enter state 25
	"range"        shift, and enter state 26
	"if"           shift, and enter state 27
	identificador  shift, and enter state 28

	EM             goto state 18

State 4

	INSTR -> "push_back" . '(' identificador ',' EM ')'    (rule 15)

	'('            shift, and enter state 17


State 5

	INSTR -> identificador . '(' identificador ')' '=' EM    (rule 9)
	INSTR -> identificador . '=' EM                     (rule 10)

	'('            shift, and enter state 15
	'='            shift, and enter state 16


State 6

	%start_parse -> SECUENCIA_1 .                       (rule 0)

	%eof           accept


State 7

	SECUENCIA_1 -> SECUENCIA_2 . INSTR                  (rule 3)
	SECUENCIA_1 -> SECUENCIA_2 . CICLO                  (rule 4)
	SECUENCIA_2 -> SECUENCIA_2 . INSTR ';'              (rule 7)
	SECUENCIA_2 -> SECUENCIA_2 . CICLO                  (rule 8)

	"for"          shift, and enter state 10
	"plot"         shift, and enter state 3
	"push_back"    shift, and enter state 4
	identificador  shift, and enter state 5

	INSTR          goto state 13
	CICLO          goto state 14

State 8

	SECUENCIA_1 -> INSTR .                              (rule 1)
	SECUENCIA_2 -> INSTR . ';'                          (rule 5)

	';'            shift, and enter state 12
	"endfor"       reduce using rule 1
	%eof           reduce using rule 1


State 9

	SECUENCIA_1 -> CICLO .                              (rule 2)
	SECUENCIA_2 -> CICLO .                              (rule 6)

	"for"          reduce using rule 6
	"plot"         reduce using rule 6
	"endfor"       reduce using rule 2
	"push_back"    reduce using rule 6
	identificador  reduce using rule 6
	%eof           reduce using rule 2


State 10

	CICLO -> "for" . identificador "in" EM SECUENCIA_1 "endfor"    (rule 16)
	CICLO -> "for" . identificador "in" EM "step" EM SECUENCIA_1 "endfor"    (rule 17)

	identificador  shift, and enter state 11


State 11

	CICLO -> "for" identificador . "in" EM SECUENCIA_1 "endfor"    (rule 16)
	CICLO -> "for" identificador . "in" EM "step" EM SECUENCIA_1 "endfor"    (rule 17)

	"in"           shift, and enter state 48


State 12

	SECUENCIA_2 -> INSTR ';' .                          (rule 5)

	"for"          reduce using rule 5
	"plot"         reduce using rule 5
	"push_back"    reduce using rule 5
	identificador  reduce using rule 5


State 13

	SECUENCIA_1 -> SECUENCIA_2 INSTR .                  (rule 3)
	SECUENCIA_2 -> SECUENCIA_2 INSTR . ';'              (rule 7)

	';'            shift, and enter state 47
	"endfor"       reduce using rule 3
	%eof           reduce using rule 3


State 14

	SECUENCIA_1 -> SECUENCIA_2 CICLO .                  (rule 4)
	SECUENCIA_2 -> SECUENCIA_2 CICLO .                  (rule 8)

	"for"          reduce using rule 8
	"plot"         reduce using rule 8
	"endfor"       reduce using rule 4
	"push_back"    reduce using rule 8
	identificador  reduce using rule 8
	%eof           reduce using rule 4


State 15

	INSTR -> identificador '(' . identificador ')' '=' EM    (rule 9)

	identificador  shift, and enter state 46


State 16

	INSTR -> identificador '=' . EM                     (rule 10)

	'-'            shift, and enter state 19
	int            shift, and enter state 20
	real           shift, and enter state 21
	constmat       shift, and enter state 22
	funcion        shift, and enter state 23
	'('            shift, and enter state 24
	'['            shift, and enter state 25
	"range"        shift, and enter state 26
	"if"           shift, and enter state 27
	identificador  shift, and enter state 28

	EM             goto state 45

State 17

	INSTR -> "push_back" '(' . identificador ',' EM ')'    (rule 15)

	identificador  shift, and enter state 44


State 18

	INSTR -> "plot" EM . ',' EG "with" '[' ']'          (rule 11)
	INSTR -> "plot" EM . ',' EG "with" '[' SECUENCIA_ESTILO ']'    (rule 12)
	INSTR -> "plot" EM . ',' EG "with" estilo           (rule 13)
	INSTR -> "plot" EM . ',' EG                         (rule 14)
	EM -> EM . '+' EM                                   (rule 18)
	EM -> EM . '-' EM                                   (rule 19)
	EM -> EM . '*' EM                                   (rule 20)
	EM -> EM . '/' EM                                   (rule 21)
	EM -> EM . '^' EM                                   (rule 22)

	'+'            shift, and enter state 38
	'-'            shift, and enter state 39
	'*'            shift, and enter state 40
	'/'            shift, and enter state 41
	'^'            shift, and enter state 42
	','            shift, and enter state 43


State 19

	EM -> '-' . EM                                      (rule 23)

	'-'            shift, and enter state 19
	int            shift, and enter state 20
	real           shift, and enter state 21
	constmat       shift, and enter state 22
	funcion        shift, and enter state 23
	'('            shift, and enter state 24
	'['            shift, and enter state 25
	"range"        shift, and enter state 26
	"if"           shift, and enter state 27
	identificador  shift, and enter state 28

	EM             goto state 37

State 20

	EM -> int .                                         (rule 25)

	'+'            reduce using rule 25
	'-'            reduce using rule 25
	'*'            reduce using rule 25
	'/'            reduce using rule 25
	'^'            reduce using rule 25
	')'            reduce using rule 25
	']'            reduce using rule 25
	','            reduce using rule 25
	"for"          reduce using rule 25
	';'            reduce using rule 25
	"with"         reduce using rule 25
	"plot"         reduce using rule 25
	"endfor"       reduce using rule 25
	"step"         reduce using rule 25
	"push_back"    reduce using rule 25
	identificador  reduce using rule 25
	%eof           reduce using rule 25


State 21

	EM -> real .                                        (rule 26)

	'+'            reduce using rule 26
	'-'            reduce using rule 26
	'*'            reduce using rule 26
	'/'            reduce using rule 26
	'^'            reduce using rule 26
	')'            reduce using rule 26
	']'            reduce using rule 26
	','            reduce using rule 26
	"for"          reduce using rule 26
	';'            reduce using rule 26
	"with"         reduce using rule 26
	"plot"         reduce using rule 26
	"endfor"       reduce using rule 26
	"step"         reduce using rule 26
	"push_back"    reduce using rule 26
	identificador  reduce using rule 26
	%eof           reduce using rule 26


State 22

	EM -> constmat .                                    (rule 27)

	'+'            reduce using rule 27
	'-'            reduce using rule 27
	'*'            reduce using rule 27
	'/'            reduce using rule 27
	'^'            reduce using rule 27
	')'            reduce using rule 27
	']'            reduce using rule 27
	','            reduce using rule 27
	"for"          reduce using rule 27
	';'            reduce using rule 27
	"with"         reduce using rule 27
	"plot"         reduce using rule 27
	"endfor"       reduce using rule 27
	"step"         reduce using rule 27
	"push_back"    reduce using rule 27
	identificador  reduce using rule 27
	%eof           reduce using rule 27


State 23

	EM -> funcion . '(' EM ')'                          (rule 28)

	'('            shift, and enter state 36


State 24

	EM -> '(' . EM ')'                                  (rule 24)

	'-'            shift, and enter state 19
	int            shift, and enter state 20
	real           shift, and enter state 21
	constmat       shift, and enter state 22
	funcion        shift, and enter state 23
	'('            shift, and enter state 24
	'['            shift, and enter state 25
	"range"        shift, and enter state 26
	"if"           shift, and enter state 27
	identificador  shift, and enter state 28

	EM             goto state 35

State 25

	EM -> '[' . ']'                                     (rule 31)
	EM -> '[' . SECUENCIA_EM ']'                        (rule 32)
	EM -> '[' . EM "for" identificador "in" EM ']'      (rule 34)

	'-'            shift, and enter state 19
	int            shift, and enter state 20
	real           shift, and enter state 21
	constmat       shift, and enter state 22
	funcion        shift, and enter state 23
	'('            shift, and enter state 24
	'['            shift, and enter state 25
	']'            shift, and enter state 34
	"range"        shift, and enter state 26
	"if"           shift, and enter state 27
	identificador  shift, and enter state 28

	EM             goto state 32
	SECUENCIA_EM   goto state 33

State 26

	EM -> "range" . '(' EM ',' EM ')'                   (rule 33)

	'('            shift, and enter state 31


State 27

	EM -> "if" . '(' COND ',' EM ',' EM ')'             (rule 35)

	'('            shift, and enter state 30


State 28

	EM -> identificador . '(' EM ')'                    (rule 29)
	EM -> identificador .                               (rule 30)

	'+'            reduce using rule 30
	'-'            reduce using rule 30
	'*'            reduce using rule 30
	'/'            reduce using rule 30
	'^'            reduce using rule 30
	'('            shift, and enter state 29
	')'            reduce using rule 30
	']'            reduce using rule 30
	','            reduce using rule 30
	"for"          reduce using rule 30
	';'            reduce using rule 30
	"with"         reduce using rule 30
	"plot"         reduce using rule 30
	"endfor"       reduce using rule 30
	"step"         reduce using rule 30
	"push_back"    reduce using rule 30
	identificador  reduce using rule 30
	%eof           reduce using rule 30


State 29

	EM -> identificador '(' . EM ')'                    (rule 29)

	'-'            shift, and enter state 19
	int            shift, and enter state 20
	real           shift, and enter state 21
	constmat       shift, and enter state 22
	funcion        shift, and enter state 23
	'('            shift, and enter state 24
	'['            shift, and enter state 25
	"range"        shift, and enter state 26
	"if"           shift, and enter state 27
	identificador  shift, and enter state 28

	EM             goto state 78

State 30

	EM -> "if" '(' . COND ',' EM ',' EM ')'             (rule 35)

	'-'            shift, and enter state 67
	int            shift, and enter state 68
	real           shift, and enter state 69
	constmat       shift, and enter state 70
	funcion        shift, and enter state 71
	'('            shift, and enter state 72
	'['            shift, and enter state 73
	"range"        shift, and enter state 74
	"if"           shift, and enter state 75
	"NOT"          shift, and enter state 76
	identificador  shift, and enter state 77

	COND           goto state 66

State 31

	EM -> "range" '(' . EM ',' EM ')'                   (rule 33)

	'-'            shift, and enter state 19
	int            shift, and enter state 20
	real           shift, and enter state 21
	constmat       shift, and enter state 22
	funcion        shift, and enter state 23
	'('            shift, and enter state 24
	'['            shift, and enter state 25
	"range"        shift, and enter state 26
	"if"           shift, and enter state 27
	identificador  shift, and enter state 28

	EM             goto state 65

State 32

	EM -> EM . '+' EM                                   (rule 18)
	EM -> EM . '-' EM                                   (rule 19)
	EM -> EM . '*' EM                                   (rule 20)
	EM -> EM . '/' EM                                   (rule 21)
	EM -> EM . '^' EM                                   (rule 22)
	EM -> '[' EM . "for" identificador "in" EM ']'      (rule 34)
	SECUENCIA_EM -> EM .                                (rule 36)

	'+'            shift, and enter state 38
	'-'            shift, and enter state 39
	'*'            shift, and enter state 40
	'/'            shift, and enter state 41
	'^'            shift, and enter state 42
	']'            reduce using rule 36
	','            reduce using rule 36
	"for"          shift, and enter state 64


State 33

	EM -> '[' SECUENCIA_EM . ']'                        (rule 32)
	SECUENCIA_EM -> SECUENCIA_EM . ',' EM               (rule 37)

	']'            shift, and enter state 62
	','            shift, and enter state 63


State 34

	EM -> '[' ']' .                                     (rule 31)

	'+'            reduce using rule 31
	'-'            reduce using rule 31
	'*'            reduce using rule 31
	'/'            reduce using rule 31
	'^'            reduce using rule 31
	')'            reduce using rule 31
	']'            reduce using rule 31
	','            reduce using rule 31
	"for"          reduce using rule 31
	';'            reduce using rule 31
	"with"         reduce using rule 31
	"plot"         reduce using rule 31
	"endfor"       reduce using rule 31
	"step"         reduce using rule 31
	"push_back"    reduce using rule 31
	identificador  reduce using rule 31
	%eof           reduce using rule 31


State 35

	EM -> EM . '+' EM                                   (rule 18)
	EM -> EM . '-' EM                                   (rule 19)
	EM -> EM . '*' EM                                   (rule 20)
	EM -> EM . '/' EM                                   (rule 21)
	EM -> EM . '^' EM                                   (rule 22)
	EM -> '(' EM . ')'                                  (rule 24)

	'+'            shift, and enter state 38
	'-'            shift, and enter state 39
	'*'            shift, and enter state 40
	'/'            shift, and enter state 41
	'^'            shift, and enter state 42
	')'            shift, and enter state 61


State 36

	EM -> funcion '(' . EM ')'                          (rule 28)

	'-'            shift, and enter state 19
	int            shift, and enter state 20
	real           shift, and enter state 21
	constmat       shift, and enter state 22
	funcion        shift, and enter state 23
	'('            shift, and enter state 24
	'['            shift, and enter state 25
	"range"        shift, and enter state 26
	"if"           shift, and enter state 27
	identificador  shift, and enter state 28

	EM             goto state 60

State 37

	EM -> EM . '+' EM                                   (rule 18)
	EM -> EM . '-' EM                                   (rule 19)
	EM -> EM . '*' EM                                   (rule 20)
	EM -> EM . '/' EM                                   (rule 21)
	EM -> EM . '^' EM                                   (rule 22)
	EM -> '-' EM .                                      (rule 23)

	'+'            reduce using rule 23
	'-'            reduce using rule 23
	'*'            reduce using rule 23
	'/'            reduce using rule 23
	'^'            shift, and enter state 42
	')'            reduce using rule 23
	']'            reduce using rule 23
	','            reduce using rule 23
	"for"          reduce using rule 23
	';'            reduce using rule 23
	"with"         reduce using rule 23
	"plot"         reduce using rule 23
	"endfor"       reduce using rule 23
	"step"         reduce using rule 23
	"push_back"    reduce using rule 23
	identificador  reduce using rule 23
	%eof           reduce using rule 23


State 38

	EM -> EM '+' . EM                                   (rule 18)

	'-'            shift, and enter state 19
	int            shift, and enter state 20
	real           shift, and enter state 21
	constmat       shift, and enter state 22
	funcion        shift, and enter state 23
	'('            shift, and enter state 24
	'['            shift, and enter state 25
	"range"        shift, and enter state 26
	"if"           shift, and enter state 27
	identificador  shift, and enter state 28

	EM             goto state 59

State 39

	EM -> EM '-' . EM                                   (rule 19)

	'-'            shift, and enter state 19
	int            shift, and enter state 20
	real           shift, and enter state 21
	constmat       shift, and enter state 22
	funcion        shift, and enter state 23
	'('            shift, and enter state 24
	'['            shift, and enter state 25
	"range"        shift, and enter state 26
	"if"           shift, and enter state 27
	identificador  shift, and enter state 28

	EM             goto state 58

State 40

	EM -> EM '*' . EM                                   (rule 20)

	'-'            shift, and enter state 19
	int            shift, and enter state 20
	real           shift, and enter state 21
	constmat       shift, and enter state 22
	funcion        shift, and enter state 23
	'('            shift, and enter state 24
	'['            shift, and enter state 25
	"range"        shift, and enter state 26
	"if"           shift, and enter state 27
	identificador  shift, and enter state 28

	EM             goto state 57

State 41

	EM -> EM '/' . EM                                   (rule 21)

	'-'            shift, and enter state 19
	int            shift, and enter state 20
	real           shift, and enter state 21
	constmat       shift, and enter state 22
	funcion        shift, and enter state 23
	'('            shift, and enter state 24
	'['            shift, and enter state 25
	"range"        shift, and enter state 26
	"if"           shift, and enter state 27
	identificador  shift, and enter state 28

	EM             goto state 56

State 42

	EM -> EM '^' . EM                                   (rule 22)

	'-'            shift, and enter state 19
	int            shift, and enter state 20
	real           shift, and enter state 21
	constmat       shift, and enter state 22
	funcion        shift, and enter state 23
	'('            shift, and enter state 24
	'['            shift, and enter state 25
	"range"        shift, and enter state 26
	"if"           shift, and enter state 27
	identificador  shift, and enter state 28

	EM             goto state 55

State 43

	INSTR -> "plot" EM ',' . EG "with" '[' ']'          (rule 11)
	INSTR -> "plot" EM ',' . EG "with" '[' SECUENCIA_ESTILO ']'    (rule 12)
	INSTR -> "plot" EM ',' . EG "with" estilo           (rule 13)
	INSTR -> "plot" EM ',' . EG                         (rule 14)

	'-'            shift, and enter state 19
	int            shift, and enter state 20
	real           shift, and enter state 21
	constmat       shift, and enter state 22
	funcion        shift, and enter state 23
	'('            shift, and enter state 24
	'['            shift, and enter state 25
	"range"        shift, and enter state 26
	"if"           shift, and enter state 27
	identificador  shift, and enter state 28
	archivo        shift, and enter state 54

	EM             goto state 52
	EG             goto state 53

State 44

	INSTR -> "push_back" '(' identificador . ',' EM ')'    (rule 15)

	','            shift, and enter state 51


State 45

	INSTR -> identificador '=' EM .                     (rule 10)
	EM -> EM . '+' EM                                   (rule 18)
	EM -> EM . '-' EM                                   (rule 19)
	EM -> EM . '*' EM                                   (rule 20)
	EM -> EM . '/' EM                                   (rule 21)
	EM -> EM . '^' EM                                   (rule 22)

	'+'            shift, and enter state 38
	'-'            shift, and enter state 39
	'*'            shift, and enter state 40
	'/'            shift, and enter state 41
	'^'            shift, and enter state 42
	';'            reduce using rule 10
	"endfor"       reduce using rule 10
	%eof           reduce using rule 10


State 46

	INSTR -> identificador '(' identificador . ')' '=' EM    (rule 9)

	')'            shift, and enter state 50


State 47

	SECUENCIA_2 -> SECUENCIA_2 INSTR ';' .              (rule 7)

	"for"          reduce using rule 7
	"plot"         reduce using rule 7
	"push_back"    reduce using rule 7
	identificador  reduce using rule 7


State 48

	CICLO -> "for" identificador "in" . EM SECUENCIA_1 "endfor"    (rule 16)
	CICLO -> "for" identificador "in" . EM "step" EM SECUENCIA_1 "endfor"    (rule 17)

	'-'            shift, and enter state 19
	int            shift, and enter state 20
	real           shift, and enter state 21
	constmat       shift, and enter state 22
	funcion        shift, and enter state 23
	'('            shift, and enter state 24
	'['            shift, and enter state 25
	"range"        shift, and enter state 26
	"if"           shift, and enter state 27
	identificador  shift, and enter state 28

	EM             goto state 49

State 49

	CICLO -> "for" identificador "in" EM . SECUENCIA_1 "endfor"    (rule 16)
	CICLO -> "for" identificador "in" EM . "step" EM SECUENCIA_1 "endfor"    (rule 17)
	EM -> EM . '+' EM                                   (rule 18)
	EM -> EM . '-' EM                                   (rule 19)
	EM -> EM . '*' EM                                   (rule 20)
	EM -> EM . '/' EM                                   (rule 21)
	EM -> EM . '^' EM                                   (rule 22)

	'+'            shift, and enter state 38
	'-'            shift, and enter state 39
	'*'            shift, and enter state 40
	'/'            shift, and enter state 41
	'^'            shift, and enter state 42
	"for"          shift, and enter state 10
	"plot"         shift, and enter state 3
	"step"         shift, and enter state 111
	"push_back"    shift, and enter state 4
	identificador  shift, and enter state 5

	SECUENCIA_1    goto state 110
	SECUENCIA_2    goto state 7
	INSTR          goto state 8
	CICLO          goto state 9

State 50

	INSTR -> identificador '(' identificador ')' . '=' EM    (rule 9)

	'='            shift, and enter state 109


State 51

	INSTR -> "push_back" '(' identificador ',' . EM ')'    (rule 15)

	'-'            shift, and enter state 19
	int            shift, and enter state 20
	real           shift, and enter state 21
	constmat       shift, and enter state 22
	funcion        shift, and enter state 23
	'('            shift, and enter state 24
	'['            shift, and enter state 25
	"range"        shift, and enter state 26
	"if"           shift, and enter state 27
	identificador  shift, and enter state 28

	EM             goto state 108

State 52

	EM -> EM . '+' EM                                   (rule 18)
	EM -> EM . '-' EM                                   (rule 19)
	EM -> EM . '*' EM                                   (rule 20)
	EM -> EM . '/' EM                                   (rule 21)
	EM -> EM . '^' EM                                   (rule 22)
	EG -> EM .                                          (rule 68)

	'+'            shift, and enter state 38
	'-'            shift, and enter state 39
	'*'            shift, and enter state 40
	'/'            shift, and enter state 41
	'^'            shift, and enter state 42
	';'            reduce using rule 68
	"with"         reduce using rule 68
	"endfor"       reduce using rule 68
	%eof           reduce using rule 68


State 53

	INSTR -> "plot" EM ',' EG . "with" '[' ']'          (rule 11)
	INSTR -> "plot" EM ',' EG . "with" '[' SECUENCIA_ESTILO ']'    (rule 12)
	INSTR -> "plot" EM ',' EG . "with" estilo           (rule 13)
	INSTR -> "plot" EM ',' EG .                         (rule 14)

	';'            reduce using rule 14
	"with"         shift, and enter state 107
	"endfor"       reduce using rule 14
	%eof           reduce using rule 14


State 54

	EG -> archivo .                                     (rule 69)

	';'            reduce using rule 69
	"with"         reduce using rule 69
	"endfor"       reduce using rule 69
	%eof           reduce using rule 69


State 55

	EM -> EM . '+' EM                                   (rule 18)
	EM -> EM . '-' EM                                   (rule 19)
	EM -> EM . '*' EM                                   (rule 20)
	EM -> EM . '/' EM                                   (rule 21)
	EM -> EM . '^' EM                                   (rule 22)
	EM -> EM '^' EM .                                   (rule 22)

	'+'            reduce using rule 22
	'-'            reduce using rule 22
	'*'            reduce using rule 22
	'/'            reduce using rule 22
	'^'            shift, and enter state 42
	')'            reduce using rule 22
	']'            reduce using rule 22
	','            reduce using rule 22
	"for"          reduce using rule 22
	';'            reduce using rule 22
	"with"         reduce using rule 22
	"plot"         reduce using rule 22
	"endfor"       reduce using rule 22
	"step"         reduce using rule 22
	"push_back"    reduce using rule 22
	identificador  reduce using rule 22
	%eof           reduce using rule 22


State 56

	EM -> EM . '+' EM                                   (rule 18)
	EM -> EM . '-' EM                                   (rule 19)
	EM -> EM . '*' EM                                   (rule 20)
	EM -> EM . '/' EM                                   (rule 21)
	EM -> EM '/' EM .                                   (rule 21)
	EM -> EM . '^' EM                                   (rule 22)

	'+'            reduce using rule 21
	'-'            reduce using rule 21
	'*'            reduce using rule 21
	'/'            reduce using rule 21
	'^'            shift, and enter state 42
	')'            reduce using rule 21
	']'            reduce using rule 21
	','            reduce using rule 21
	"for"          reduce using rule 21
	';'            reduce using rule 21
	"with"         reduce using rule 21
	"plot"         reduce using rule 21
	"endfor"       reduce using rule 21
	"step"         reduce using rule 21
	"push_back"    reduce using rule 21
	identificador  reduce using rule 21
	%eof           reduce using rule 21


State 57

	EM -> EM . '+' EM                                   (rule 18)
	EM -> EM . '-' EM                                   (rule 19)
	EM -> EM . '*' EM                                   (rule 20)
	EM -> EM '*' EM .                                   (rule 20)
	EM -> EM . '/' EM                                   (rule 21)
	EM -> EM . '^' EM                                   (rule 22)

	'+'            reduce using rule 20
	'-'            reduce using rule 20
	'*'            reduce using rule 20
	'/'            reduce using rule 20
	'^'            shift, and enter state 42
	')'            reduce using rule 20
	']'            reduce using rule 20
	','            reduce using rule 20
	"for"          reduce using rule 20
	';'            reduce using rule 20
	"with"         reduce using rule 20
	"plot"         reduce using rule 20
	"endfor"       reduce using rule 20
	"step"         reduce using rule 20
	"push_back"    reduce using rule 20
	identificador  reduce using rule 20
	%eof           reduce using rule 20


State 58

	EM -> EM . '+' EM                                   (rule 18)
	EM -> EM . '-' EM                                   (rule 19)
	EM -> EM '-' EM .                                   (rule 19)
	EM -> EM . '*' EM                                   (rule 20)
	EM -> EM . '/' EM                                   (rule 21)
	EM -> EM . '^' EM                                   (rule 22)

	'+'            reduce using rule 19
	'-'            reduce using rule 19
	'*'            shift, and enter state 40
	'/'            shift, and enter state 41
	'^'            shift, and enter state 42
	')'            reduce using rule 19
	']'            reduce using rule 19
	','            reduce using rule 19
	"for"          reduce using rule 19
	';'            reduce using rule 19
	"with"         reduce using rule 19
	"plot"         reduce using rule 19
	"endfor"       reduce using rule 19
	"step"         reduce using rule 19
	"push_back"    reduce using rule 19
	identificador  reduce using rule 19
	%eof           reduce using rule 19


State 59

	EM -> EM . '+' EM                                   (rule 18)
	EM -> EM '+' EM .                                   (rule 18)
	EM -> EM . '-' EM                                   (rule 19)
	EM -> EM . '*' EM                                   (rule 20)
	EM -> EM . '/' EM                                   (rule 21)
	EM -> EM . '^' EM                                   (rule 22)

	'+'            reduce using rule 18
	'-'            reduce using rule 18
	'*'            shift, and enter state 40
	'/'            shift, and enter state 41
	'^'            shift, and enter state 42
	')'            reduce using rule 18
	']'            reduce using rule 18
	','            reduce using rule 18
	"for"          reduce using rule 18
	';'            reduce using rule 18
	"with"         reduce using rule 18
	"plot"         reduce using rule 18
	"endfor"       reduce using rule 18
	"step"         reduce using rule 18
	"push_back"    reduce using rule 18
	identificador  reduce using rule 18
	%eof           reduce using rule 18


State 60

	EM -> EM . '+' EM                                   (rule 18)
	EM -> EM . '-' EM                                   (rule 19)
	EM -> EM . '*' EM                                   (rule 20)
	EM -> EM . '/' EM                                   (rule 21)
	EM -> EM . '^' EM                                   (rule 22)
	EM -> funcion '(' EM . ')'                          (rule 28)

	'+'            shift, and enter state 38
	'-'            shift, and enter state 39
	'*'            shift, and enter state 40
	'/'            shift, and enter state 41
	'^'            shift, and enter state 42
	')'            shift, and enter state 106


State 61

	EM -> '(' EM ')' .                                  (rule 24)

	'+'            reduce using rule 24
	'-'            reduce using rule 24
	'*'            reduce using rule 24
	'/'            reduce using rule 24
	'^'            reduce using rule 24
	')'            reduce using rule 24
	']'            reduce using rule 24
	','            reduce using rule 24
	"for"          reduce using rule 24
	';'            reduce using rule 24
	"with"         reduce using rule 24
	"plot"         reduce using rule 24
	"endfor"       reduce using rule 24
	"step"         reduce using rule 24
	"push_back"    reduce using rule 24
	identificador  reduce using rule 24
	%eof           reduce using rule 24


State 62

	EM -> '[' SECUENCIA_EM ']' .                        (rule 32)

	'+'            reduce using rule 32
	'-'            reduce using rule 32
	'*'            reduce using rule 32
	'/'            reduce using rule 32
	'^'            reduce using rule 32
	')'            reduce using rule 32
	']'            reduce using rule 32
	','            reduce using rule 32
	"for"          reduce using rule 32
	';'            reduce using rule 32
	"with"         reduce using rule 32
	"plot"         reduce using rule 32
	"endfor"       reduce using rule 32
	"step"         reduce using rule 32
	"push_back"    reduce using rule 32
	identificador  reduce using rule 32
	%eof           reduce using rule 32


State 63

	SECUENCIA_EM -> SECUENCIA_EM ',' . EM               (rule 37)

	'-'            shift, and enter state 19
	int            shift, and enter state 20
	real           shift, and enter state 21
	constmat       shift, and enter state 22
	funcion        shift, and enter state 23
	'('            shift, and enter state 24
	'['            shift, and enter state 25
	"range"        shift, and enter state 26
	"if"           shift, and enter state 27
	identificador  shift, and enter state 28

	EM             goto state 105

State 64

	EM -> '[' EM "for" . identificador "in" EM ']'      (rule 34)

	identificador  shift, and enter state 104


State 65

	EM -> EM . '+' EM                                   (rule 18)
	EM -> EM . '-' EM                                   (rule 19)
	EM -> EM . '*' EM                                   (rule 20)
	EM -> EM . '/' EM                                   (rule 21)
	EM -> EM . '^' EM                                   (rule 22)
	EM -> "range" '(' EM . ',' EM ')'                   (rule 33)

	'+'            shift, and enter state 38
	'-'            shift, and enter state 39
	'*'            shift, and enter state 40
	'/'            shift, and enter state 41
	'^'            shift, and enter state 42
	','            shift, and enter state 103


State 66

	EM -> "if" '(' COND . ',' EM ',' EM ')'             (rule 35)
	COND -> COND . '+' COND                             (rule 42)
	COND -> COND . '-' COND                             (rule 43)
	COND -> COND . '*' COND                             (rule 44)
	COND -> COND . '/' COND                             (rule 45)
	COND -> COND . '^' COND                             (rule 46)
	COND -> COND . "AND" COND                           (rule 60)
	COND -> COND . "OR" COND                            (rule 61)
	COND -> COND . '>' COND                             (rule 63)
	COND -> COND . '<' COND                             (rule 64)
	COND -> COND . "<=" COND                            (rule 65)
	COND -> COND . ">=" COND                            (rule 66)
	COND -> COND . "==" COND                            (rule 67)

	'+'            shift, and enter state 90
	'-'            shift, and enter state 91
	'*'            shift, and enter state 92
	'/'            shift, and enter state 93
	'^'            shift, and enter state 94
	','            shift, and enter state 95
	"AND"          shift, and enter state 96
	"OR"           shift, and enter state 97
	'<'            shift, and enter state 98
	'>'            shift, and enter state 99
	">="           shift, and enter state 100
	"<="           shift, and enter state 101
	"=="           shift, and enter state 102


State 67

	COND -> '-' . COND                                  (rule 47)

	'-'            shift, and enter state 67
	int            shift, and enter state 68
	real           shift, and enter state 69
	constmat       shift, and enter state 70
	funcion        shift, and enter state 71
	'('            shift, and enter state 72
	'['            shift, and enter state 73
	"range"        shift, and enter state 74
	"if"           shift, and enter state 75
	"NOT"          shift, and enter state 76
	identificador  shift, and enter state 77

	COND           goto state 89

State 68

	COND -> int .                                       (rule 49)

	'+'            reduce using rule 49
	'-'            reduce using rule 49
	'*'            reduce using rule 49
	'/'            reduce using rule 49
	'^'            reduce using rule 49
	')'            reduce using rule 49
	']'            reduce using rule 49
	','            reduce using rule 49
	"for"          reduce using rule 49
	"AND"          reduce using rule 49
	"OR"           reduce using rule 49
	'<'            reduce using rule 49
	'>'            reduce using rule 49
	">="           reduce using rule 49
	"<="           reduce using rule 49
	"=="           reduce using rule 49


State 69

	COND -> real .                                      (rule 50)

	'+'            reduce using rule 50
	'-'            reduce using rule 50
	'*'            reduce using rule 50
	'/'            reduce using rule 50
	'^'            reduce using rule 50
	')'            reduce using rule 50
	']'            reduce using rule 50
	','            reduce using rule 50
	"for"          reduce using rule 50
	"AND"          reduce using rule 50
	"OR"           reduce using rule 50
	'<'            reduce using rule 50
	'>'            reduce using rule 50
	">="           reduce using rule 50
	"<="           reduce using rule 50
	"=="           reduce using rule 50


State 70

	COND -> constmat .                                  (rule 51)

	'+'            reduce using rule 51
	'-'            reduce using rule 51
	'*'            reduce using rule 51
	'/'            reduce using rule 51
	'^'            reduce using rule 51
	')'            reduce using rule 51
	']'            reduce using rule 51
	','            reduce using rule 51
	"for"          reduce using rule 51
	"AND"          reduce using rule 51
	"OR"           reduce using rule 51
	'<'            reduce using rule 51
	'>'            reduce using rule 51
	">="           reduce using rule 51
	"<="           reduce using rule 51
	"=="           reduce using rule 51


State 71

	COND -> funcion . '(' COND ')'                      (rule 52)

	'('            shift, and enter state 88


State 72

	COND -> '(' . COND ')'                              (rule 48)

	'-'            shift, and enter state 67
	int            shift, and enter state 68
	real           shift, and enter state 69
	constmat       shift, and enter state 70
	funcion        shift, and enter state 71
	'('            shift, and enter state 72
	'['            shift, and enter state 73
	"range"        shift, and enter state 74
	"if"           shift, and enter state 75
	"NOT"          shift, and enter state 76
	identificador  shift, and enter state 77

	COND           goto state 87

State 73

	COND -> '[' . ']'                                   (rule 55)
	COND -> '[' . SECUENCIA_COND ']'                    (rule 56)
	COND -> '[' . COND "for" identificador "in" COND ']'    (rule 58)

	'-'            shift, and enter state 67
	int            shift, and enter state 68
	real           shift, and enter state 69
	constmat       shift, and enter state 70
	funcion        shift, and enter state 71
	'('            shift, and enter state 72
	'['            shift, and enter state 73
	']'            shift, and enter state 86
	"range"        shift, and enter state 74
	"if"           shift, and enter state 75
	"NOT"          shift, and enter state 76
	identificador  shift, and enter state 77

	SECUENCIA_COND goto state 84
	COND           goto state 85

State 74

	COND -> "range" . '(' COND ',' COND ')'             (rule 57)

	'('            shift, and enter state 83


State 75

	COND -> "if" . '(' COND ',' COND ',' COND ')'       (rule 59)

	'('            shift, and enter state 82


State 76

	COND -> "NOT" . COND                                (rule 62)

	'-'            shift, and enter state 67
	int            shift, and enter state 68
	real           shift, and enter state 69
	constmat       shift, and enter state 70
	funcion        shift, and enter state 71
	'('            shift, and enter state 72
	'['            shift, and enter state 73
	"range"        shift, and enter state 74
	"if"           shift, and enter state 75
	"NOT"          shift, and enter state 76
	identificador  shift, and enter state 77

	COND           goto state 81

State 77

	COND -> identificador . '(' COND ')'                (rule 53)
	COND -> identificador .                             (rule 54)

	'+'            reduce using rule 54
	'-'            reduce using rule 54
	'*'            reduce using rule 54
	'/'            reduce using rule 54
	'^'            reduce using rule 54
	'('            shift, and enter state 80
	')'            reduce using rule 54
	']'            reduce using rule 54
	','            reduce using rule 54
	"for"          reduce using rule 54
	"AND"          reduce using rule 54
	"OR"           reduce using rule 54
	'<'            reduce using rule 54
	'>'            reduce using rule 54
	">="           reduce using rule 54
	"<="           reduce using rule 54
	"=="           reduce using rule 54


State 78

	EM -> EM . '+' EM                                   (rule 18)
	EM -> EM . '-' EM                                   (rule 19)
	EM -> EM . '*' EM                                   (rule 20)
	EM -> EM . '/' EM                                   (rule 21)
	EM -> EM . '^' EM                                   (rule 22)
	EM -> identificador '(' EM . ')'                    (rule 29)

	'+'            shift, and enter state 38
	'-'            shift, and enter state 39
	'*'            shift, and enter state 40
	'/'            shift, and enter state 41
	'^'            shift, and enter state 42
	')'            shift, and enter state 79


State 79

	EM -> identificador '(' EM ')' .                    (rule 29)

	'+'            reduce using rule 29
	'-'            reduce using rule 29
	'*'            reduce using rule 29
	'/'            reduce using rule 29
	'^'            reduce using rule 29
	')'            reduce using rule 29
	']'            reduce using rule 29
	','            reduce using rule 29
	"for"          reduce using rule 29
	';'            reduce using rule 29
	"with"         reduce using rule 29
	"plot"         reduce using rule 29
	"endfor"       reduce using rule 29
	"step"         reduce using rule 29
	"push_back"    reduce using rule 29
	identificador  reduce using rule 29
	%eof           reduce using rule 29


State 80

	COND -> identificador '(' . COND ')'                (rule 53)

	'-'            shift, and enter state 67
	int            shift, and enter state 68
	real           shift, and enter state 69
	constmat       shift, and enter state 70
	funcion        shift, and enter state 71
	'('            shift, and enter state 72
	'['            shift, and enter state 73
	"range"        shift, and enter state 74
	"if"           shift, and enter state 75
	"NOT"          shift, and enter state 76
	identificador  shift, and enter state 77

	COND           goto state 140

State 81

	COND -> COND . '+' COND                             (rule 42)
	COND -> COND . '-' COND                             (rule 43)
	COND -> COND . '*' COND                             (rule 44)
	COND -> COND . '/' COND                             (rule 45)
	COND -> COND . '^' COND                             (rule 46)
	COND -> COND . "AND" COND                           (rule 60)
	COND -> COND . "OR" COND                            (rule 61)
	COND -> "NOT" COND .                                (rule 62)
	COND -> COND . '>' COND                             (rule 63)
	COND -> COND . '<' COND                             (rule 64)
	COND -> COND . "<=" COND                            (rule 65)
	COND -> COND . ">=" COND                            (rule 66)
	COND -> COND . "==" COND                            (rule 67)

	'+'            shift, and enter state 90
	'-'            shift, and enter state 91
	'*'            shift, and enter state 92
	'/'            shift, and enter state 93
	'^'            shift, and enter state 94
	')'            reduce using rule 62
	']'            reduce using rule 62
	','            reduce using rule 62
	"for"          reduce using rule 62
	"AND"          reduce using rule 62
	"OR"           reduce using rule 62
	'<'            shift, and enter state 98
	'>'            shift, and enter state 99
	">="           shift, and enter state 100
	"<="           shift, and enter state 101
	"=="           shift, and enter state 102


State 82

	COND -> "if" '(' . COND ',' COND ',' COND ')'       (rule 59)

	'-'            shift, and enter state 67
	int            shift, and enter state 68
	real           shift, and enter state 69
	constmat       shift, and enter state 70
	funcion        shift, and enter state 71
	'('            shift, and enter state 72
	'['            shift, and enter state 73
	"range"        shift, and enter state 74
	"if"           shift, and enter state 75
	"NOT"          shift, and enter state 76
	identificador  shift, and enter state 77

	COND           goto state 139

State 83

	COND -> "range" '(' . COND ',' COND ')'             (rule 57)

	'-'            shift, and enter state 67
	int            shift, and enter state 68
	real           shift, and enter state 69
	constmat       shift, and enter state 70
	funcion        shift, and enter state 71
	'('            shift, and enter state 72
	'['            shift, and enter state 73
	"range"        shift, and enter state 74
	"if"           shift, and enter state 75
	"NOT"          shift, and enter state 76
	identificador  shift, and enter state 77

	COND           goto state 138

State 84

	SECUENCIA_COND -> SECUENCIA_COND . ',' COND         (rule 39)
	COND -> '[' SECUENCIA_COND . ']'                    (rule 56)

	']'            shift, and enter state 136
	','            shift, and enter state 137


State 85

	SECUENCIA_COND -> COND .                            (rule 38)
	COND -> COND . '+' COND                             (rule 42)
	COND -> COND . '-' COND                             (rule 43)
	COND -> COND . '*' COND                             (rule 44)
	COND -> COND . '/' COND                             (rule 45)
	COND -> COND . '^' COND                             (rule 46)
	COND -> '[' COND . "for" identificador "in" COND ']'    (rule 58)
	COND -> COND . "AND" COND                           (rule 60)
	COND -> COND . "OR" COND                            (rule 61)
	COND -> COND . '>' COND                             (rule 63)
	COND -> COND . '<' COND                             (rule 64)
	COND -> COND . "<=" COND                            (rule 65)
	COND -> COND . ">=" COND                            (rule 66)
	COND -> COND . "==" COND                            (rule 67)

	'+'            shift, and enter state 90
	'-'            shift, and enter state 91
	'*'            shift, and enter state 92
	'/'            shift, and enter state 93
	'^'            shift, and enter state 94
	']'            reduce using rule 38
	','            reduce using rule 38
	"for"          shift, and enter state 135
	"AND"          shift, and enter state 96
	"OR"           shift, and enter state 97
	'<'            shift, and enter state 98
	'>'            shift, and enter state 99
	">="           shift, and enter state 100
	"<="           shift, and enter state 101
	"=="           shift, and enter state 102


State 86

	COND -> '[' ']' .                                   (rule 55)

	'+'            reduce using rule 55
	'-'            reduce using rule 55
	'*'            reduce using rule 55
	'/'            reduce using rule 55
	'^'            reduce using rule 55
	')'            reduce using rule 55
	']'            reduce using rule 55
	','            reduce using rule 55
	"for"          reduce using rule 55
	"AND"          reduce using rule 55
	"OR"           reduce using rule 55
	'<'            reduce using rule 55
	'>'            reduce using rule 55
	">="           reduce using rule 55
	"<="           reduce using rule 55
	"=="           reduce using rule 55


State 87

	COND -> COND . '+' COND                             (rule 42)
	COND -> COND . '-' COND                             (rule 43)
	COND -> COND . '*' COND                             (rule 44)
	COND -> COND . '/' COND                             (rule 45)
	COND -> COND . '^' COND                             (rule 46)
	COND -> '(' COND . ')'                              (rule 48)
	COND -> COND . "AND" COND                           (rule 60)
	COND -> COND . "OR" COND                            (rule 61)
	COND -> COND . '>' COND                             (rule 63)
	COND -> COND . '<' COND                             (rule 64)
	COND -> COND . "<=" COND                            (rule 65)
	COND -> COND . ">=" COND                            (rule 66)
	COND -> COND . "==" COND                            (rule 67)

	'+'            shift, and enter state 90
	'-'            shift, and enter state 91
	'*'            shift, and enter state 92
	'/'            shift, and enter state 93
	'^'            shift, and enter state 94
	')'            shift, and enter state 134
	"AND"          shift, and enter state 96
	"OR"           shift, and enter state 97
	'<'            shift, and enter state 98
	'>'            shift, and enter state 99
	">="           shift, and enter state 100
	"<="           shift, and enter state 101
	"=="           shift, and enter state 102


State 88

	COND -> funcion '(' . COND ')'                      (rule 52)

	'-'            shift, and enter state 67
	int            shift, and enter state 68
	real           shift, and enter state 69
	constmat       shift, and enter state 70
	funcion        shift, and enter state 71
	'('            shift, and enter state 72
	'['            shift, and enter state 73
	"range"        shift, and enter state 74
	"if"           shift, and enter state 75
	"NOT"          shift, and enter state 76
	identificador  shift, and enter state 77

	COND           goto state 133

State 89

	COND -> COND . '+' COND                             (rule 42)
	COND -> COND . '-' COND                             (rule 43)
	COND -> COND . '*' COND                             (rule 44)
	COND -> COND . '/' COND                             (rule 45)
	COND -> COND . '^' COND                             (rule 46)
	COND -> '-' COND .                                  (rule 47)
	COND -> COND . "AND" COND                           (rule 60)
	COND -> COND . "OR" COND                            (rule 61)
	COND -> COND . '>' COND                             (rule 63)
	COND -> COND . '<' COND                             (rule 64)
	COND -> COND . "<=" COND                            (rule 65)
	COND -> COND . ">=" COND                            (rule 66)
	COND -> COND . "==" COND                            (rule 67)

	'+'            reduce using rule 47
	'-'            reduce using rule 47
	'*'            reduce using rule 47
	'/'            reduce using rule 47
	'^'            shift, and enter state 94
	')'            reduce using rule 47
	']'            reduce using rule 47
	','            reduce using rule 47
	"for"          reduce using rule 47
	"AND"          reduce using rule 47
	"OR"           reduce using rule 47
	'<'            reduce using rule 47
	'>'            reduce using rule 47
	">="           reduce using rule 47
	"<="           reduce using rule 47
	"=="           reduce using rule 47


State 90

	COND -> COND '+' . COND                             (rule 42)

	'-'            shift, and enter state 67
	int            shift, and enter state 68
	real           shift, and enter state 69
	constmat       shift, and enter state 70
	funcion        shift, and enter state 71
	'('            shift, and enter state 72
	'['            shift, and enter state 73
	"range"        shift, and enter state 74
	"if"           shift, and enter state 75
	"NOT"          shift, and enter state 76
	identificador  shift, and enter state 77

	COND           goto state 132

State 91

	COND -> COND '-' . COND                             (rule 43)

	'-'            shift, and enter state 67
	int            shift, and enter state 68
	real           shift, and enter state 69
	constmat       shift, and enter state 70
	funcion        shift, and enter state 71
	'('            shift, and enter state 72
	'['            shift, and enter state 73
	"range"        shift, and enter state 74
	"if"           shift, and enter state 75
	"NOT"          shift, and enter state 76
	identificador  shift, and enter state 77

	COND           goto state 131

State 92

	COND -> COND '*' . COND                             (rule 44)

	'-'            shift, and enter state 67
	int            shift, and enter state 68
	real           shift, and enter state 69
	constmat       shift, and enter state 70
	funcion        shift, and enter state 71
	'('            shift, and enter state 72
	'['            shift, and enter state 73
	"range"        shift, and enter state 74
	"if"           shift, and enter state 75
	"NOT"          shift, and enter state 76
	identificador  shift, and enter state 77

	COND           goto state 130

State 93

	COND -> COND '/' . COND                             (rule 45)

	'-'            shift, and enter state 67
	int            shift, and enter state 68
	real           shift, and enter state 69
	constmat       shift, and enter state 70
	funcion        shift, and enter state 71
	'('            shift, and enter state 72
	'['            shift, and enter state 73
	"range"        shift, and enter state 74
	"if"           shift, and enter state 75
	"NOT"          shift, and enter state 76
	identificador  shift, and enter state 77

	COND           goto state 129

State 94

	COND -> COND '^' . COND                             (rule 46)

	'-'            shift, and enter state 67
	int            shift, and enter state 68
	real           shift, and enter state 69
	constmat       shift, and enter state 70
	funcion        shift, and enter state 71
	'('            shift, and enter state 72
	'['            shift, and enter state 73
	"range"        shift, and enter state 74
	"if"           shift, and enter state 75
	"NOT"          shift, and enter state 76
	identificador  shift, and enter state 77

	COND           goto state 128

State 95

	EM -> "if" '(' COND ',' . EM ',' EM ')'             (rule 35)

	'-'            shift, and enter state 19
	int            shift, and enter state 20
	real           shift, and enter state 21
	constmat       shift, and enter state 22
	funcion        shift, and enter state 23
	'('            shift, and enter state 24
	'['            shift, and enter state 25
	"range"        shift, and enter state 26
	"if"           shift, and enter state 27
	identificador  shift, and enter state 28

	EM             goto state 127

State 96

	COND -> COND "AND" . COND                           (rule 60)

	'-'            shift, and enter state 67
	int            shift, and enter state 68
	real           shift, and enter state 69
	constmat       shift, and enter state 70
	funcion        shift, and enter state 71
	'('            shift, and enter state 72
	'['            shift, and enter state 73
	"range"        shift, and enter state 74
	"if"           shift, and enter state 75
	"NOT"          shift, and enter state 76
	identificador  shift, and enter state 77

	COND           goto state 126

State 97

	COND -> COND "OR" . COND                            (rule 61)

	'-'            shift, and enter state 67
	int            shift, and enter state 68
	real           shift, and enter state 69
	constmat       shift, and enter state 70
	funcion        shift, and enter state 71
	'('            shift, and enter state 72
	'['            shift, and enter state 73
	"range"        shift, and enter state 74
	"if"           shift, and enter state 75
	"NOT"          shift, and enter state 76
	identificador  shift, and enter state 77

	COND           goto state 125

State 98

	COND -> COND '<' . COND                             (rule 64)

	'-'            shift, and enter state 67
	int            shift, and enter state 68
	real           shift, and enter state 69
	constmat       shift, and enter state 70
	funcion        shift, and enter state 71
	'('            shift, and enter state 72
	'['            shift, and enter state 73
	"range"        shift, and enter state 74
	"if"           shift, and enter state 75
	"NOT"          shift, and enter state 76
	identificador  shift, and enter state 77

	COND           goto state 124

State 99

	COND -> COND '>' . COND                             (rule 63)

	'-'            shift, and enter state 67
	int            shift, and enter state 68
	real           shift, and enter state 69
	constmat       shift, and enter state 70
	funcion        shift, and enter state 71
	'('            shift, and enter state 72
	'['            shift, and enter state 73
	"range"        shift, and enter state 74
	"if"           shift, and enter state 75
	"NOT"          shift, and enter state 76
	identificador  shift, and enter state 77

	COND           goto state 123

State 100

	COND -> COND ">=" . COND                            (rule 66)

	'-'            shift, and enter state 67
	int            shift, and enter state 68
	real           shift, and enter state 69
	constmat       shift, and enter state 70
	funcion        shift, and enter state 71
	'('            shift, and enter state 72
	'['            shift, and enter state 73
	"range"        shift, and enter state 74
	"if"           shift, and enter state 75
	"NOT"          shift, and enter state 76
	identificador  shift, and enter state 77

	COND           goto state 122

State 101

	COND -> COND "<=" . COND                            (rule 65)

	'-'            shift, and enter state 67
	int            shift, and enter state 68
	real           shift, and enter state 69
	constmat       shift, and enter state 70
	funcion        shift, and enter state 71
	'('            shift, and enter state 72
	'['            shift, and enter state 73
	"range"        shift, and enter state 74
	"if"           shift, and enter state 75
	"NOT"          shift, and enter state 76
	identificador  shift, and enter state 77

	COND           goto state 121

State 102

	COND -> COND "==" . COND                            (rule 67)

	'-'            shift, and enter state 67
	int            shift, and enter state 68
	real           shift, and enter state 69
	constmat       shift, and enter state 70
	funcion        shift, and enter state 71
	'('            shift, and enter state 72
	'['            shift, and enter state 73
	"range"        shift, and enter state 74
	"if"           shift, and enter state 75
	"NOT"          shift, and enter state 76
	identificador  shift, and enter state 77

	COND           goto state 120

State 103

	EM -> "range" '(' EM ',' . EM ')'                   (rule 33)

	'-'            shift, and enter state 19
	int            shift, and enter state 20
	real           shift, and enter state 21
	constmat       shift, and enter state 22
	funcion        shift, and enter state 23
	'('            shift, and enter state 24
	'['            shift, and enter state 25
	"range"        shift, and enter state 26
	"if"           shift, and enter state 27
	identificador  shift, and enter state 28

	EM             goto state 119

State 104

	EM -> '[' EM "for" identificador . "in" EM ']'      (rule 34)

	"in"           shift, and enter state 118


State 105

	EM -> EM . '+' EM                                   (rule 18)
	EM -> EM . '-' EM                                   (rule 19)
	EM -> EM . '*' EM                                   (rule 20)
	EM -> EM . '/' EM                                   (rule 21)
	EM -> EM . '^' EM                                   (rule 22)
	SECUENCIA_EM -> SECUENCIA_EM ',' EM .               (rule 37)

	'+'            shift, and enter state 38
	'-'            shift, and enter state 39
	'*'            shift, and enter state 40
	'/'            shift, and enter state 41
	'^'            shift, and enter state 42
	']'            reduce using rule 37
	','            reduce using rule 37


State 106

	EM -> funcion '(' EM ')' .                          (rule 28)

	'+'            reduce using rule 28
	'-'            reduce using rule 28
	'*'            reduce using rule 28
	'/'            reduce using rule 28
	'^'            reduce using rule 28
	')'            reduce using rule 28
	']'            reduce using rule 28
	','            reduce using rule 28
	"for"          reduce using rule 28
	';'            reduce using rule 28
	"with"         reduce using rule 28
	"plot"         reduce using rule 28
	"endfor"       reduce using rule 28
	"step"         reduce using rule 28
	"push_back"    reduce using rule 28
	identificador  reduce using rule 28
	%eof           reduce using rule 28


State 107

	INSTR -> "plot" EM ',' EG "with" . '[' ']'          (rule 11)
	INSTR -> "plot" EM ',' EG "with" . '[' SECUENCIA_ESTILO ']'    (rule 12)
	INSTR -> "plot" EM ',' EG "with" . estilo           (rule 13)

	'['            shift, and enter state 116
	estilo         shift, and enter state 117


State 108

	INSTR -> "push_back" '(' identificador ',' EM . ')'    (rule 15)
	EM -> EM . '+' EM                                   (rule 18)
	EM -> EM . '-' EM                                   (rule 19)
	EM -> EM . '*' EM                                   (rule 20)
	EM -> EM . '/' EM                                   (rule 21)
	EM -> EM . '^' EM                                   (rule 22)

	'+'            shift, and enter state 38
	'-'            shift, and enter state 39
	'*'            shift, and enter state 40
	'/'            shift, and enter state 41
	'^'            shift, and enter state 42
	')'            shift, and enter state 115


State 109

	INSTR -> identificador '(' identificador ')' '=' . EM    (rule 9)

	'-'            shift, and enter state 19
	int            shift, and enter state 20
	real           shift, and enter state 21
	constmat       shift, and enter state 22
	funcion        shift, and enter state 23
	'('            shift, and enter state 24
	'['            shift, and enter state 25
	"range"        shift, and enter state 26
	"if"           shift, and enter state 27
	identificador  shift, and enter state 28

	EM             goto state 114

State 110

	CICLO -> "for" identificador "in" EM SECUENCIA_1 . "endfor"    (rule 16)

	"endfor"       shift, and enter state 113


State 111

	CICLO -> "for" identificador "in" EM "step" . EM SECUENCIA_1 "endfor"    (rule 17)

	'-'            shift, and enter state 19
	int            shift, and enter state 20
	real           shift, and enter state 21
	constmat       shift, and enter state 22
	funcion        shift, and enter state 23
	'('            shift, and enter state 24
	'['            shift, and enter state 25
	"range"        shift, and enter state 26
	"if"           shift, and enter state 27
	identificador  shift, and enter state 28

	EM             goto state 112

State 112

	CICLO -> "for" identificador "in" EM "step" EM . SECUENCIA_1 "endfor"    (rule 17)
	EM -> EM . '+' EM                                   (rule 18)
	EM -> EM . '-' EM                                   (rule 19)
	EM -> EM . '*' EM                                   (rule 20)
	EM -> EM . '/' EM                                   (rule 21)
	EM -> EM . '^' EM                                   (rule 22)

	'+'            shift, and enter state 38
	'-'            shift, and enter state 39
	'*'            shift, and enter state 40
	'/'            shift, and enter state 41
	'^'            shift, and enter state 42
	"for"          shift, and enter state 10
	"plot"         shift, and enter state 3
	"push_back"    shift, and enter state 4
	identificador  shift, and enter state 5

	SECUENCIA_1    goto state 153
	SECUENCIA_2    goto state 7
	INSTR          goto state 8
	CICLO          goto state 9

State 113

	CICLO -> "for" identificador "in" EM SECUENCIA_1 "endfor" .    (rule 16)

	"for"          reduce using rule 16
	"plot"         reduce using rule 16
	"endfor"       reduce using rule 16
	"push_back"    reduce using rule 16
	identificador  reduce using rule 16
	%eof           reduce using rule 16


State 114

	INSTR -> identificador '(' identificador ')' '=' EM .    (rule 9)
	EM -> EM . '+' EM                                   (rule 18)
	EM -> EM . '-' EM                                   (rule 19)
	EM -> EM . '*' EM                                   (rule 20)
	EM -> EM . '/' EM                                   (rule 21)
	EM -> EM . '^' EM                                   (rule 22)

	'+'            shift, and enter state 38
	'-'            shift, and enter state 39
	'*'            shift, and enter state 40
	'/'            shift, and enter state 41
	'^'            shift, and enter state 42
	';'            reduce using rule 9
	"endfor"       reduce using rule 9
	%eof           reduce using rule 9


State 115

	INSTR -> "push_back" '(' identificador ',' EM ')' .    (rule 15)

	';'            reduce using rule 15
	"endfor"       reduce using rule 15
	%eof           reduce using rule 15


State 116

	INSTR -> "plot" EM ',' EG "with" '[' . ']'          (rule 11)
	INSTR -> "plot" EM ',' EG "with" '[' . SECUENCIA_ESTILO ']'    (rule 12)

	']'            shift, and enter state 151
	estilo         shift, and enter state 152

	SECUENCIA_ESTILOgoto state 150

State 117

	INSTR -> "plot" EM ',' EG "with" estilo .           (rule 13)

	';'            reduce using rule 13
	"endfor"       reduce using rule 13
	%eof           reduce using rule 13


State 118

	EM -> '[' EM "for" identificador "in" . EM ']'      (rule 34)

	'-'            shift, and enter state 19
	int            shift, and enter state 20
	real           shift, and enter state 21
	constmat       shift, and enter state 22
	funcion        shift, and enter state 23
	'('            shift, and enter state 24
	'['            shift, and enter state 25
	"range"        shift, and enter state 26
	"if"           shift, and enter state 27
	identificador  shift, and enter state 28

	EM             goto state 149

State 119

	EM -> EM . '+' EM                                   (rule 18)
	EM -> EM . '-' EM                                   (rule 19)
	EM -> EM . '*' EM                                   (rule 20)
	EM -> EM . '/' EM                                   (rule 21)
	EM -> EM . '^' EM                                   (rule 22)
	EM -> "range" '(' EM ',' EM . ')'                   (rule 33)

	'+'            shift, and enter state 38
	'-'            shift, and enter state 39
	'*'            shift, and enter state 40
	'/'            shift, and enter state 41
	'^'            shift, and enter state 42
	')'            shift, and enter state 148


State 120

	COND -> COND . '+' COND                             (rule 42)
	COND -> COND . '-' COND                             (rule 43)
	COND -> COND . '*' COND                             (rule 44)
	COND -> COND . '/' COND                             (rule 45)
	COND -> COND . '^' COND                             (rule 46)
	COND -> COND . "AND" COND                           (rule 60)
	COND -> COND . "OR" COND                            (rule 61)
	COND -> COND . '>' COND                             (rule 63)
	COND -> COND . '<' COND                             (rule 64)
	COND -> COND . "<=" COND                            (rule 65)
	COND -> COND . ">=" COND                            (rule 66)
	COND -> COND . "==" COND                            (rule 67)
	COND -> COND "==" COND .                            (rule 67)

	'+'            shift, and enter state 90
	'-'            shift, and enter state 91
	'*'            shift, and enter state 92
	'/'            shift, and enter state 93
	'^'            shift, and enter state 94
	')'            reduce using rule 67
	']'            reduce using rule 67
	','            reduce using rule 67
	"for"          reduce using rule 67
	"AND"          reduce using rule 67
	"OR"           reduce using rule 67
	'<'            reduce using rule 67
	'>'            reduce using rule 67
	">="           reduce using rule 67
	"<="           reduce using rule 67
	"=="           reduce using rule 67


State 121

	COND -> COND . '+' COND                             (rule 42)
	COND -> COND . '-' COND                             (rule 43)
	COND -> COND . '*' COND                             (rule 44)
	COND -> COND . '/' COND                             (rule 45)
	COND -> COND . '^' COND                             (rule 46)
	COND -> COND . "AND" COND                           (rule 60)
	COND -> COND . "OR" COND                            (rule 61)
	COND -> COND . '>' COND                             (rule 63)
	COND -> COND . '<' COND                             (rule 64)
	COND -> COND . "<=" COND                            (rule 65)
	COND -> COND "<=" COND .                            (rule 65)
	COND -> COND . ">=" COND                            (rule 66)
	COND -> COND . "==" COND                            (rule 67)

	'+'            shift, and enter state 90
	'-'            shift, and enter state 91
	'*'            shift, and enter state 92
	'/'            shift, and enter state 93
	'^'            shift, and enter state 94
	')'            reduce using rule 65
	']'            reduce using rule 65
	','            reduce using rule 65
	"for"          reduce using rule 65
	"AND"          reduce using rule 65
	"OR"           reduce using rule 65
	'<'            reduce using rule 65
	'>'            reduce using rule 65
	">="           reduce using rule 65
	"<="           reduce using rule 65
	"=="           reduce using rule 65


State 122

	COND -> COND . '+' COND                             (rule 42)
	COND -> COND . '-' COND                             (rule 43)
	COND -> COND . '*' COND                             (rule 44)
	COND -> COND . '/' COND                             (rule 45)
	COND -> COND . '^' COND                             (rule 46)
	COND -> COND . "AND" COND                           (rule 60)
	COND -> COND . "OR" COND                            (rule 61)
	COND -> COND . '>' COND                             (rule 63)
	COND -> COND . '<' COND                             (rule 64)
	COND -> COND . "<=" COND                            (rule 65)
	COND -> COND . ">=" COND                            (rule 66)
	COND -> COND ">=" COND .                            (rule 66)
	COND -> COND . "==" COND                            (rule 67)

	'+'            shift, and enter state 90
	'-'            shift, and enter state 91
	'*'            shift, and enter state 92
	'/'            shift, and enter state 93
	'^'            shift, and enter state 94
	')'            reduce using rule 66
	']'            reduce using rule 66
	','            reduce using rule 66
	"for"          reduce using rule 66
	"AND"          reduce using rule 66
	"OR"           reduce using rule 66
	'<'            reduce using rule 66
	'>'            reduce using rule 66
	">="           reduce using rule 66
	"<="           reduce using rule 66
	"=="           reduce using rule 66


State 123

	COND -> COND . '+' COND                             (rule 42)
	COND -> COND . '-' COND                             (rule 43)
	COND -> COND . '*' COND                             (rule 44)
	COND -> COND . '/' COND                             (rule 45)
	COND -> COND . '^' COND                             (rule 46)
	COND -> COND . "AND" COND                           (rule 60)
	COND -> COND . "OR" COND                            (rule 61)
	COND -> COND . '>' COND                             (rule 63)
	COND -> COND '>' COND .                             (rule 63)
	COND -> COND . '<' COND                             (rule 64)
	COND -> COND . "<=" COND                            (rule 65)
	COND -> COND . ">=" COND                            (rule 66)
	COND -> COND . "==" COND                            (rule 67)

	'+'            shift, and enter state 90
	'-'            shift, and enter state 91
	'*'            shift, and enter state 92
	'/'            shift, and enter state 93
	'^'            shift, and enter state 94
	')'            reduce using rule 63
	']'            reduce using rule 63
	','            reduce using rule 63
	"for"          reduce using rule 63
	"AND"          reduce using rule 63
	"OR"           reduce using rule 63
	'<'            reduce using rule 63
	'>'            reduce using rule 63
	">="           reduce using rule 63
	"<="           reduce using rule 63
	"=="           reduce using rule 63


State 124

	COND -> COND . '+' COND                             (rule 42)
	COND -> COND . '-' COND                             (rule 43)
	COND -> COND . '*' COND                             (rule 44)
	COND -> COND . '/' COND                             (rule 45)
	COND -> COND . '^' COND                             (rule 46)
	COND -> COND . "AND" COND                           (rule 60)
	COND -> COND . "OR" COND                            (rule 61)
	COND -> COND . '>' COND                             (rule 63)
	COND -> COND . '<' COND                             (rule 64)
	COND -> COND '<' COND .                             (rule 64)
	COND -> COND . "<=" COND                            (rule 65)
	COND -> COND . ">=" COND                            (rule 66)
	COND -> COND . "==" COND                            (rule 67)

	'+'            shift, and enter state 90
	'-'            shift, and enter state 91
	'*'            shift, and enter state 92
	'/'            shift, and enter state 93
	'^'            shift, and enter state 94
	')'            reduce using rule 64
	']'            reduce using rule 64
	','            reduce using rule 64
	"for"          reduce using rule 64
	"AND"          reduce using rule 64
	"OR"           reduce using rule 64
	'<'            reduce using rule 64
	'>'            reduce using rule 64
	">="           reduce using rule 64
	"<="           reduce using rule 64
	"=="           reduce using rule 64


State 125

	COND -> COND . '+' COND                             (rule 42)
	COND -> COND . '-' COND                             (rule 43)
	COND -> COND . '*' COND                             (rule 44)
	COND -> COND . '/' COND                             (rule 45)
	COND -> COND . '^' COND                             (rule 46)
	COND -> COND . "AND" COND                           (rule 60)
	COND -> COND . "OR" COND                            (rule 61)
	COND -> COND "OR" COND .                            (rule 61)
	COND -> COND . '>' COND                             (rule 63)
	COND -> COND . '<' COND                             (rule 64)
	COND -> COND . "<=" COND                            (rule 65)
	COND -> COND . ">=" COND                            (rule 66)
	COND -> COND . "==" COND                            (rule 67)

	'+'            shift, and enter state 90
	'-'            shift, and enter state 91
	'*'            shift, and enter state 92
	'/'            shift, and enter state 93
	'^'            shift, and enter state 94
	')'            reduce using rule 61
	']'            reduce using rule 61
	','            reduce using rule 61
	"for"          reduce using rule 61
	"AND"          shift, and enter state 96
	"OR"           reduce using rule 61
	'<'            shift, and enter state 98
	'>'            shift, and enter state 99
	">="           shift, and enter state 100
	"<="           shift, and enter state 101
	"=="           shift, and enter state 102


State 126

	COND -> COND . '+' COND                             (rule 42)
	COND -> COND . '-' COND                             (rule 43)
	COND -> COND . '*' COND                             (rule 44)
	COND -> COND . '/' COND                             (rule 45)
	COND -> COND . '^' COND                             (rule 46)
	COND -> COND . "AND" COND                           (rule 60)
	COND -> COND "AND" COND .                           (rule 60)
	COND -> COND . "OR" COND                            (rule 61)
	COND -> COND . '>' COND                             (rule 63)
	COND -> COND . '<' COND                             (rule 64)
	COND -> COND . "<=" COND                            (rule 65)
	COND -> COND . ">=" COND                            (rule 66)
	COND -> COND . "==" COND                            (rule 67)

	'+'            shift, and enter state 90
	'-'            shift, and enter state 91
	'*'            shift, and enter state 92
	'/'            shift, and enter state 93
	'^'            shift, and enter state 94
	')'            reduce using rule 60
	']'            reduce using rule 60
	','            reduce using rule 60
	"for"          reduce using rule 60
	"AND"          reduce using rule 60
	"OR"           reduce using rule 60
	'<'            shift, and enter state 98
	'>'            shift, and enter state 99
	">="           shift, and enter state 100
	"<="           shift, and enter state 101
	"=="           shift, and enter state 102


State 127

	EM -> EM . '+' EM                                   (rule 18)
	EM -> EM . '-' EM                                   (rule 19)
	EM -> EM . '*' EM                                   (rule 20)
	EM -> EM . '/' EM                                   (rule 21)
	EM -> EM . '^' EM                                   (rule 22)
	EM -> "if" '(' COND ',' EM . ',' EM ')'             (rule 35)

	'+'            shift, and enter state 38
	'-'            shift, and enter state 39
	'*'            shift, and enter state 40
	'/'            shift, and enter state 41
	'^'            shift, and enter state 42
	','            shift, and enter state 147


State 128

	COND -> COND . '+' COND                             (rule 42)
	COND -> COND . '-' COND                             (rule 43)
	COND -> COND . '*' COND                             (rule 44)
	COND -> COND . '/' COND                             (rule 45)
	COND -> COND . '^' COND                             (rule 46)
	COND -> COND '^' COND .                             (rule 46)
	COND -> COND . "AND" COND                           (rule 60)
	COND -> COND . "OR" COND                            (rule 61)
	COND -> COND . '>' COND                             (rule 63)
	COND -> COND . '<' COND                             (rule 64)
	COND -> COND . "<=" COND                            (rule 65)
	COND -> COND . ">=" COND                            (rule 66)
	COND -> COND . "==" COND                            (rule 67)

	'+'            reduce using rule 46
	'-'            reduce using rule 46
	'*'            reduce using rule 46
	'/'            reduce using rule 46
	'^'            shift, and enter state 94
	')'            reduce using rule 46
	']'            reduce using rule 46
	','            reduce using rule 46
	"for"          reduce using rule 46
	"AND"          reduce using rule 46
	"OR"           reduce using rule 46
	'<'            reduce using rule 46
	'>'            reduce using rule 46
	">="           reduce using rule 46
	"<="           reduce using rule 46
	"=="           reduce using rule 46


State 129

	COND -> COND . '+' COND                             (rule 42)
	COND -> COND . '-' COND                             (rule 43)
	COND -> COND . '*' COND                             (rule 44)
	COND -> COND . '/' COND                             (rule 45)
	COND -> COND '/' COND .                             (rule 45)
	COND -> COND . '^' COND                             (rule 46)
	COND -> COND . "AND" COND                           (rule 60)
	COND -> COND . "OR" COND                            (rule 61)
	COND -> COND . '>' COND                             (rule 63)
	COND -> COND . '<' COND                             (rule 64)
	COND -> COND . "<=" COND                            (rule 65)
	COND -> COND . ">=" COND                            (rule 66)
	COND -> COND . "==" COND                            (rule 67)

	'+'            reduce using rule 45
	'-'            reduce using rule 45
	'*'            reduce using rule 45
	'/'            reduce using rule 45
	'^'            shift, and enter state 94
	')'            reduce using rule 45
	']'            reduce using rule 45
	','            reduce using rule 45
	"for"          reduce using rule 45
	"AND"          reduce using rule 45
	"OR"           reduce using rule 45
	'<'            reduce using rule 45
	'>'            reduce using rule 45
	">="           reduce using rule 45
	"<="           reduce using rule 45
	"=="           reduce using rule 45


State 130

	COND -> COND . '+' COND                             (rule 42)
	COND -> COND . '-' COND                             (rule 43)
	COND -> COND . '*' COND                             (rule 44)
	COND -> COND '*' COND .                             (rule 44)
	COND -> COND . '/' COND                             (rule 45)
	COND -> COND . '^' COND                             (rule 46)
	COND -> COND . "AND" COND                           (rule 60)
	COND -> COND . "OR" COND                            (rule 61)
	COND -> COND . '>' COND                             (rule 63)
	COND -> COND . '<' COND                             (rule 64)
	COND -> COND . "<=" COND                            (rule 65)
	COND -> COND . ">=" COND                            (rule 66)
	COND -> COND . "==" COND                            (rule 67)

	'+'            reduce using rule 44
	'-'            reduce using rule 44
	'*'            reduce using rule 44
	'/'            reduce using rule 44
	'^'            shift, and enter state 94
	')'            reduce using rule 44
	']'            reduce using rule 44
	','            reduce using rule 44
	"for"          reduce using rule 44
	"AND"          reduce using rule 44
	"OR"           reduce using rule 44
	'<'            reduce using rule 44
	'>'            reduce using rule 44
	">="           reduce using rule 44
	"<="           reduce using rule 44
	"=="           reduce using rule 44


State 131

	COND -> COND . '+' COND                             (rule 42)
	COND -> COND . '-' COND                             (rule 43)
	COND -> COND '-' COND .                             (rule 43)
	COND -> COND . '*' COND                             (rule 44)
	COND -> COND . '/' COND                             (rule 45)
	COND -> COND . '^' COND                             (rule 46)
	COND -> COND . "AND" COND                           (rule 60)
	COND -> COND . "OR" COND                            (rule 61)
	COND -> COND . '>' COND                             (rule 63)
	COND -> COND . '<' COND                             (rule 64)
	COND -> COND . "<=" COND                            (rule 65)
	COND -> COND . ">=" COND                            (rule 66)
	COND -> COND . "==" COND                            (rule 67)

	'+'            reduce using rule 43
	'-'            reduce using rule 43
	'*'            shift, and enter state 92
	'/'            shift, and enter state 93
	'^'            shift, and enter state 94
	')'            reduce using rule 43
	']'            reduce using rule 43
	','            reduce using rule 43
	"for"          reduce using rule 43
	"AND"          reduce using rule 43
	"OR"           reduce using rule 43
	'<'            reduce using rule 43
	'>'            reduce using rule 43
	">="           reduce using rule 43
	"<="           reduce using rule 43
	"=="           reduce using rule 43


State 132

	COND -> COND . '+' COND                             (rule 42)
	COND -> COND '+' COND .                             (rule 42)
	COND -> COND . '-' COND                             (rule 43)
	COND -> COND . '*' COND                             (rule 44)
	COND -> COND . '/' COND                             (rule 45)
	COND -> COND . '^' COND                             (rule 46)
	COND -> COND . "AND" COND                           (rule 60)
	COND -> COND . "OR" COND                            (rule 61)
	COND -> COND . '>' COND                             (rule 63)
	COND -> COND . '<' COND                             (rule 64)
	COND -> COND . "<=" COND                            (rule 65)
	COND -> COND . ">=" COND                            (rule 66)
	COND -> COND . "==" COND                            (rule 67)

	'+'            reduce using rule 42
	'-'            reduce using rule 42
	'*'            shift, and enter state 92
	'/'            shift, and enter state 93
	'^'            shift, and enter state 94
	')'            reduce using rule 42
	']'            reduce using rule 42
	','            reduce using rule 42
	"for"          reduce using rule 42
	"AND"          reduce using rule 42
	"OR"           reduce using rule 42
	'<'            reduce using rule 42
	'>'            reduce using rule 42
	">="           reduce using rule 42
	"<="           reduce using rule 42
	"=="           reduce using rule 42


State 133

	COND -> COND . '+' COND                             (rule 42)
	COND -> COND . '-' COND                             (rule 43)
	COND -> COND . '*' COND                             (rule 44)
	COND -> COND . '/' COND                             (rule 45)
	COND -> COND . '^' COND                             (rule 46)
	COND -> funcion '(' COND . ')'                      (rule 52)
	COND -> COND . "AND" COND                           (rule 60)
	COND -> COND . "OR" COND                            (rule 61)
	COND -> COND . '>' COND                             (rule 63)
	COND -> COND . '<' COND                             (rule 64)
	COND -> COND . "<=" COND                            (rule 65)
	COND -> COND . ">=" COND                            (rule 66)
	COND -> COND . "==" COND                            (rule 67)

	'+'            shift, and enter state 90
	'-'            shift, and enter state 91
	'*'            shift, and enter state 92
	'/'            shift, and enter state 93
	'^'            shift, and enter state 94
	')'            shift, and enter state 146
	"AND"          shift, and enter state 96
	"OR"           shift, and enter state 97
	'<'            shift, and enter state 98
	'>'            shift, and enter state 99
	">="           shift, and enter state 100
	"<="           shift, and enter state 101
	"=="           shift, and enter state 102


State 134

	COND -> '(' COND ')' .                              (rule 48)

	'+'            reduce using rule 48
	'-'            reduce using rule 48
	'*'            reduce using rule 48
	'/'            reduce using rule 48
	'^'            reduce using rule 48
	')'            reduce using rule 48
	']'            reduce using rule 48
	','            reduce using rule 48
	"for"          reduce using rule 48
	"AND"          reduce using rule 48
	"OR"           reduce using rule 48
	'<'            reduce using rule 48
	'>'            reduce using rule 48
	">="           reduce using rule 48
	"<="           reduce using rule 48
	"=="           reduce using rule 48


State 135

	COND -> '[' COND "for" . identificador "in" COND ']'    (rule 58)

	identificador  shift, and enter state 145


State 136

	COND -> '[' SECUENCIA_COND ']' .                    (rule 56)

	'+'            reduce using rule 56
	'-'            reduce using rule 56
	'*'            reduce using rule 56
	'/'            reduce using rule 56
	'^'            reduce using rule 56
	')'            reduce using rule 56
	']'            reduce using rule 56
	','            reduce using rule 56
	"for"          reduce using rule 56
	"AND"          reduce using rule 56
	"OR"           reduce using rule 56
	'<'            reduce using rule 56
	'>'            reduce using rule 56
	">="           reduce using rule 56
	"<="           reduce using rule 56
	"=="           reduce using rule 56


State 137

	SECUENCIA_COND -> SECUENCIA_COND ',' . COND         (rule 39)

	'-'            shift, and enter state 67
	int            shift, and enter state 68
	real           shift, and enter state 69
	constmat       shift, and enter state 70
	funcion        shift, and enter state 71
	'('            shift, and enter state 72
	'['            shift, and enter state 73
	"range"        shift, and enter state 74
	"if"           shift, and enter state 75
	"NOT"          shift, and enter state 76
	identificador  shift, and enter state 77

	COND           goto state 144

State 138

	COND -> COND . '+' COND                             (rule 42)
	COND -> COND . '-' COND                             (rule 43)
	COND -> COND . '*' COND                             (rule 44)
	COND -> COND . '/' COND                             (rule 45)
	COND -> COND . '^' COND                             (rule 46)
	COND -> "range" '(' COND . ',' COND ')'             (rule 57)
	COND -> COND . "AND" COND                           (rule 60)
	COND -> COND . "OR" COND                            (rule 61)
	COND -> COND . '>' COND                             (rule 63)
	COND -> COND . '<' COND                             (rule 64)
	COND -> COND . "<=" COND                            (rule 65)
	COND -> COND . ">=" COND                            (rule 66)
	COND -> COND . "==" COND                            (rule 67)

	'+'            shift, and enter state 90
	'-'            shift, and enter state 91
	'*'            shift, and enter state 92
	'/'            shift, and enter state 93
	'^'            shift, and enter state 94
	','            shift, and enter state 143
	"AND"          shift, and enter state 96
	"OR"           shift, and enter state 97
	'<'            shift, and enter state 98
	'>'            shift, and enter state 99
	">="           shift, and enter state 100
	"<="           shift, and enter state 101
	"=="           shift, and enter state 102


State 139

	COND -> COND . '+' COND                             (rule 42)
	COND -> COND . '-' COND                             (rule 43)
	COND -> COND . '*' COND                             (rule 44)
	COND -> COND . '/' COND                             (rule 45)
	COND -> COND . '^' COND                             (rule 46)
	COND -> "if" '(' COND . ',' COND ',' COND ')'       (rule 59)
	COND -> COND . "AND" COND                           (rule 60)
	COND -> COND . "OR" COND                            (rule 61)
	COND -> COND . '>' COND                             (rule 63)
	COND -> COND . '<' COND                             (rule 64)
	COND -> COND . "<=" COND                            (rule 65)
	COND -> COND . ">=" COND                            (rule 66)
	COND -> COND . "==" COND                            (rule 67)

	'+'            shift, and enter state 90
	'-'            shift, and enter state 91
	'*'            shift, and enter state 92
	'/'            shift, and enter state 93
	'^'            shift, and enter state 94
	','            shift, and enter state 142
	"AND"          shift, and enter state 96
	"OR"           shift, and enter state 97
	'<'            shift, and enter state 98
	'>'            shift, and enter state 99
	">="           shift, and enter state 100
	"<="           shift, and enter state 101
	"=="           shift, and enter state 102


State 140

	COND -> COND . '+' COND                             (rule 42)
	COND -> COND . '-' COND                             (rule 43)
	COND -> COND . '*' COND                             (rule 44)
	COND -> COND . '/' COND                             (rule 45)
	COND -> COND . '^' COND                             (rule 46)
	COND -> identificador '(' COND . ')'                (rule 53)
	COND -> COND . "AND" COND                           (rule 60)
	COND -> COND . "OR" COND                            (rule 61)
	COND -> COND . '>' COND                             (rule 63)
	COND -> COND . '<' COND                             (rule 64)
	COND -> COND . "<=" COND                            (rule 65)
	COND -> COND . ">=" COND                            (rule 66)
	COND -> COND . "==" COND                            (rule 67)

	'+'            shift, and enter state 90
	'-'            shift, and enter state 91
	'*'            shift, and enter state 92
	'/'            shift, and enter state 93
	'^'            shift, and enter state 94
	')'            shift, and enter state 141
	"AND"          shift, and enter state 96
	"OR"           shift, and enter state 97
	'<'            shift, and enter state 98
	'>'            shift, and enter state 99
	">="           shift, and enter state 100
	"<="           shift, and enter state 101
	"=="           shift, and enter state 102


State 141

	COND -> identificador '(' COND ')' .                (rule 53)

	'+'            reduce using rule 53
	'-'            reduce using rule 53
	'*'            reduce using rule 53
	'/'            reduce using rule 53
	'^'            reduce using rule 53
	')'            reduce using rule 53
	']'            reduce using rule 53
	','            reduce using rule 53
	"for"          reduce using rule 53
	"AND"          reduce using rule 53
	"OR"           reduce using rule 53
	'<'            reduce using rule 53
	'>'            reduce using rule 53
	">="           reduce using rule 53
	"<="           reduce using rule 53
	"=="           reduce using rule 53


State 142

	COND -> "if" '(' COND ',' . COND ',' COND ')'       (rule 59)

	'-'            shift, and enter state 67
	int            shift, and enter state 68
	real           shift, and enter state 69
	constmat       shift, and enter state 70
	funcion        shift, and enter state 71
	'('            shift, and enter state 72
	'['            shift, and enter state 73
	"range"        shift, and enter state 74
	"if"           shift, and enter state 75
	"NOT"          shift, and enter state 76
	identificador  shift, and enter state 77

	COND           goto state 161

State 143

	COND -> "range" '(' COND ',' . COND ')'             (rule 57)

	'-'            shift, and enter state 67
	int            shift, and enter state 68
	real           shift, and enter state 69
	constmat       shift, and enter state 70
	funcion        shift, and enter state 71
	'('            shift, and enter state 72
	'['            shift, and enter state 73
	"range"        shift, and enter state 74
	"if"           shift, and enter state 75
	"NOT"          shift, and enter state 76
	identificador  shift, and enter state 77

	COND           goto state 160

State 144

	SECUENCIA_COND -> SECUENCIA_COND ',' COND .         (rule 39)
	COND -> COND . '+' COND                             (rule 42)
	COND -> COND . '-' COND                             (rule 43)
	COND -> COND . '*' COND                             (rule 44)
	COND -> COND . '/' COND                             (rule 45)
	COND -> COND . '^' COND                             (rule 46)
	COND -> COND . "AND" COND                           (rule 60)
	COND -> COND . "OR" COND                            (rule 61)
	COND -> COND . '>' COND                             (rule 63)
	COND -> COND . '<' COND                             (rule 64)
	COND -> COND . "<=" COND                            (rule 65)
	COND -> COND . ">=" COND                            (rule 66)
	COND -> COND . "==" COND                            (rule 67)

	'+'            shift, and enter state 90
	'-'            shift, and enter state 91
	'*'            shift, and enter state 92
	'/'            shift, and enter state 93
	'^'            shift, and enter state 94
	']'            reduce using rule 39
	','            reduce using rule 39
	"AND"          shift, and enter state 96
	"OR"           shift, and enter state 97
	'<'            shift, and enter state 98
	'>'            shift, and enter state 99
	">="           shift, and enter state 100
	"<="           shift, and enter state 101
	"=="           shift, and enter state 102


State 145

	COND -> '[' COND "for" identificador . "in" COND ']'    (rule 58)

	"in"           shift, and enter state 159


State 146

	COND -> funcion '(' COND ')' .                      (rule 52)

	'+'            reduce using rule 52
	'-'            reduce using rule 52
	'*'            reduce using rule 52
	'/'            reduce using rule 52
	'^'            reduce using rule 52
	')'            reduce using rule 52
	']'            reduce using rule 52
	','            reduce using rule 52
	"for"          reduce using rule 52
	"AND"          reduce using rule 52
	"OR"           reduce using rule 52
	'<'            reduce using rule 52
	'>'            reduce using rule 52
	">="           reduce using rule 52
	"<="           reduce using rule 52
	"=="           reduce using rule 52


State 147

	EM -> "if" '(' COND ',' EM ',' . EM ')'             (rule 35)

	'-'            shift, and enter state 19
	int            shift, and enter state 20
	real           shift, and enter state 21
	constmat       shift, and enter state 22
	funcion        shift, and enter state 23
	'('            shift, and enter state 24
	'['            shift, and enter state 25
	"range"        shift, and enter state 26
	"if"           shift, and enter state 27
	identificador  shift, and enter state 28

	EM             goto state 158

State 148

	EM -> "range" '(' EM ',' EM ')' .                   (rule 33)

	'+'            reduce using rule 33
	'-'            reduce using rule 33
	'*'            reduce using rule 33
	'/'            reduce using rule 33
	'^'            reduce using rule 33
	')'            reduce using rule 33
	']'            reduce using rule 33
	','            reduce using rule 33
	"for"          reduce using rule 33
	';'            reduce using rule 33
	"with"         reduce using rule 33
	"plot"         reduce using rule 33
	"endfor"       reduce using rule 33
	"step"         reduce using rule 33
	"push_back"    reduce using rule 33
	identificador  reduce using rule 33
	%eof           reduce using rule 33


State 149

	EM -> EM . '+' EM                                   (rule 18)
	EM -> EM . '-' EM                                   (rule 19)
	EM -> EM . '*' EM                                   (rule 20)
	EM -> EM . '/' EM                                   (rule 21)
	EM -> EM . '^' EM                                   (rule 22)
	EM -> '[' EM "for" identificador "in" EM . ']'      (rule 34)

	'+'            shift, and enter state 38
	'-'            shift, and enter state 39
	'*'            shift, and enter state 40
	'/'            shift, and enter state 41
	'^'            shift, and enter state 42
	']'            shift, and enter state 157


State 150

	INSTR -> "plot" EM ',' EG "with" '[' SECUENCIA_ESTILO . ']'    (rule 12)
	SECUENCIA_ESTILO -> SECUENCIA_ESTILO . ',' estilo    (rule 41)

	']'            shift, and enter state 155
	','            shift, and enter state 156


State 151

	INSTR -> "plot" EM ',' EG "with" '[' ']' .          (rule 11)

	';'            reduce using rule 11
	"endfor"       reduce using rule 11
	%eof           reduce using rule 11


State 152

	SECUENCIA_ESTILO -> estilo .                        (rule 40)

	']'            reduce using rule 40
	','            reduce using rule 40


State 153

	CICLO -> "for" identificador "in" EM "step" EM SECUENCIA_1 . "endfor"    (rule 17)

	"endfor"       shift, and enter state 154


State 154

	CICLO -> "for" identificador "in" EM "step" EM SECUENCIA_1 "endfor" .    (rule 17)

	"for"          reduce using rule 17
	"plot"         reduce using rule 17
	"endfor"       reduce using rule 17
	"push_back"    reduce using rule 17
	identificador  reduce using rule 17
	%eof           reduce using rule 17


State 155

	INSTR -> "plot" EM ',' EG "with" '[' SECUENCIA_ESTILO ']' .    (rule 12)

	';'            reduce using rule 12
	"endfor"       reduce using rule 12
	%eof           reduce using rule 12


State 156

	SECUENCIA_ESTILO -> SECUENCIA_ESTILO ',' . estilo    (rule 41)

	estilo         shift, and enter state 166


State 157

	EM -> '[' EM "for" identificador "in" EM ']' .      (rule 34)

	'+'            reduce using rule 34
	'-'            reduce using rule 34
	'*'            reduce using rule 34
	'/'            reduce using rule 34
	'^'            reduce using rule 34
	')'            reduce using rule 34
	']'            reduce using rule 34
	','            reduce using rule 34
	"for"          reduce using rule 34
	';'            reduce using rule 34
	"with"         reduce using rule 34
	"plot"         reduce using rule 34
	"endfor"       reduce using rule 34
	"step"         reduce using rule 34
	"push_back"    reduce using rule 34
	identificador  reduce using rule 34
	%eof           reduce using rule 34


State 158

	EM -> EM . '+' EM                                   (rule 18)
	EM -> EM . '-' EM                                   (rule 19)
	EM -> EM . '*' EM                                   (rule 20)
	EM -> EM . '/' EM                                   (rule 21)
	EM -> EM . '^' EM                                   (rule 22)
	EM -> "if" '(' COND ',' EM ',' EM . ')'             (rule 35)

	'+'            shift, and enter state 38
	'-'            shift, and enter state 39
	'*'            shift, and enter state 40
	'/'            shift, and enter state 41
	'^'            shift, and enter state 42
	')'            shift, and enter state 165


State 159

	COND -> '[' COND "for" identificador "in" . COND ']'    (rule 58)

	'-'            shift, and enter state 67
	int            shift, and enter state 68
	real           shift, and enter state 69
	constmat       shift, and enter state 70
	funcion        shift, and enter state 71
	'('            shift, and enter state 72
	'['            shift, and enter state 73
	"range"        shift, and enter state 74
	"if"           shift, and enter state 75
	"NOT"          shift, and enter state 76
	identificador  shift, and enter state 77

	COND           goto state 164

State 160

	COND -> COND . '+' COND                             (rule 42)
	COND -> COND . '-' COND                             (rule 43)
	COND -> COND . '*' COND                             (rule 44)
	COND -> COND . '/' COND                             (rule 45)
	COND -> COND . '^' COND                             (rule 46)
	COND -> "range" '(' COND ',' COND . ')'             (rule 57)
	COND -> COND . "AND" COND                           (rule 60)
	COND -> COND . "OR" COND                            (rule 61)
	COND -> COND . '>' COND                             (rule 63)
	COND -> COND . '<' COND                             (rule 64)
	COND -> COND . "<=" COND                            (rule 65)
	COND -> COND . ">=" COND                            (rule 66)
	COND -> COND . "==" COND                            (rule 67)

	'+'            shift, and enter state 90
	'-'            shift, and enter state 91
	'*'            shift, and enter state 92
	'/'            shift, and enter state 93
	'^'            shift, and enter state 94
	')'            shift, and enter state 163
	"AND"          shift, and enter state 96
	"OR"           shift, and enter state 97
	'<'            shift, and enter state 98
	'>'            shift, and enter state 99
	">="           shift, and enter state 100
	"<="           shift, and enter state 101
	"=="           shift, and enter state 102


State 161

	COND -> COND . '+' COND                             (rule 42)
	COND -> COND . '-' COND                             (rule 43)
	COND -> COND . '*' COND                             (rule 44)
	COND -> COND . '/' COND                             (rule 45)
	COND -> COND . '^' COND                             (rule 46)
	COND -> "if" '(' COND ',' COND . ',' COND ')'       (rule 59)
	COND -> COND . "AND" COND                           (rule 60)
	COND -> COND . "OR" COND                            (rule 61)
	COND -> COND . '>' COND                             (rule 63)
	COND -> COND . '<' COND                             (rule 64)
	COND -> COND . "<=" COND                            (rule 65)
	COND -> COND . ">=" COND                            (rule 66)
	COND -> COND . "==" COND                            (rule 67)

	'+'            shift, and enter state 90
	'-'            shift, and enter state 91
	'*'            shift, and enter state 92
	'/'            shift, and enter state 93
	'^'            shift, and enter state 94
	','            shift, and enter state 162
	"AND"          shift, and enter state 96
	"OR"           shift, and enter state 97
	'<'            shift, and enter state 98
	'>'            shift, and enter state 99
	">="           shift, and enter state 100
	"<="           shift, and enter state 101
	"=="           shift, and enter state 102


State 162

	COND -> "if" '(' COND ',' COND ',' . COND ')'       (rule 59)

	'-'            shift, and enter state 67
	int            shift, and enter state 68
	real           shift, and enter state 69
	constmat       shift, and enter state 70
	funcion        shift, and enter state 71
	'('            shift, and enter state 72
	'['            shift, and enter state 73
	"range"        shift, and enter state 74
	"if"           shift, and enter state 75
	"NOT"          shift, and enter state 76
	identificador  shift, and enter state 77

	COND           goto state 168

State 163

	COND -> "range" '(' COND ',' COND ')' .             (rule 57)

	'+'            reduce using rule 57
	'-'            reduce using rule 57
	'*'            reduce using rule 57
	'/'            reduce using rule 57
	'^'            reduce using rule 57
	')'            reduce using rule 57
	']'            reduce using rule 57
	','            reduce using rule 57
	"for"          reduce using rule 57
	"AND"          reduce using rule 57
	"OR"           reduce using rule 57
	'<'            reduce using rule 57
	'>'            reduce using rule 57
	">="           reduce using rule 57
	"<="           reduce using rule 57
	"=="           reduce using rule 57


State 164

	COND -> COND . '+' COND                             (rule 42)
	COND -> COND . '-' COND                             (rule 43)
	COND -> COND . '*' COND                             (rule 44)
	COND -> COND . '/' COND                             (rule 45)
	COND -> COND . '^' COND                             (rule 46)
	COND -> '[' COND "for" identificador "in" COND . ']'    (rule 58)
	COND -> COND . "AND" COND                           (rule 60)
	COND -> COND . "OR" COND                            (rule 61)
	COND -> COND . '>' COND                             (rule 63)
	COND -> COND . '<' COND                             (rule 64)
	COND -> COND . "<=" COND                            (rule 65)
	COND -> COND . ">=" COND                            (rule 66)
	COND -> COND . "==" COND                            (rule 67)

	'+'            shift, and enter state 90
	'-'            shift, and enter state 91
	'*'            shift, and enter state 92
	'/'            shift, and enter state 93
	'^'            shift, and enter state 94
	']'            shift, and enter state 167
	"AND"          shift, and enter state 96
	"OR"           shift, and enter state 97
	'<'            shift, and enter state 98
	'>'            shift, and enter state 99
	">="           shift, and enter state 100
	"<="           shift, and enter state 101
	"=="           shift, and enter state 102


State 165

	EM -> "if" '(' COND ',' EM ',' EM ')' .             (rule 35)

	'+'            reduce using rule 35
	'-'            reduce using rule 35
	'*'            reduce using rule 35
	'/'            reduce using rule 35
	'^'            reduce using rule 35
	')'            reduce using rule 35
	']'            reduce using rule 35
	','            reduce using rule 35
	"for"          reduce using rule 35
	';'            reduce using rule 35
	"with"         reduce using rule 35
	"plot"         reduce using rule 35
	"endfor"       reduce using rule 35
	"step"         reduce using rule 35
	"push_back"    reduce using rule 35
	identificador  reduce using rule 35
	%eof           reduce using rule 35


State 166

	SECUENCIA_ESTILO -> SECUENCIA_ESTILO ',' estilo .    (rule 41)

	']'            reduce using rule 41
	','            reduce using rule 41


State 167

	COND -> '[' COND "for" identificador "in" COND ']' .    (rule 58)

	'+'            reduce using rule 58
	'-'            reduce using rule 58
	'*'            reduce using rule 58
	'/'            reduce using rule 58
	'^'            reduce using rule 58
	')'            reduce using rule 58
	']'            reduce using rule 58
	','            reduce using rule 58
	"for"          reduce using rule 58
	"AND"          reduce using rule 58
	"OR"           reduce using rule 58
	'<'            reduce using rule 58
	'>'            reduce using rule 58
	">="           reduce using rule 58
	"<="           reduce using rule 58
	"=="           reduce using rule 58


State 168

	COND -> COND . '+' COND                             (rule 42)
	COND -> COND . '-' COND                             (rule 43)
	COND -> COND . '*' COND                             (rule 44)
	COND -> COND . '/' COND                             (rule 45)
	COND -> COND . '^' COND                             (rule 46)
	COND -> "if" '(' COND ',' COND ',' COND . ')'       (rule 59)
	COND -> COND . "AND" COND                           (rule 60)
	COND -> COND . "OR" COND                            (rule 61)
	COND -> COND . '>' COND                             (rule 63)
	COND -> COND . '<' COND                             (rule 64)
	COND -> COND . "<=" COND                            (rule 65)
	COND -> COND . ">=" COND                            (rule 66)
	COND -> COND . "==" COND                            (rule 67)

	'+'            shift, and enter state 90
	'-'            shift, and enter state 91
	'*'            shift, and enter state 92
	'/'            shift, and enter state 93
	'^'            shift, and enter state 94
	')'            shift, and enter state 169
	"AND"          shift, and enter state 96
	"OR"           shift, and enter state 97
	'<'            shift, and enter state 98
	'>'            shift, and enter state 99
	">="           shift, and enter state 100
	"<="           shift, and enter state 101
	"=="           shift, and enter state 102


State 169

	COND -> "if" '(' COND ',' COND ',' COND ')' .       (rule 59)

	'+'            reduce using rule 59
	'-'            reduce using rule 59
	'*'            reduce using rule 59
	'/'            reduce using rule 59
	'^'            reduce using rule 59
	')'            reduce using rule 59
	']'            reduce using rule 59
	','            reduce using rule 59
	"for"          reduce using rule 59
	"AND"          reduce using rule 59
	"OR"           reduce using rule 59
	'<'            reduce using rule 59
	'>'            reduce using rule 59
	">="           reduce using rule 59
	"<="           reduce using rule 59
	"=="           reduce using rule 59


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 70
Number of terminals: 36
Number of non-terminals: 11
Number of states: 170
