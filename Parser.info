-----------------------------------------------------------------------------
Info file generated by Happy Version 1.18.4 from Parser.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> SEC_INSTR                          (0)
	SEC_INSTR -> INSTR ';'                             (1)
	SEC_INSTR -> CICLO                                 (2)
	SEC_INSTR -> SEC_INSTR INSTR ';'                   (3)
	SEC_INSTR2 -> INSTR                                (4)
	SEC_INSTR2 -> SEC_INSTR2 ';' INSTR                 (5)
	INSTR -> identificador '(' identificador ')' '=' EM   (6)
	INSTR -> identificador '=' EM                      (7)
	INSTR -> "plot" EM ',' EG "with" '[' ']'           (8)
	INSTR -> "plot" EM ',' EG "with" '[' SECUENCIA_ESTILO ']'   (9)
	INSTR -> "plot" EM ',' EG "with" estilo            (10)
	INSTR -> "plot" EM ',' EG                          (11)
	INSTR -> "push_back" '(' identificador ',' EM ')'   (12)
	CICLO -> "for" identificador "in" EM SEC_INSTR2 "endfor"   (13)
	CICLO -> "for" identificador "in" EM "step" int SEC_INSTR2 "endfor"   (14)
	SECUENCIA_ESTILO -> SECUENCIA_ESTILO ',' estilo    (15)
	SECUENCIA_ESTILO -> estilo                         (16)
	EM -> EM '+' EM                                    (17)
	EM -> EM '-' EM                                    (18)
	EM -> EM '*' EM                                    (19)
	EM -> EM '/' EM                                    (20)
	EM -> EM '^' EM                                    (21)
	EM -> '-' EM                                       (22)
	EM -> '(' EM ')'                                   (23)
	EM -> int                                          (24)
	EM -> real                                         (25)
	EM -> constmat                                     (26)
	EM -> funcion '(' EM ')'                           (27)
	EM -> identificador '(' EM ')'                     (28)
	EM -> identificador                                (29)
	EM -> '[' ']'                                      (30)
	EM -> '[' SECUENCIA_EM ']'                         (31)
	EM -> "range" '(' EM ',' EM ')'                    (32)
	EM -> '[' EM "for" identificador "in" EM ']'       (33)
	EM -> "if" '(' COND ',' EM ',' EM ')'              (34)
	SECUENCIA_EM -> EM                                 (35)
	SECUENCIA_EM -> SECUENCIA_EM ',' EM                (36)
	COND -> EM                                         (37)
	COND -> COND "AND" COND                            (38)
	COND -> COND "OR" COND                             (39)
	COND -> "NOT" COND                                 (40)
	COND -> COND '>' COND                              (41)
	COND -> COND '<' COND                              (42)
	COND -> COND "<=" COND                             (43)
	COND -> COND ">=" COND                             (44)
	COND -> COND "==" COND                             (45)
	EG -> EM                                           (46)
	EG -> '\'' identificador '\''                      (47)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'+'            { TkMas }
	'-'            { TkMenos }
	'*'            { TkPor }
	'/'            { TkEntre }
	'^'            { TkElevado }
	int            { TkEntero $$ }
	real           { TkReal $$ }
	constmat       { TkConstanteMat $$ }
	funcion        { TkFuncion $$ }
	'('            { TkParentesisI }
	')'            { TkParentesisD }
	'['            { TkCorcheteI }
	']'            { TkCorcheteD }
	','            { TkComa }
	"range"        { TkRango }
	"for"          { TkFor }
	"in"           { TkIn }
	"if"           { TkIf }
	"AND"          { TkAnd }
	"OR"           { TkOr }
	"NOT"          { TkNot }
	'<'            { TkMenor }
	'>'            { TkMayor }
	">="           { TkMayorIg }
	"<="           { TkMenorIg }
	"=="           { TkIgual }
	'\''           { TkComilla }
	';'            { TkPuntoYComa }
	'='            { TkAsignacion }
	"with"         { TkWith }
	"plot"         { TkPlot }
	"endfor"       { TkEndFor }
	"step"         { TkStep }
	"push_back"    { TkPushBack }
	estilo         { TkEstilo $$ }
	identificador  { TkIdentificador $$ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	SEC_INSTR       rules 1, 2, 3
	SEC_INSTR2      rules 4, 5
	INSTR           rules 6, 7, 8, 9, 10, 11, 12
	CICLO           rules 13, 14
	SECUENCIA_ESTILO rules 15, 16
	EM              rules 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34
	SECUENCIA_EM    rules 35, 36
	COND            rules 37, 38, 39, 40, 41, 42, 43, 44, 45
	EG              rules 46, 47

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	"for"          shift, and enter state 8
	"plot"         shift, and enter state 3
	"push_back"    shift, and enter state 4
	identificador  shift, and enter state 5

	SEC_INSTR      goto state 6
	INSTR          goto state 2
	CICLO          goto state 7

State 1


	"plot"         shift, and enter state 3
	"push_back"    shift, and enter state 4
	identificador  shift, and enter state 5

	INSTR          goto state 2

State 2

	SEC_INSTR -> INSTR . ';'                            (rule 1)

	';'            shift, and enter state 25


State 3

	INSTR -> "plot" . EM ',' EG "with" '[' ']'          (rule 8)
	INSTR -> "plot" . EM ',' EG "with" '[' SECUENCIA_ESTILO ']'    (rule 9)
	INSTR -> "plot" . EM ',' EG "with" estilo           (rule 10)
	INSTR -> "plot" . EM ',' EG                         (rule 11)

	'-'            shift, and enter state 15
	int            shift, and enter state 16
	real           shift, and enter state 17
	constmat       shift, and enter state 18
	funcion        shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	"range"        shift, and enter state 22
	"if"           shift, and enter state 23
	identificador  shift, and enter state 24

	EM             goto state 14

State 4

	INSTR -> "push_back" . '(' identificador ',' EM ')'    (rule 12)

	'('            shift, and enter state 13


State 5

	INSTR -> identificador . '(' identificador ')' '=' EM    (rule 6)
	INSTR -> identificador . '=' EM                     (rule 7)

	'('            shift, and enter state 11
	'='            shift, and enter state 12


State 6

	%start_parse -> SEC_INSTR .                         (rule 0)
	SEC_INSTR -> SEC_INSTR . INSTR ';'                  (rule 3)

	"plot"         shift, and enter state 3
	"push_back"    shift, and enter state 4
	identificador  shift, and enter state 5
	%eof           accept

	INSTR          goto state 10

State 7

	SEC_INSTR -> CICLO .                                (rule 2)

	"plot"         reduce using rule 2
	"push_back"    reduce using rule 2
	identificador  reduce using rule 2
	%eof           reduce using rule 2


State 8

	CICLO -> "for" . identificador "in" EM SEC_INSTR2 "endfor"    (rule 13)
	CICLO -> "for" . identificador "in" EM "step" int SEC_INSTR2 "endfor"    (rule 14)

	identificador  shift, and enter state 9


State 9

	CICLO -> "for" identificador . "in" EM SEC_INSTR2 "endfor"    (rule 13)
	CICLO -> "for" identificador . "in" EM "step" int SEC_INSTR2 "endfor"    (rule 14)

	"in"           shift, and enter state 45


State 10

	SEC_INSTR -> SEC_INSTR INSTR . ';'                  (rule 3)

	';'            shift, and enter state 44


State 11

	INSTR -> identificador '(' . identificador ')' '=' EM    (rule 6)

	identificador  shift, and enter state 43


State 12

	INSTR -> identificador '=' . EM                     (rule 7)

	'-'            shift, and enter state 15
	int            shift, and enter state 16
	real           shift, and enter state 17
	constmat       shift, and enter state 18
	funcion        shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	"range"        shift, and enter state 22
	"if"           shift, and enter state 23
	identificador  shift, and enter state 24

	EM             goto state 42

State 13

	INSTR -> "push_back" '(' . identificador ',' EM ')'    (rule 12)

	identificador  shift, and enter state 41


State 14

	INSTR -> "plot" EM . ',' EG "with" '[' ']'          (rule 8)
	INSTR -> "plot" EM . ',' EG "with" '[' SECUENCIA_ESTILO ']'    (rule 9)
	INSTR -> "plot" EM . ',' EG "with" estilo           (rule 10)
	INSTR -> "plot" EM . ',' EG                         (rule 11)
	EM -> EM . '+' EM                                   (rule 17)
	EM -> EM . '-' EM                                   (rule 18)
	EM -> EM . '*' EM                                   (rule 19)
	EM -> EM . '/' EM                                   (rule 20)
	EM -> EM . '^' EM                                   (rule 21)

	'+'            shift, and enter state 35
	'-'            shift, and enter state 36
	'*'            shift, and enter state 37
	'/'            shift, and enter state 38
	'^'            shift, and enter state 39
	','            shift, and enter state 40


State 15

	EM -> '-' . EM                                      (rule 22)

	'-'            shift, and enter state 15
	int            shift, and enter state 16
	real           shift, and enter state 17
	constmat       shift, and enter state 18
	funcion        shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	"range"        shift, and enter state 22
	"if"           shift, and enter state 23
	identificador  shift, and enter state 24

	EM             goto state 34

State 16

	EM -> int .                                         (rule 24)

	'+'            reduce using rule 24
	'-'            reduce using rule 24
	'*'            reduce using rule 24
	'/'            reduce using rule 24
	'^'            reduce using rule 24
	')'            reduce using rule 24
	']'            reduce using rule 24
	','            reduce using rule 24
	"for"          reduce using rule 24
	"AND"          reduce using rule 24
	"OR"           reduce using rule 24
	'<'            reduce using rule 24
	'>'            reduce using rule 24
	">="           reduce using rule 24
	"<="           reduce using rule 24
	"=="           reduce using rule 24
	';'            reduce using rule 24
	"with"         reduce using rule 24
	"plot"         reduce using rule 24
	"endfor"       reduce using rule 24
	"step"         reduce using rule 24
	"push_back"    reduce using rule 24
	identificador  reduce using rule 24


State 17

	EM -> real .                                        (rule 25)

	'+'            reduce using rule 25
	'-'            reduce using rule 25
	'*'            reduce using rule 25
	'/'            reduce using rule 25
	'^'            reduce using rule 25
	')'            reduce using rule 25
	']'            reduce using rule 25
	','            reduce using rule 25
	"for"          reduce using rule 25
	"AND"          reduce using rule 25
	"OR"           reduce using rule 25
	'<'            reduce using rule 25
	'>'            reduce using rule 25
	">="           reduce using rule 25
	"<="           reduce using rule 25
	"=="           reduce using rule 25
	';'            reduce using rule 25
	"with"         reduce using rule 25
	"plot"         reduce using rule 25
	"endfor"       reduce using rule 25
	"step"         reduce using rule 25
	"push_back"    reduce using rule 25
	identificador  reduce using rule 25


State 18

	EM -> constmat .                                    (rule 26)

	'+'            reduce using rule 26
	'-'            reduce using rule 26
	'*'            reduce using rule 26
	'/'            reduce using rule 26
	'^'            reduce using rule 26
	')'            reduce using rule 26
	']'            reduce using rule 26
	','            reduce using rule 26
	"for"          reduce using rule 26
	"AND"          reduce using rule 26
	"OR"           reduce using rule 26
	'<'            reduce using rule 26
	'>'            reduce using rule 26
	">="           reduce using rule 26
	"<="           reduce using rule 26
	"=="           reduce using rule 26
	';'            reduce using rule 26
	"with"         reduce using rule 26
	"plot"         reduce using rule 26
	"endfor"       reduce using rule 26
	"step"         reduce using rule 26
	"push_back"    reduce using rule 26
	identificador  reduce using rule 26


State 19

	EM -> funcion . '(' EM ')'                          (rule 27)

	'('            shift, and enter state 33


State 20

	EM -> '(' . EM ')'                                  (rule 23)

	'-'            shift, and enter state 15
	int            shift, and enter state 16
	real           shift, and enter state 17
	constmat       shift, and enter state 18
	funcion        shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	"range"        shift, and enter state 22
	"if"           shift, and enter state 23
	identificador  shift, and enter state 24

	EM             goto state 32

State 21

	EM -> '[' . ']'                                     (rule 30)
	EM -> '[' . SECUENCIA_EM ']'                        (rule 31)
	EM -> '[' . EM "for" identificador "in" EM ']'      (rule 33)

	'-'            shift, and enter state 15
	int            shift, and enter state 16
	real           shift, and enter state 17
	constmat       shift, and enter state 18
	funcion        shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	']'            shift, and enter state 31
	"range"        shift, and enter state 22
	"if"           shift, and enter state 23
	identificador  shift, and enter state 24

	EM             goto state 29
	SECUENCIA_EM   goto state 30

State 22

	EM -> "range" . '(' EM ',' EM ')'                   (rule 32)

	'('            shift, and enter state 28


State 23

	EM -> "if" . '(' COND ',' EM ',' EM ')'             (rule 34)

	'('            shift, and enter state 27


State 24

	EM -> identificador . '(' EM ')'                    (rule 28)
	EM -> identificador .                               (rule 29)

	'+'            reduce using rule 29
	'-'            reduce using rule 29
	'*'            reduce using rule 29
	'/'            reduce using rule 29
	'^'            reduce using rule 29
	'('            shift, and enter state 26
	')'            reduce using rule 29
	']'            reduce using rule 29
	','            reduce using rule 29
	"for"          reduce using rule 29
	"AND"          reduce using rule 29
	"OR"           reduce using rule 29
	'<'            reduce using rule 29
	'>'            reduce using rule 29
	">="           reduce using rule 29
	"<="           reduce using rule 29
	"=="           reduce using rule 29
	';'            reduce using rule 29
	"with"         reduce using rule 29
	"plot"         reduce using rule 29
	"endfor"       reduce using rule 29
	"step"         reduce using rule 29
	"push_back"    reduce using rule 29
	identificador  reduce using rule 29


State 25

	SEC_INSTR -> INSTR ';' .                            (rule 1)

	"plot"         reduce using rule 1
	"push_back"    reduce using rule 1
	identificador  reduce using rule 1
	%eof           reduce using rule 1


State 26

	EM -> identificador '(' . EM ')'                    (rule 28)

	'-'            shift, and enter state 15
	int            shift, and enter state 16
	real           shift, and enter state 17
	constmat       shift, and enter state 18
	funcion        shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	"range"        shift, and enter state 22
	"if"           shift, and enter state 23
	identificador  shift, and enter state 24

	EM             goto state 66

State 27

	EM -> "if" '(' . COND ',' EM ',' EM ')'             (rule 34)

	'-'            shift, and enter state 15
	int            shift, and enter state 16
	real           shift, and enter state 17
	constmat       shift, and enter state 18
	funcion        shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	"range"        shift, and enter state 22
	"if"           shift, and enter state 23
	"NOT"          shift, and enter state 65
	identificador  shift, and enter state 24

	EM             goto state 63
	COND           goto state 64

State 28

	EM -> "range" '(' . EM ',' EM ')'                   (rule 32)

	'-'            shift, and enter state 15
	int            shift, and enter state 16
	real           shift, and enter state 17
	constmat       shift, and enter state 18
	funcion        shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	"range"        shift, and enter state 22
	"if"           shift, and enter state 23
	identificador  shift, and enter state 24

	EM             goto state 62

State 29

	EM -> EM . '+' EM                                   (rule 17)
	EM -> EM . '-' EM                                   (rule 18)
	EM -> EM . '*' EM                                   (rule 19)
	EM -> EM . '/' EM                                   (rule 20)
	EM -> EM . '^' EM                                   (rule 21)
	EM -> '[' EM . "for" identificador "in" EM ']'      (rule 33)
	SECUENCIA_EM -> EM .                                (rule 35)

	'+'            shift, and enter state 35
	'-'            shift, and enter state 36
	'*'            shift, and enter state 37
	'/'            shift, and enter state 38
	'^'            shift, and enter state 39
	']'            reduce using rule 35
	','            reduce using rule 35
	"for"          shift, and enter state 61


State 30

	EM -> '[' SECUENCIA_EM . ']'                        (rule 31)
	SECUENCIA_EM -> SECUENCIA_EM . ',' EM               (rule 36)

	']'            shift, and enter state 59
	','            shift, and enter state 60


State 31

	EM -> '[' ']' .                                     (rule 30)

	'+'            reduce using rule 30
	'-'            reduce using rule 30
	'*'            reduce using rule 30
	'/'            reduce using rule 30
	'^'            reduce using rule 30
	')'            reduce using rule 30
	']'            reduce using rule 30
	','            reduce using rule 30
	"for"          reduce using rule 30
	"AND"          reduce using rule 30
	"OR"           reduce using rule 30
	'<'            reduce using rule 30
	'>'            reduce using rule 30
	">="           reduce using rule 30
	"<="           reduce using rule 30
	"=="           reduce using rule 30
	';'            reduce using rule 30
	"with"         reduce using rule 30
	"plot"         reduce using rule 30
	"endfor"       reduce using rule 30
	"step"         reduce using rule 30
	"push_back"    reduce using rule 30
	identificador  reduce using rule 30


State 32

	EM -> EM . '+' EM                                   (rule 17)
	EM -> EM . '-' EM                                   (rule 18)
	EM -> EM . '*' EM                                   (rule 19)
	EM -> EM . '/' EM                                   (rule 20)
	EM -> EM . '^' EM                                   (rule 21)
	EM -> '(' EM . ')'                                  (rule 23)

	'+'            shift, and enter state 35
	'-'            shift, and enter state 36
	'*'            shift, and enter state 37
	'/'            shift, and enter state 38
	'^'            shift, and enter state 39
	')'            shift, and enter state 58


State 33

	EM -> funcion '(' . EM ')'                          (rule 27)

	'-'            shift, and enter state 15
	int            shift, and enter state 16
	real           shift, and enter state 17
	constmat       shift, and enter state 18
	funcion        shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	"range"        shift, and enter state 22
	"if"           shift, and enter state 23
	identificador  shift, and enter state 24

	EM             goto state 57

State 34

	EM -> EM . '+' EM                                   (rule 17)
	EM -> EM . '-' EM                                   (rule 18)
	EM -> EM . '*' EM                                   (rule 19)
	EM -> EM . '/' EM                                   (rule 20)
	EM -> EM . '^' EM                                   (rule 21)
	EM -> '-' EM .                                      (rule 22)

	'+'            reduce using rule 22
	'-'            reduce using rule 22
	'*'            shift, and enter state 37
	'/'            shift, and enter state 38
	'^'            shift, and enter state 39
	')'            reduce using rule 22
	']'            reduce using rule 22
	','            reduce using rule 22
	"for"          reduce using rule 22
	"AND"          reduce using rule 22
	"OR"           reduce using rule 22
	'<'            reduce using rule 22
	'>'            reduce using rule 22
	">="           reduce using rule 22
	"<="           reduce using rule 22
	"=="           reduce using rule 22
	';'            reduce using rule 22
	"with"         reduce using rule 22
	"plot"         reduce using rule 22
	"endfor"       reduce using rule 22
	"step"         reduce using rule 22
	"push_back"    reduce using rule 22
	identificador  reduce using rule 22


State 35

	EM -> EM '+' . EM                                   (rule 17)

	'-'            shift, and enter state 15
	int            shift, and enter state 16
	real           shift, and enter state 17
	constmat       shift, and enter state 18
	funcion        shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	"range"        shift, and enter state 22
	"if"           shift, and enter state 23
	identificador  shift, and enter state 24

	EM             goto state 56

State 36

	EM -> EM '-' . EM                                   (rule 18)

	'-'            shift, and enter state 15
	int            shift, and enter state 16
	real           shift, and enter state 17
	constmat       shift, and enter state 18
	funcion        shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	"range"        shift, and enter state 22
	"if"           shift, and enter state 23
	identificador  shift, and enter state 24

	EM             goto state 55

State 37

	EM -> EM '*' . EM                                   (rule 19)

	'-'            shift, and enter state 15
	int            shift, and enter state 16
	real           shift, and enter state 17
	constmat       shift, and enter state 18
	funcion        shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	"range"        shift, and enter state 22
	"if"           shift, and enter state 23
	identificador  shift, and enter state 24

	EM             goto state 54

State 38

	EM -> EM '/' . EM                                   (rule 20)

	'-'            shift, and enter state 15
	int            shift, and enter state 16
	real           shift, and enter state 17
	constmat       shift, and enter state 18
	funcion        shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	"range"        shift, and enter state 22
	"if"           shift, and enter state 23
	identificador  shift, and enter state 24

	EM             goto state 53

State 39

	EM -> EM '^' . EM                                   (rule 21)

	'-'            shift, and enter state 15
	int            shift, and enter state 16
	real           shift, and enter state 17
	constmat       shift, and enter state 18
	funcion        shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	"range"        shift, and enter state 22
	"if"           shift, and enter state 23
	identificador  shift, and enter state 24

	EM             goto state 52

State 40

	INSTR -> "plot" EM ',' . EG "with" '[' ']'          (rule 8)
	INSTR -> "plot" EM ',' . EG "with" '[' SECUENCIA_ESTILO ']'    (rule 9)
	INSTR -> "plot" EM ',' . EG "with" estilo           (rule 10)
	INSTR -> "plot" EM ',' . EG                         (rule 11)

	'-'            shift, and enter state 15
	int            shift, and enter state 16
	real           shift, and enter state 17
	constmat       shift, and enter state 18
	funcion        shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	"range"        shift, and enter state 22
	"if"           shift, and enter state 23
	'\''           shift, and enter state 51
	identificador  shift, and enter state 24

	EM             goto state 49
	EG             goto state 50

State 41

	INSTR -> "push_back" '(' identificador . ',' EM ')'    (rule 12)

	','            shift, and enter state 48


State 42

	INSTR -> identificador '=' EM .                     (rule 7)
	EM -> EM . '+' EM                                   (rule 17)
	EM -> EM . '-' EM                                   (rule 18)
	EM -> EM . '*' EM                                   (rule 19)
	EM -> EM . '/' EM                                   (rule 20)
	EM -> EM . '^' EM                                   (rule 21)

	'+'            shift, and enter state 35
	'-'            shift, and enter state 36
	'*'            shift, and enter state 37
	'/'            shift, and enter state 38
	'^'            shift, and enter state 39
	';'            reduce using rule 7
	"endfor"       reduce using rule 7


State 43

	INSTR -> identificador '(' identificador . ')' '=' EM    (rule 6)

	')'            shift, and enter state 47


State 44

	SEC_INSTR -> SEC_INSTR INSTR ';' .                  (rule 3)

	"plot"         reduce using rule 3
	"push_back"    reduce using rule 3
	identificador  reduce using rule 3
	%eof           reduce using rule 3


State 45

	CICLO -> "for" identificador "in" . EM SEC_INSTR2 "endfor"    (rule 13)
	CICLO -> "for" identificador "in" . EM "step" int SEC_INSTR2 "endfor"    (rule 14)

	'-'            shift, and enter state 15
	int            shift, and enter state 16
	real           shift, and enter state 17
	constmat       shift, and enter state 18
	funcion        shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	"range"        shift, and enter state 22
	"if"           shift, and enter state 23
	identificador  shift, and enter state 24

	EM             goto state 46

State 46

	CICLO -> "for" identificador "in" EM . SEC_INSTR2 "endfor"    (rule 13)
	CICLO -> "for" identificador "in" EM . "step" int SEC_INSTR2 "endfor"    (rule 14)
	EM -> EM . '+' EM                                   (rule 17)
	EM -> EM . '-' EM                                   (rule 18)
	EM -> EM . '*' EM                                   (rule 19)
	EM -> EM . '/' EM                                   (rule 20)
	EM -> EM . '^' EM                                   (rule 21)

	'+'            shift, and enter state 35
	'-'            shift, and enter state 36
	'*'            shift, and enter state 37
	'/'            shift, and enter state 38
	'^'            shift, and enter state 39
	"plot"         shift, and enter state 3
	"step"         shift, and enter state 87
	"push_back"    shift, and enter state 4
	identificador  shift, and enter state 5

	SEC_INSTR2     goto state 85
	INSTR          goto state 86

State 47

	INSTR -> identificador '(' identificador ')' . '=' EM    (rule 6)

	'='            shift, and enter state 84


State 48

	INSTR -> "push_back" '(' identificador ',' . EM ')'    (rule 12)

	'-'            shift, and enter state 15
	int            shift, and enter state 16
	real           shift, and enter state 17
	constmat       shift, and enter state 18
	funcion        shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	"range"        shift, and enter state 22
	"if"           shift, and enter state 23
	identificador  shift, and enter state 24

	EM             goto state 83

State 49

	EM -> EM . '+' EM                                   (rule 17)
	EM -> EM . '-' EM                                   (rule 18)
	EM -> EM . '*' EM                                   (rule 19)
	EM -> EM . '/' EM                                   (rule 20)
	EM -> EM . '^' EM                                   (rule 21)
	EG -> EM .                                          (rule 46)

	'+'            shift, and enter state 35
	'-'            shift, and enter state 36
	'*'            shift, and enter state 37
	'/'            shift, and enter state 38
	'^'            shift, and enter state 39
	';'            reduce using rule 46
	"with"         reduce using rule 46
	"endfor"       reduce using rule 46


State 50

	INSTR -> "plot" EM ',' EG . "with" '[' ']'          (rule 8)
	INSTR -> "plot" EM ',' EG . "with" '[' SECUENCIA_ESTILO ']'    (rule 9)
	INSTR -> "plot" EM ',' EG . "with" estilo           (rule 10)
	INSTR -> "plot" EM ',' EG .                         (rule 11)

	';'            reduce using rule 11
	"with"         shift, and enter state 82
	"endfor"       reduce using rule 11


State 51

	EG -> '\'' . identificador '\''                     (rule 47)

	identificador  shift, and enter state 81


State 52

	EM -> EM . '+' EM                                   (rule 17)
	EM -> EM . '-' EM                                   (rule 18)
	EM -> EM . '*' EM                                   (rule 19)
	EM -> EM . '/' EM                                   (rule 20)
	EM -> EM . '^' EM                                   (rule 21)
	EM -> EM '^' EM .                                   (rule 21)

	'+'            reduce using rule 21
	'-'            reduce using rule 21
	'*'            reduce using rule 21
	'/'            reduce using rule 21
	'^'            shift, and enter state 39
	')'            reduce using rule 21
	']'            reduce using rule 21
	','            reduce using rule 21
	"for"          reduce using rule 21
	"AND"          reduce using rule 21
	"OR"           reduce using rule 21
	'<'            reduce using rule 21
	'>'            reduce using rule 21
	">="           reduce using rule 21
	"<="           reduce using rule 21
	"=="           reduce using rule 21
	';'            reduce using rule 21
	"with"         reduce using rule 21
	"plot"         reduce using rule 21
	"endfor"       reduce using rule 21
	"step"         reduce using rule 21
	"push_back"    reduce using rule 21
	identificador  reduce using rule 21


State 53

	EM -> EM . '+' EM                                   (rule 17)
	EM -> EM . '-' EM                                   (rule 18)
	EM -> EM . '*' EM                                   (rule 19)
	EM -> EM . '/' EM                                   (rule 20)
	EM -> EM '/' EM .                                   (rule 20)
	EM -> EM . '^' EM                                   (rule 21)

	'+'            reduce using rule 20
	'-'            reduce using rule 20
	'*'            reduce using rule 20
	'/'            reduce using rule 20
	'^'            shift, and enter state 39
	')'            reduce using rule 20
	']'            reduce using rule 20
	','            reduce using rule 20
	"for"          reduce using rule 20
	"AND"          reduce using rule 20
	"OR"           reduce using rule 20
	'<'            reduce using rule 20
	'>'            reduce using rule 20
	">="           reduce using rule 20
	"<="           reduce using rule 20
	"=="           reduce using rule 20
	';'            reduce using rule 20
	"with"         reduce using rule 20
	"plot"         reduce using rule 20
	"endfor"       reduce using rule 20
	"step"         reduce using rule 20
	"push_back"    reduce using rule 20
	identificador  reduce using rule 20


State 54

	EM -> EM . '+' EM                                   (rule 17)
	EM -> EM . '-' EM                                   (rule 18)
	EM -> EM . '*' EM                                   (rule 19)
	EM -> EM '*' EM .                                   (rule 19)
	EM -> EM . '/' EM                                   (rule 20)
	EM -> EM . '^' EM                                   (rule 21)

	'+'            reduce using rule 19
	'-'            reduce using rule 19
	'*'            reduce using rule 19
	'/'            reduce using rule 19
	'^'            shift, and enter state 39
	')'            reduce using rule 19
	']'            reduce using rule 19
	','            reduce using rule 19
	"for"          reduce using rule 19
	"AND"          reduce using rule 19
	"OR"           reduce using rule 19
	'<'            reduce using rule 19
	'>'            reduce using rule 19
	">="           reduce using rule 19
	"<="           reduce using rule 19
	"=="           reduce using rule 19
	';'            reduce using rule 19
	"with"         reduce using rule 19
	"plot"         reduce using rule 19
	"endfor"       reduce using rule 19
	"step"         reduce using rule 19
	"push_back"    reduce using rule 19
	identificador  reduce using rule 19


State 55

	EM -> EM . '+' EM                                   (rule 17)
	EM -> EM . '-' EM                                   (rule 18)
	EM -> EM '-' EM .                                   (rule 18)
	EM -> EM . '*' EM                                   (rule 19)
	EM -> EM . '/' EM                                   (rule 20)
	EM -> EM . '^' EM                                   (rule 21)

	'+'            reduce using rule 18
	'-'            reduce using rule 18
	'*'            shift, and enter state 37
	'/'            shift, and enter state 38
	'^'            shift, and enter state 39
	')'            reduce using rule 18
	']'            reduce using rule 18
	','            reduce using rule 18
	"for"          reduce using rule 18
	"AND"          reduce using rule 18
	"OR"           reduce using rule 18
	'<'            reduce using rule 18
	'>'            reduce using rule 18
	">="           reduce using rule 18
	"<="           reduce using rule 18
	"=="           reduce using rule 18
	';'            reduce using rule 18
	"with"         reduce using rule 18
	"plot"         reduce using rule 18
	"endfor"       reduce using rule 18
	"step"         reduce using rule 18
	"push_back"    reduce using rule 18
	identificador  reduce using rule 18


State 56

	EM -> EM . '+' EM                                   (rule 17)
	EM -> EM '+' EM .                                   (rule 17)
	EM -> EM . '-' EM                                   (rule 18)
	EM -> EM . '*' EM                                   (rule 19)
	EM -> EM . '/' EM                                   (rule 20)
	EM -> EM . '^' EM                                   (rule 21)

	'+'            reduce using rule 17
	'-'            reduce using rule 17
	'*'            shift, and enter state 37
	'/'            shift, and enter state 38
	'^'            shift, and enter state 39
	')'            reduce using rule 17
	']'            reduce using rule 17
	','            reduce using rule 17
	"for"          reduce using rule 17
	"AND"          reduce using rule 17
	"OR"           reduce using rule 17
	'<'            reduce using rule 17
	'>'            reduce using rule 17
	">="           reduce using rule 17
	"<="           reduce using rule 17
	"=="           reduce using rule 17
	';'            reduce using rule 17
	"with"         reduce using rule 17
	"plot"         reduce using rule 17
	"endfor"       reduce using rule 17
	"step"         reduce using rule 17
	"push_back"    reduce using rule 17
	identificador  reduce using rule 17


State 57

	EM -> EM . '+' EM                                   (rule 17)
	EM -> EM . '-' EM                                   (rule 18)
	EM -> EM . '*' EM                                   (rule 19)
	EM -> EM . '/' EM                                   (rule 20)
	EM -> EM . '^' EM                                   (rule 21)
	EM -> funcion '(' EM . ')'                          (rule 27)

	'+'            shift, and enter state 35
	'-'            shift, and enter state 36
	'*'            shift, and enter state 37
	'/'            shift, and enter state 38
	'^'            shift, and enter state 39
	')'            shift, and enter state 80


State 58

	EM -> '(' EM ')' .                                  (rule 23)

	'+'            reduce using rule 23
	'-'            reduce using rule 23
	'*'            reduce using rule 23
	'/'            reduce using rule 23
	'^'            reduce using rule 23
	')'            reduce using rule 23
	']'            reduce using rule 23
	','            reduce using rule 23
	"for"          reduce using rule 23
	"AND"          reduce using rule 23
	"OR"           reduce using rule 23
	'<'            reduce using rule 23
	'>'            reduce using rule 23
	">="           reduce using rule 23
	"<="           reduce using rule 23
	"=="           reduce using rule 23
	';'            reduce using rule 23
	"with"         reduce using rule 23
	"plot"         reduce using rule 23
	"endfor"       reduce using rule 23
	"step"         reduce using rule 23
	"push_back"    reduce using rule 23
	identificador  reduce using rule 23


State 59

	EM -> '[' SECUENCIA_EM ']' .                        (rule 31)

	'+'            reduce using rule 31
	'-'            reduce using rule 31
	'*'            reduce using rule 31
	'/'            reduce using rule 31
	'^'            reduce using rule 31
	')'            reduce using rule 31
	']'            reduce using rule 31
	','            reduce using rule 31
	"for"          reduce using rule 31
	"AND"          reduce using rule 31
	"OR"           reduce using rule 31
	'<'            reduce using rule 31
	'>'            reduce using rule 31
	">="           reduce using rule 31
	"<="           reduce using rule 31
	"=="           reduce using rule 31
	';'            reduce using rule 31
	"with"         reduce using rule 31
	"plot"         reduce using rule 31
	"endfor"       reduce using rule 31
	"step"         reduce using rule 31
	"push_back"    reduce using rule 31
	identificador  reduce using rule 31


State 60

	SECUENCIA_EM -> SECUENCIA_EM ',' . EM               (rule 36)

	'-'            shift, and enter state 15
	int            shift, and enter state 16
	real           shift, and enter state 17
	constmat       shift, and enter state 18
	funcion        shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	"range"        shift, and enter state 22
	"if"           shift, and enter state 23
	identificador  shift, and enter state 24

	EM             goto state 79

State 61

	EM -> '[' EM "for" . identificador "in" EM ']'      (rule 33)

	identificador  shift, and enter state 78


State 62

	EM -> EM . '+' EM                                   (rule 17)
	EM -> EM . '-' EM                                   (rule 18)
	EM -> EM . '*' EM                                   (rule 19)
	EM -> EM . '/' EM                                   (rule 20)
	EM -> EM . '^' EM                                   (rule 21)
	EM -> "range" '(' EM . ',' EM ')'                   (rule 32)

	'+'            shift, and enter state 35
	'-'            shift, and enter state 36
	'*'            shift, and enter state 37
	'/'            shift, and enter state 38
	'^'            shift, and enter state 39
	','            shift, and enter state 77


State 63

	EM -> EM . '+' EM                                   (rule 17)
	EM -> EM . '-' EM                                   (rule 18)
	EM -> EM . '*' EM                                   (rule 19)
	EM -> EM . '/' EM                                   (rule 20)
	EM -> EM . '^' EM                                   (rule 21)
	COND -> EM .                                        (rule 37)

	'+'            shift, and enter state 35
	'-'            shift, and enter state 36
	'*'            shift, and enter state 37
	'/'            shift, and enter state 38
	'^'            shift, and enter state 39
	','            reduce using rule 37
	"AND"          reduce using rule 37
	"OR"           reduce using rule 37
	'<'            reduce using rule 37
	'>'            reduce using rule 37
	">="           reduce using rule 37
	"<="           reduce using rule 37
	"=="           reduce using rule 37


State 64

	EM -> "if" '(' COND . ',' EM ',' EM ')'             (rule 34)
	COND -> COND . "AND" COND                           (rule 38)
	COND -> COND . "OR" COND                            (rule 39)
	COND -> COND . '>' COND                             (rule 41)
	COND -> COND . '<' COND                             (rule 42)
	COND -> COND . "<=" COND                            (rule 43)
	COND -> COND . ">=" COND                            (rule 44)
	COND -> COND . "==" COND                            (rule 45)

	','            shift, and enter state 69
	"AND"          shift, and enter state 70
	"OR"           shift, and enter state 71
	'<'            shift, and enter state 72
	'>'            shift, and enter state 73
	">="           shift, and enter state 74
	"<="           shift, and enter state 75
	"=="           shift, and enter state 76


State 65

	COND -> "NOT" . COND                                (rule 40)

	'-'            shift, and enter state 15
	int            shift, and enter state 16
	real           shift, and enter state 17
	constmat       shift, and enter state 18
	funcion        shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	"range"        shift, and enter state 22
	"if"           shift, and enter state 23
	"NOT"          shift, and enter state 65
	identificador  shift, and enter state 24

	EM             goto state 63
	COND           goto state 68

State 66

	EM -> EM . '+' EM                                   (rule 17)
	EM -> EM . '-' EM                                   (rule 18)
	EM -> EM . '*' EM                                   (rule 19)
	EM -> EM . '/' EM                                   (rule 20)
	EM -> EM . '^' EM                                   (rule 21)
	EM -> identificador '(' EM . ')'                    (rule 28)

	'+'            shift, and enter state 35
	'-'            shift, and enter state 36
	'*'            shift, and enter state 37
	'/'            shift, and enter state 38
	'^'            shift, and enter state 39
	')'            shift, and enter state 67


State 67

	EM -> identificador '(' EM ')' .                    (rule 28)

	'+'            reduce using rule 28
	'-'            reduce using rule 28
	'*'            reduce using rule 28
	'/'            reduce using rule 28
	'^'            reduce using rule 28
	')'            reduce using rule 28
	']'            reduce using rule 28
	','            reduce using rule 28
	"for"          reduce using rule 28
	"AND"          reduce using rule 28
	"OR"           reduce using rule 28
	'<'            reduce using rule 28
	'>'            reduce using rule 28
	">="           reduce using rule 28
	"<="           reduce using rule 28
	"=="           reduce using rule 28
	';'            reduce using rule 28
	"with"         reduce using rule 28
	"plot"         reduce using rule 28
	"endfor"       reduce using rule 28
	"step"         reduce using rule 28
	"push_back"    reduce using rule 28
	identificador  reduce using rule 28


State 68

	COND -> COND . "AND" COND                           (rule 38)
	COND -> COND . "OR" COND                            (rule 39)
	COND -> "NOT" COND .                                (rule 40)
	COND -> COND . '>' COND                             (rule 41)
	COND -> COND . '<' COND                             (rule 42)
	COND -> COND . "<=" COND                            (rule 43)
	COND -> COND . ">=" COND                            (rule 44)
	COND -> COND . "==" COND                            (rule 45)

	','            reduce using rule 40
	"AND"          reduce using rule 40
	"OR"           reduce using rule 40
	'<'            shift, and enter state 72
	'>'            shift, and enter state 73
	">="           shift, and enter state 74
	"<="           shift, and enter state 75
	"=="           shift, and enter state 76


State 69

	EM -> "if" '(' COND ',' . EM ',' EM ')'             (rule 34)

	'-'            shift, and enter state 15
	int            shift, and enter state 16
	real           shift, and enter state 17
	constmat       shift, and enter state 18
	funcion        shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	"range"        shift, and enter state 22
	"if"           shift, and enter state 23
	identificador  shift, and enter state 24

	EM             goto state 105

State 70

	COND -> COND "AND" . COND                           (rule 38)

	'-'            shift, and enter state 15
	int            shift, and enter state 16
	real           shift, and enter state 17
	constmat       shift, and enter state 18
	funcion        shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	"range"        shift, and enter state 22
	"if"           shift, and enter state 23
	"NOT"          shift, and enter state 65
	identificador  shift, and enter state 24

	EM             goto state 63
	COND           goto state 104

State 71

	COND -> COND "OR" . COND                            (rule 39)

	'-'            shift, and enter state 15
	int            shift, and enter state 16
	real           shift, and enter state 17
	constmat       shift, and enter state 18
	funcion        shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	"range"        shift, and enter state 22
	"if"           shift, and enter state 23
	"NOT"          shift, and enter state 65
	identificador  shift, and enter state 24

	EM             goto state 63
	COND           goto state 103

State 72

	COND -> COND '<' . COND                             (rule 42)

	'-'            shift, and enter state 15
	int            shift, and enter state 16
	real           shift, and enter state 17
	constmat       shift, and enter state 18
	funcion        shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	"range"        shift, and enter state 22
	"if"           shift, and enter state 23
	"NOT"          shift, and enter state 65
	identificador  shift, and enter state 24

	EM             goto state 63
	COND           goto state 102

State 73

	COND -> COND '>' . COND                             (rule 41)

	'-'            shift, and enter state 15
	int            shift, and enter state 16
	real           shift, and enter state 17
	constmat       shift, and enter state 18
	funcion        shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	"range"        shift, and enter state 22
	"if"           shift, and enter state 23
	"NOT"          shift, and enter state 65
	identificador  shift, and enter state 24

	EM             goto state 63
	COND           goto state 101

State 74

	COND -> COND ">=" . COND                            (rule 44)

	'-'            shift, and enter state 15
	int            shift, and enter state 16
	real           shift, and enter state 17
	constmat       shift, and enter state 18
	funcion        shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	"range"        shift, and enter state 22
	"if"           shift, and enter state 23
	"NOT"          shift, and enter state 65
	identificador  shift, and enter state 24

	EM             goto state 63
	COND           goto state 100

State 75

	COND -> COND "<=" . COND                            (rule 43)

	'-'            shift, and enter state 15
	int            shift, and enter state 16
	real           shift, and enter state 17
	constmat       shift, and enter state 18
	funcion        shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	"range"        shift, and enter state 22
	"if"           shift, and enter state 23
	"NOT"          shift, and enter state 65
	identificador  shift, and enter state 24

	EM             goto state 63
	COND           goto state 99

State 76

	COND -> COND "==" . COND                            (rule 45)

	'-'            shift, and enter state 15
	int            shift, and enter state 16
	real           shift, and enter state 17
	constmat       shift, and enter state 18
	funcion        shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	"range"        shift, and enter state 22
	"if"           shift, and enter state 23
	"NOT"          shift, and enter state 65
	identificador  shift, and enter state 24

	EM             goto state 63
	COND           goto state 98

State 77

	EM -> "range" '(' EM ',' . EM ')'                   (rule 32)

	'-'            shift, and enter state 15
	int            shift, and enter state 16
	real           shift, and enter state 17
	constmat       shift, and enter state 18
	funcion        shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	"range"        shift, and enter state 22
	"if"           shift, and enter state 23
	identificador  shift, and enter state 24

	EM             goto state 97

State 78

	EM -> '[' EM "for" identificador . "in" EM ']'      (rule 33)

	"in"           shift, and enter state 96


State 79

	EM -> EM . '+' EM                                   (rule 17)
	EM -> EM . '-' EM                                   (rule 18)
	EM -> EM . '*' EM                                   (rule 19)
	EM -> EM . '/' EM                                   (rule 20)
	EM -> EM . '^' EM                                   (rule 21)
	SECUENCIA_EM -> SECUENCIA_EM ',' EM .               (rule 36)

	'+'            shift, and enter state 35
	'-'            shift, and enter state 36
	'*'            shift, and enter state 37
	'/'            shift, and enter state 38
	'^'            shift, and enter state 39
	']'            reduce using rule 36
	','            reduce using rule 36


State 80

	EM -> funcion '(' EM ')' .                          (rule 27)

	'+'            reduce using rule 27
	'-'            reduce using rule 27
	'*'            reduce using rule 27
	'/'            reduce using rule 27
	'^'            reduce using rule 27
	')'            reduce using rule 27
	']'            reduce using rule 27
	','            reduce using rule 27
	"for"          reduce using rule 27
	"AND"          reduce using rule 27
	"OR"           reduce using rule 27
	'<'            reduce using rule 27
	'>'            reduce using rule 27
	">="           reduce using rule 27
	"<="           reduce using rule 27
	"=="           reduce using rule 27
	';'            reduce using rule 27
	"with"         reduce using rule 27
	"plot"         reduce using rule 27
	"endfor"       reduce using rule 27
	"step"         reduce using rule 27
	"push_back"    reduce using rule 27
	identificador  reduce using rule 27


State 81

	EG -> '\'' identificador . '\''                     (rule 47)

	'\''           shift, and enter state 95


State 82

	INSTR -> "plot" EM ',' EG "with" . '[' ']'          (rule 8)
	INSTR -> "plot" EM ',' EG "with" . '[' SECUENCIA_ESTILO ']'    (rule 9)
	INSTR -> "plot" EM ',' EG "with" . estilo           (rule 10)

	'['            shift, and enter state 93
	estilo         shift, and enter state 94


State 83

	INSTR -> "push_back" '(' identificador ',' EM . ')'    (rule 12)
	EM -> EM . '+' EM                                   (rule 17)
	EM -> EM . '-' EM                                   (rule 18)
	EM -> EM . '*' EM                                   (rule 19)
	EM -> EM . '/' EM                                   (rule 20)
	EM -> EM . '^' EM                                   (rule 21)

	'+'            shift, and enter state 35
	'-'            shift, and enter state 36
	'*'            shift, and enter state 37
	'/'            shift, and enter state 38
	'^'            shift, and enter state 39
	')'            shift, and enter state 92


State 84

	INSTR -> identificador '(' identificador ')' '=' . EM    (rule 6)

	'-'            shift, and enter state 15
	int            shift, and enter state 16
	real           shift, and enter state 17
	constmat       shift, and enter state 18
	funcion        shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	"range"        shift, and enter state 22
	"if"           shift, and enter state 23
	identificador  shift, and enter state 24

	EM             goto state 91

State 85

	SEC_INSTR2 -> SEC_INSTR2 . ';' INSTR                (rule 5)
	CICLO -> "for" identificador "in" EM SEC_INSTR2 . "endfor"    (rule 13)

	';'            shift, and enter state 89
	"endfor"       shift, and enter state 90


State 86

	SEC_INSTR2 -> INSTR .                               (rule 4)

	';'            reduce using rule 4
	"endfor"       reduce using rule 4


State 87

	CICLO -> "for" identificador "in" EM "step" . int SEC_INSTR2 "endfor"    (rule 14)

	int            shift, and enter state 88


State 88

	CICLO -> "for" identificador "in" EM "step" int . SEC_INSTR2 "endfor"    (rule 14)

	"plot"         shift, and enter state 3
	"push_back"    shift, and enter state 4
	identificador  shift, and enter state 5

	SEC_INSTR2     goto state 113
	INSTR          goto state 86

State 89

	SEC_INSTR2 -> SEC_INSTR2 ';' . INSTR                (rule 5)

	"plot"         shift, and enter state 3
	"push_back"    shift, and enter state 4
	identificador  shift, and enter state 5

	INSTR          goto state 112

State 90

	CICLO -> "for" identificador "in" EM SEC_INSTR2 "endfor" .    (rule 13)

	"plot"         reduce using rule 13
	"push_back"    reduce using rule 13
	identificador  reduce using rule 13
	%eof           reduce using rule 13


State 91

	INSTR -> identificador '(' identificador ')' '=' EM .    (rule 6)
	EM -> EM . '+' EM                                   (rule 17)
	EM -> EM . '-' EM                                   (rule 18)
	EM -> EM . '*' EM                                   (rule 19)
	EM -> EM . '/' EM                                   (rule 20)
	EM -> EM . '^' EM                                   (rule 21)

	'+'            shift, and enter state 35
	'-'            shift, and enter state 36
	'*'            shift, and enter state 37
	'/'            shift, and enter state 38
	'^'            shift, and enter state 39
	';'            reduce using rule 6
	"endfor"       reduce using rule 6


State 92

	INSTR -> "push_back" '(' identificador ',' EM ')' .    (rule 12)

	';'            reduce using rule 12
	"endfor"       reduce using rule 12


State 93

	INSTR -> "plot" EM ',' EG "with" '[' . ']'          (rule 8)
	INSTR -> "plot" EM ',' EG "with" '[' . SECUENCIA_ESTILO ']'    (rule 9)

	']'            shift, and enter state 110
	estilo         shift, and enter state 111

	SECUENCIA_ESTILOgoto state 109

State 94

	INSTR -> "plot" EM ',' EG "with" estilo .           (rule 10)

	';'            reduce using rule 10
	"endfor"       reduce using rule 10


State 95

	EG -> '\'' identificador '\'' .                     (rule 47)

	';'            reduce using rule 47
	"with"         reduce using rule 47
	"endfor"       reduce using rule 47


State 96

	EM -> '[' EM "for" identificador "in" . EM ']'      (rule 33)

	'-'            shift, and enter state 15
	int            shift, and enter state 16
	real           shift, and enter state 17
	constmat       shift, and enter state 18
	funcion        shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	"range"        shift, and enter state 22
	"if"           shift, and enter state 23
	identificador  shift, and enter state 24

	EM             goto state 108

State 97

	EM -> EM . '+' EM                                   (rule 17)
	EM -> EM . '-' EM                                   (rule 18)
	EM -> EM . '*' EM                                   (rule 19)
	EM -> EM . '/' EM                                   (rule 20)
	EM -> EM . '^' EM                                   (rule 21)
	EM -> "range" '(' EM ',' EM . ')'                   (rule 32)

	'+'            shift, and enter state 35
	'-'            shift, and enter state 36
	'*'            shift, and enter state 37
	'/'            shift, and enter state 38
	'^'            shift, and enter state 39
	')'            shift, and enter state 107


State 98

	COND -> COND . "AND" COND                           (rule 38)
	COND -> COND . "OR" COND                            (rule 39)
	COND -> COND . '>' COND                             (rule 41)
	COND -> COND . '<' COND                             (rule 42)
	COND -> COND . "<=" COND                            (rule 43)
	COND -> COND . ">=" COND                            (rule 44)
	COND -> COND . "==" COND                            (rule 45)
	COND -> COND "==" COND .                            (rule 45)

	','            reduce using rule 45
	"AND"          reduce using rule 45
	"OR"           reduce using rule 45
	'<'            shift, and enter state 72
	'>'            shift, and enter state 73
	">="           shift, and enter state 74
	"<="           shift, and enter state 75
	"=="           reduce using rule 45


State 99

	COND -> COND . "AND" COND                           (rule 38)
	COND -> COND . "OR" COND                            (rule 39)
	COND -> COND . '>' COND                             (rule 41)
	COND -> COND . '<' COND                             (rule 42)
	COND -> COND . "<=" COND                            (rule 43)
	COND -> COND "<=" COND .                            (rule 43)
	COND -> COND . ">=" COND                            (rule 44)
	COND -> COND . "==" COND                            (rule 45)

	','            reduce using rule 43
	"AND"          reduce using rule 43
	"OR"           reduce using rule 43
	'<'            reduce using rule 43
	'>'            reduce using rule 43
	">="           reduce using rule 43
	"<="           reduce using rule 43
	"=="           reduce using rule 43


State 100

	COND -> COND . "AND" COND                           (rule 38)
	COND -> COND . "OR" COND                            (rule 39)
	COND -> COND . '>' COND                             (rule 41)
	COND -> COND . '<' COND                             (rule 42)
	COND -> COND . "<=" COND                            (rule 43)
	COND -> COND . ">=" COND                            (rule 44)
	COND -> COND ">=" COND .                            (rule 44)
	COND -> COND . "==" COND                            (rule 45)

	','            reduce using rule 44
	"AND"          reduce using rule 44
	"OR"           reduce using rule 44
	'<'            reduce using rule 44
	'>'            reduce using rule 44
	">="           reduce using rule 44
	"<="           reduce using rule 44
	"=="           reduce using rule 44


State 101

	COND -> COND . "AND" COND                           (rule 38)
	COND -> COND . "OR" COND                            (rule 39)
	COND -> COND . '>' COND                             (rule 41)
	COND -> COND '>' COND .                             (rule 41)
	COND -> COND . '<' COND                             (rule 42)
	COND -> COND . "<=" COND                            (rule 43)
	COND -> COND . ">=" COND                            (rule 44)
	COND -> COND . "==" COND                            (rule 45)

	','            reduce using rule 41
	"AND"          reduce using rule 41
	"OR"           reduce using rule 41
	'<'            reduce using rule 41
	'>'            reduce using rule 41
	">="           reduce using rule 41
	"<="           reduce using rule 41
	"=="           reduce using rule 41


State 102

	COND -> COND . "AND" COND                           (rule 38)
	COND -> COND . "OR" COND                            (rule 39)
	COND -> COND . '>' COND                             (rule 41)
	COND -> COND . '<' COND                             (rule 42)
	COND -> COND '<' COND .                             (rule 42)
	COND -> COND . "<=" COND                            (rule 43)
	COND -> COND . ">=" COND                            (rule 44)
	COND -> COND . "==" COND                            (rule 45)

	','            reduce using rule 42
	"AND"          reduce using rule 42
	"OR"           reduce using rule 42
	'<'            reduce using rule 42
	'>'            reduce using rule 42
	">="           reduce using rule 42
	"<="           reduce using rule 42
	"=="           reduce using rule 42


State 103

	COND -> COND . "AND" COND                           (rule 38)
	COND -> COND . "OR" COND                            (rule 39)
	COND -> COND "OR" COND .                            (rule 39)
	COND -> COND . '>' COND                             (rule 41)
	COND -> COND . '<' COND                             (rule 42)
	COND -> COND . "<=" COND                            (rule 43)
	COND -> COND . ">=" COND                            (rule 44)
	COND -> COND . "==" COND                            (rule 45)

	','            reduce using rule 39
	"AND"          reduce using rule 39
	"OR"           reduce using rule 39
	'<'            shift, and enter state 72
	'>'            shift, and enter state 73
	">="           shift, and enter state 74
	"<="           shift, and enter state 75
	"=="           shift, and enter state 76


State 104

	COND -> COND . "AND" COND                           (rule 38)
	COND -> COND "AND" COND .                           (rule 38)
	COND -> COND . "OR" COND                            (rule 39)
	COND -> COND . '>' COND                             (rule 41)
	COND -> COND . '<' COND                             (rule 42)
	COND -> COND . "<=" COND                            (rule 43)
	COND -> COND . ">=" COND                            (rule 44)
	COND -> COND . "==" COND                            (rule 45)

	','            reduce using rule 38
	"AND"          reduce using rule 38
	"OR"           reduce using rule 38
	'<'            shift, and enter state 72
	'>'            shift, and enter state 73
	">="           shift, and enter state 74
	"<="           shift, and enter state 75
	"=="           shift, and enter state 76


State 105

	EM -> EM . '+' EM                                   (rule 17)
	EM -> EM . '-' EM                                   (rule 18)
	EM -> EM . '*' EM                                   (rule 19)
	EM -> EM . '/' EM                                   (rule 20)
	EM -> EM . '^' EM                                   (rule 21)
	EM -> "if" '(' COND ',' EM . ',' EM ')'             (rule 34)

	'+'            shift, and enter state 35
	'-'            shift, and enter state 36
	'*'            shift, and enter state 37
	'/'            shift, and enter state 38
	'^'            shift, and enter state 39
	','            shift, and enter state 106


State 106

	EM -> "if" '(' COND ',' EM ',' . EM ')'             (rule 34)

	'-'            shift, and enter state 15
	int            shift, and enter state 16
	real           shift, and enter state 17
	constmat       shift, and enter state 18
	funcion        shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	"range"        shift, and enter state 22
	"if"           shift, and enter state 23
	identificador  shift, and enter state 24

	EM             goto state 118

State 107

	EM -> "range" '(' EM ',' EM ')' .                   (rule 32)

	'+'            reduce using rule 32
	'-'            reduce using rule 32
	'*'            reduce using rule 32
	'/'            reduce using rule 32
	'^'            reduce using rule 32
	')'            reduce using rule 32
	']'            reduce using rule 32
	','            reduce using rule 32
	"for"          reduce using rule 32
	"AND"          reduce using rule 32
	"OR"           reduce using rule 32
	'<'            reduce using rule 32
	'>'            reduce using rule 32
	">="           reduce using rule 32
	"<="           reduce using rule 32
	"=="           reduce using rule 32
	';'            reduce using rule 32
	"with"         reduce using rule 32
	"plot"         reduce using rule 32
	"endfor"       reduce using rule 32
	"step"         reduce using rule 32
	"push_back"    reduce using rule 32
	identificador  reduce using rule 32


State 108

	EM -> EM . '+' EM                                   (rule 17)
	EM -> EM . '-' EM                                   (rule 18)
	EM -> EM . '*' EM                                   (rule 19)
	EM -> EM . '/' EM                                   (rule 20)
	EM -> EM . '^' EM                                   (rule 21)
	EM -> '[' EM "for" identificador "in" EM . ']'      (rule 33)

	'+'            shift, and enter state 35
	'-'            shift, and enter state 36
	'*'            shift, and enter state 37
	'/'            shift, and enter state 38
	'^'            shift, and enter state 39
	']'            shift, and enter state 117


State 109

	INSTR -> "plot" EM ',' EG "with" '[' SECUENCIA_ESTILO . ']'    (rule 9)
	SECUENCIA_ESTILO -> SECUENCIA_ESTILO . ',' estilo    (rule 15)

	']'            shift, and enter state 115
	','            shift, and enter state 116


State 110

	INSTR -> "plot" EM ',' EG "with" '[' ']' .          (rule 8)

	';'            reduce using rule 8
	"endfor"       reduce using rule 8


State 111

	SECUENCIA_ESTILO -> estilo .                        (rule 16)

	']'            reduce using rule 16
	','            reduce using rule 16


State 112

	SEC_INSTR2 -> SEC_INSTR2 ';' INSTR .                (rule 5)

	';'            reduce using rule 5
	"endfor"       reduce using rule 5


State 113

	SEC_INSTR2 -> SEC_INSTR2 . ';' INSTR                (rule 5)
	CICLO -> "for" identificador "in" EM "step" int SEC_INSTR2 . "endfor"    (rule 14)

	';'            shift, and enter state 89
	"endfor"       shift, and enter state 114


State 114

	CICLO -> "for" identificador "in" EM "step" int SEC_INSTR2 "endfor" .    (rule 14)

	"plot"         reduce using rule 14
	"push_back"    reduce using rule 14
	identificador  reduce using rule 14
	%eof           reduce using rule 14


State 115

	INSTR -> "plot" EM ',' EG "with" '[' SECUENCIA_ESTILO ']' .    (rule 9)

	';'            reduce using rule 9
	"endfor"       reduce using rule 9


State 116

	SECUENCIA_ESTILO -> SECUENCIA_ESTILO ',' . estilo    (rule 15)

	estilo         shift, and enter state 120


State 117

	EM -> '[' EM "for" identificador "in" EM ']' .      (rule 33)

	'+'            reduce using rule 33
	'-'            reduce using rule 33
	'*'            reduce using rule 33
	'/'            reduce using rule 33
	'^'            reduce using rule 33
	')'            reduce using rule 33
	']'            reduce using rule 33
	','            reduce using rule 33
	"for"          reduce using rule 33
	"AND"          reduce using rule 33
	"OR"           reduce using rule 33
	'<'            reduce using rule 33
	'>'            reduce using rule 33
	">="           reduce using rule 33
	"<="           reduce using rule 33
	"=="           reduce using rule 33
	';'            reduce using rule 33
	"with"         reduce using rule 33
	"plot"         reduce using rule 33
	"endfor"       reduce using rule 33
	"step"         reduce using rule 33
	"push_back"    reduce using rule 33
	identificador  reduce using rule 33


State 118

	EM -> EM . '+' EM                                   (rule 17)
	EM -> EM . '-' EM                                   (rule 18)
	EM -> EM . '*' EM                                   (rule 19)
	EM -> EM . '/' EM                                   (rule 20)
	EM -> EM . '^' EM                                   (rule 21)
	EM -> "if" '(' COND ',' EM ',' EM . ')'             (rule 34)

	'+'            shift, and enter state 35
	'-'            shift, and enter state 36
	'*'            shift, and enter state 37
	'/'            shift, and enter state 38
	'^'            shift, and enter state 39
	')'            shift, and enter state 119


State 119

	EM -> "if" '(' COND ',' EM ',' EM ')' .             (rule 34)

	'+'            reduce using rule 34
	'-'            reduce using rule 34
	'*'            reduce using rule 34
	'/'            reduce using rule 34
	'^'            reduce using rule 34
	')'            reduce using rule 34
	']'            reduce using rule 34
	','            reduce using rule 34
	"for"          reduce using rule 34
	"AND"          reduce using rule 34
	"OR"           reduce using rule 34
	'<'            reduce using rule 34
	'>'            reduce using rule 34
	">="           reduce using rule 34
	"<="           reduce using rule 34
	"=="           reduce using rule 34
	';'            reduce using rule 34
	"with"         reduce using rule 34
	"plot"         reduce using rule 34
	"endfor"       reduce using rule 34
	"step"         reduce using rule 34
	"push_back"    reduce using rule 34
	identificador  reduce using rule 34


State 120

	SECUENCIA_ESTILO -> SECUENCIA_ESTILO ',' estilo .    (rule 15)

	']'            reduce using rule 15
	','            reduce using rule 15


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 48
Number of terminals: 36
Number of non-terminals: 10
Number of states: 121
